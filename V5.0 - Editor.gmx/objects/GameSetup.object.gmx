<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Creation code used in "RoomSetup"
//This sets up the inital variables 
//sets the initial view of the screen, this is used to to create the variable
global.currentX = 0; //current map position, defaults to top left corner of map
global.currentY = 0;
global.ListStyle = 1;
global.buildingMyth = 1;
global.roomWidth = 1280;//sets default screen width
global.roomHeight = 720;//sets default screen height
global.fullScreen = false;//sets full screen to false
//eventually, these and the height will be saved/loaded if the user changes the settings/
window_set_fullscreen(global.fullScreen);//sets the screen to full or not, depending on the variable above
global.zoom = 1;//sets start level of zoom
    global.textBoxXScale = 0.8; //sets the textboxXscale when used in zooming ont he map
//week info.
global.TutorialSetup = false;
global.week = 0;//week
global.year = 1;
            global.tempCardBackMythStatus = 0;
//instnace variables
global.TotalInstanceNum = 0;//used later for building placement
global.myth = 0;
global.locked = 0;
global.tempNum = 0;
global.EventID = 1;//sets the default event ID (being 0) when the map screen is entered
global.BackgroundSetup = false;
global.moveLock = 0;//locks the player from entering a location when panning the map screen
global.lastState = 20;//used for moving betwen rooms
global.edit = 0;
global.totalEventCards = 0;//total number of events
global.totalActionCards = 0;//total number of action cards
global.totalInfoCards = 0;//total number of info cards
global.totalConsCards = 0;//total number of consequence cards
global.totalCharCards = 0;//total number of character cards
//ini files
global.locationINI = "ini_files/location.ini";
global.playerINI = "ini_files/player.ini";
global.cardEventINI = "ini_files/cardEvent.ini";
global.cardActionINI = "ini_files/cardAction.ini";
global.cardInfoINI = "ini_files/cardInfo.ini";
global.cardConsINI = "ini_files/cardCons.ini";
global.cardCharINI = "ini_files/cardChar.ini";
global.editorINI = "editor_files/editor.ini";
global.tempPos = 0;
ini_open("Update.ini");
global.ECurVer = ini_read_real("Update","Version",1.0);
ini_close();
ini_open(global.editorINI);
global.LocationTutorial = ini_read_real("Tutorial","Location Include",1);
global.EventTutorial = ini_read_real("Tutorial","Event Include",1);
global.ActionTutorial = ini_read_real("Tutorial","Action Include",1);
global.ConsTutorial = ini_read_real("Tutorial","Cons Include",1);
global.InfoTutorial = ini_read_real("Tutorial","Info Include",1);
global.CharTutorial = ini_read_real("Tutorial","Char Include",1);
global.MythTutorial = ini_read_real("Tutorial","Myth Include",1);
global.PlayerStatsTutorial = ini_read_real("Tutorial","Stats Include",1);
global.DiaryTutorial = ini_read_real("Tutorial","Diary Include",1);
global.CardsTutorial = ini_read_real("Tutorial","Cards Include",1);
for(i = 0; i &lt; 10; i++)
{            
    global.TutorialOrder[i] = ini_read_real("Tutorial","Order"+string(i),i+1);;
}
global.customInt = ini_read_string("General", "Custom Int", "Int");
global.customWell = ini_read_string("General", "Custom Well", "Well");
global.customChar = ini_read_string("General", "Custom Char", "Char");
global.totalLocationBackgrounds = ini_read_real("General", "Location Backgrounds", 0);   
global.totalNormBuildingSprites = ini_read_real("General", "Norm Building Sprites", 0);
global.totalMythBuildingSprites = ini_read_real("General", "Myth Building Sprites", 0);
global.totalBothBuildingSprites = ini_read_real("General", "Both Building Sprites", 0);
global.totalEventCardSprites = ini_read_real("General", "Event Card Sprites", 0);
global.totalActionCardSprites = ini_read_real("General", "Action Card Sprites", 0);
global.totalConsCardSprites = ini_read_real("General", "Cons Card Sprites", 0);
global.totalInfoCardSprites = ini_read_real("General", "Info Card Sprites", 0);
global.totalCharCardSprites = ini_read_real("General", "Char Card Sprites", 0);
global.normalCardBacking = ini_read_real("General","Normal Card Back",0);
global.mythCardBacking = ini_read_real("General","Myth Card Back",0);
global.MapBacking = ini_read_real("General","Map Background",0);

global.CharacterBGing = ini_read_real("General","Character Background",0);
global.DiaryBGing = ini_read_real("General","Diary Background",0);
global.CardsBGing = ini_read_real("General","Cards Background",0);
global.MenuBGing = ini_read_real("General","Menu Background",0);
global.NewGBGing = ini_read_real("General","New Game Background",0);
global.PlayerMenuBGing = ini_read_real("General","Player Menu Background",0); 
global.EventCardBGing = ini_read_real("General","Event Cards Background",0);
global.ActionCardBGing = ini_read_real("General","Action Cards Background",0);
global.ConsCardBGing = ini_read_real("General","Cons Cards Background",0);
global.InfoCardBGing = ini_read_real("General","Info Cards Background",0);
global.CharCardBGing = ini_read_real("General","Char Cards Background",0);
ini_close();
ini_open(global.locationINI);
if(!ini_section_exists("LocationT"))
{
        ini_write_string("LocationT","Real Location Name","Tutorial Location"); //writes the location name on exit
    ini_write_string("LocationT","Description",""); //writes the description on exit.
    ini_write_real("LocationT","NumRef", -1);//saves the number of events
    ini_write_real("LocationT","X", 500);//saves the number of events
    ini_write_real("LocationT","Y", 250);//saves the number of events

    ini_write_real("LocationT","Number of Events", 1);//saves the number of events

    ini_write_real("LocationT","Event1Week",0);//write the week 
    ini_write_real("LocationT","Event1Mythical",0);//write the mythical status of the event
    ini_write_real("LocationT","Event1Type",-1);//write the mythical status of the event

    ini_write_real("LocationT","Mythical", 0);//writes the mythical status of the location
    ini_write_real("LocationT","SpriteRef", -1);
}
ini_close();
ini_open(global.cardEventINI);
if(!ini_section_exists("EventT"))
{
        ini_write_string("EventT","Event Name","Tutorial Event"); //writes the location name on exit
    ini_write_real("EventT","Int",0)
    ini_write_real("EventT","Char", 0);//saves the number of events
    ini_write_real("EventT","Ref", -1);//saves the number of events

    ini_write_real("EventT","Well",0);//write the week 
    ini_write_real("EventT","Mythical",0);//write the mythical status of the event
    ini_write_real("EventT","Sprite",-1);//write the mythical status of the event
    ini_write_real("EventT", "Action1",-1);
    ini_write_real("EventT","Action Cards", 1);//writes the mythical status of the location
    ini_write_real("EventT","Info Cards", -1);
    ini_write_real("EventT","Char Cards", -1);
}
ini_close();
ini_open(global.cardActionINI);
if(!ini_section_exists("ActionT"))
{    
ini_write_real("ActionT","Ref", -1);//saves the number of events
        ini_write_string("ActionT","Card Name","Tutorial Action"); //writes the location name on exit
    ini_write_real("ActionT","Mythical",0);//write the mythical status of the event
    ini_write_real("ActionT","Sprite",-1);//write the mythical status of the event
    ini_write_real("ActionT","Info Cards", -1);
    ini_write_real("ActionT","Cons Cards", -1);
}
ini_close();
ini_open(global.cardConsINI);
if(!ini_section_exists("consT"))
{    
ini_write_real("consT","Ref", -1);//saves the number of events
        ini_write_string("consT","Card Name","Tutorial Consequence"); //writes the location name on exit
    ini_write_real("consT","Int",0);//write the mythical status of the event
    ini_write_real("consT","Char",0);//write the mythical status of the event
    ini_write_real("consT","Well",0);//write the mythical status of the event
    ini_write_real("consT","Sprite",-1);//write the mythical status of the event
    ini_write_real("consT","Info Cards", -1);
}
ini_close();
ini_open(global.cardCharINI);
if(!ini_section_exists("CharT"))
{    
ini_write_real("CharT","Ref", -1);//saves the number of events
        ini_write_string("CharT","Card Name","Tutorial Action"); //writes the location name on exit
    ini_write_string("CharT","Card Text","");//write the mythical status of the event
    ini_write_real("CharT","Sprite",-1);//write the mythical status of the event
    ini_write_real("CharT","Info Cards", -1);
}
ini_close();
ini_open(global.cardInfoINI);
if(!ini_section_exists("InfoT"))
{    
    ini_write_real("InfoT","Ref", -1);//saves the number of events
    ini_write_string("InfoT","Card Name","Tutorial Info"); //writes the location name on exit
    ini_write_string("InfoT","Card Text","");//write the mythical status of the event
    ini_write_string("InfoT","Link","http://www.google.com");//write the mythical status of the event
}
ini_close();
if(global.PlayerMenuBGing != 0)
{

    global.PlayerMenuBG = background_add("editor_files/BG/MenuBackground.png",0,0);
    room_set_background(RoomPlayerMenu, 0, 1, 0, global.PlayerMenuBG, 0, 0, 0, 0, 0, 0, 1);
}
if(global.MenuBGing != 0)
{

    global.MenuBG = background_add("editor_files/BG/SplashBackground.png",0,0);
    global.MenuClickBG = background_add("editor_files/BG/SplashClickBackground.png",0,0);
    room_set_background(RoomMenu, 0, 1, 0, global.MenuClickBG, 0, 0, 0, 0, 0, 0, 1);
}
if(global.NewGBGing != 0)
{

    global.NewGBG = background_add("editor_files/BG/NewGameBackground.png",0,0);
    room_set_background(RoomNewGame, 0, 1, 0, global.NewGBG, 0, 0, 0, 0, 0, 0, 1);
}
if(global.CharacterBGing != 0)
{

   global.CharacterBG = background_add("editor_files/BG/CharacterBackground.png",0,0);
    room_set_background(RoomCharacter, 0, 1, 0, global.CharacterBG, 0, 0, 0, 0, 0, 0, 1);
}
if(global.DiaryBGing != 0)
{
      global.DiaryBG = background_add("editor_files/BG/DiaryBackground.png",0,0);
    room_set_background(RoomDiary, 0, 1, 0, global.DiaryBG, 0, 0, 0, 0, 0, 0, 1);
}
if(global.CardsBGing != 0)
{
    global.CardsBG = background_add("editor_files/BG/CardsBackground.png",0,0);
    room_set_background(RoomCards, 0, 1, 0, global.CardsBG, 0, 0, 0, 0, 0, 0, 1);
}
if(global.EventCardBGing != 0)
{
   global.EventCardBG = background_add("editor_files/BG/EventCardBackground.png",0,0);
    room_set_background(RoomCardEdit, 0, 1, 0, global.EventCardBG, 0, 0, 0, 0, 0, 0, 1);
    room_set_background(RoomCardDeck, 0, 1, 0, global.EventCardBG, 0, 0, 0, 0, 0, 0, 1);
    room_set_background(RoomCards, 1, 1, 0, global.EventCardBG, 0, 0, 0, 0, 0, 0, 1);
}
if(global.ActionCardBGing != 0)
{
    global.ActionCardBG = background_add("editor_files/BG/ActionCardBackground.png",0,0);
    room_set_background(RoomCardEdit, 1, 1, 0, global.ActionCardBG, 0, 0, 0, 0, 0, 0, 1);
    room_set_background(RoomCardDeck, 1, 1, 0, global.ActionCardBG, 0, 0, 0, 0, 0, 0, 1);
    room_set_background(RoomCards, 2, 1, 0, global.ActionCardBG, 0, 0, 0, 0, 0, 0, 1);
}
if(global.ConsCardBGing != 0)
{
    global.ConsCardBG = background_add("editor_files/BG/ConsCardBackground.png",0,0);
    room_set_background(RoomCardEdit, 2, 1, 0, global.ConsCardBG, 0, 0, 0, 0, 0, 0, 1);
    room_set_background(RoomCardDeck, 2, 1, 0, global.ConsCardBG, 0, 0, 0, 0, 0, 0, 1);
    room_set_background(RoomCards, 3, 1, 0, global.ConsCardBG, 0, 0, 0, 0, 0, 0, 1);
}
if(global.InfoCardBGing != 0)
{
    global.InfoCardBG = background_add("editor_files/BG/InfoCardBackground.png",0,0);
    room_set_background(RoomCardEdit, 3, 1, 0, global.InfoCardBG, 0, 0, 0, 0, 0, 0, 1);
    room_set_background(RoomCardDeck, 3, 1, 0, global.InfoCardBG, 0, 0, 0, 0, 0, 0, 1);
    room_set_background(RoomCards, 4, 1, 0, global.InfoCardBG, 0, 0, 0, 0, 0, 0, 1);
}
if(global.CharCardBGing != 0)
{
    global.CharCardBG = background_add("editor_files/BG/CharCardBackground.png",0,0);
    room_set_background(RoomCardEdit, 4, 1, 0, global.CharCardBG, 0, 0, 0, 0, 0, 0, 1);
    room_set_background(RoomCardDeck, 4, 1, 0, global.CharCardBG, 0, 0, 0, 0, 0, 0, 1);
    room_set_background(RoomCards, 5, 1, 0, global.CharCardBG, 0, 0, 0, 0, 0, 0, 1);
}
if(global.MapBacking != 0)
{
    global.MapBack = background_add("editor_files/BG/Map.png",0,0);
    room_set_background(RoomMap, 0, 1, 0, global.MapBack , 0, 0, 0, 0, 0, 0, 1);
}
if(global.normalCardBacking != 0)
{
    global.normalCardBack = sprite_add("editor_files/sprites/NormalCardBack.png",1,false,true,0,0)
    sprite_set_offset(global.normalCardBack,sprite_get_width(global.normalCardBack)/2,sprite_get_height(global.normalCardBack)/2);
    global.normalInfoCardBack = sprite_add("editor_files/sprites/NormalInfoCardBack.png",1,false,true,0,0)
    sprite_set_offset(global.normalInfoCardBack,sprite_get_width(global.normalInfoCardBack)/2,sprite_get_height(global.normalInfoCardBack)/2);
}
if(global.mythCardBacking != 0)
{
    global.mythCardBack = sprite_add("editor_files/sprites/MythCardBack.png",1,false,true,0,0)
    sprite_set_offset(global.mythCardBack,sprite_get_width(global.mythCardBack)/2,sprite_get_height(global.mythCardBack)/2);
    global.mythInfoCardBack = sprite_add("editor_files/sprites/MythInfoCardBack.png",1,false,true,0,0)
    sprite_set_offset(global.mythInfoCardBack,sprite_get_width(global.mythInfoCardBack)/2,sprite_get_height(global.mythInfoCardBack)/2);
}
for(i = 0; i &lt; global.totalNormBuildingSprites; i++)
{
    spriteName = "BuildingSpriteN"+string(i);//set the sprite name to be Usersprite + i
    global.normBuildingArray[i] = sprite_add("editor_files/sprites/"+spriteName+".png",1,false,false,0,0);//creates the sprite using image above
    sprite_set_offset(global.normBuildingArray[i],sprite_get_width(global.normBuildingArray[i])/2,sprite_get_height(global.normBuildingArray[i])/2);

}
for(i = 0; i &lt; global.totalLocationBackgrounds;i++)
{
    spriteName = "LocBack"+string(i);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
    global.locationBGArray[i] = background_add("editor_files/BG/"+spriteName+".png",0,0);
    
}
for(i = 0; i &lt; global.totalMythBuildingSprites; i++)
{
    spriteName = "BuildingSpriteM"+string(i);//set the sprite name to be Usersprite + i
    global.mythBuildingArray[i] = sprite_add("editor_files/sprites/"+spriteName+".png",1,false,false,0,0);//creates the sprite using image above
    sprite_set_offset(global.mythBuildingArray[i],sprite_get_width(global.mythBuildingArray[i])/2,sprite_get_height(global.mythBuildingArray[i])/2);

}
for(i = 0; i &lt; global.totalBothBuildingSprites; i++)
{
    spriteName = "BuildingSpriteB"+string(i);//set the sprite name to be Usersprite + i
    global.bothBuildingArray[i] = sprite_add("editor_files/sprites/"+spriteName+".png",1,false,false,0,0);//creates the sprite using image above
    sprite_set_offset(global.bothBuildingArray[i],sprite_get_width(global.bothBuildingArray[i])/2,sprite_get_height(global.bothBuildingArray[i])/2);

}
for(i = 0; i &lt; global.totalEventCardSprites; i++)
{
    spriteName = "EventCardSprite"+string(i);//set the sprite name to be Usersprite + i
    global.eventCardSpriteArray[i] = sprite_add("editor_files/sprites/"+spriteName+".png",1,false,false,0,0);//creates the sprite using image above
    sprite_set_offset(global.eventCardSpriteArray[i],sprite_get_width(global.eventCardSpriteArray[i])/2,sprite_get_height(global.eventCardSpriteArray[i])/2);
}

for(i = 0; i &lt; global.totalActionCardSprites; i++)
{
    spriteName = "ActionCardSprite"+string(i);//set the sprite name to be Usersprite + i
    global.actionCardSpriteArray[i] = sprite_add("editor_files/sprites/"+spriteName+".png",1,false,false,0,0);//creates the sprite using image above
    sprite_set_offset(global.actionCardSpriteArray[i],sprite_get_width(global.actionCardSpriteArray[i])/2,sprite_get_height(global.actionCardSpriteArray[i])/2);
}
for(i = 0; i &lt; global.totalConsCardSprites; i++)
{
    spriteName = "ConsCardSprite"+string(i);//set the sprite name to be Usersprite + i
    global.consCardSpriteArray[i] = sprite_add("editor_files/sprites/"+spriteName+".png",1,false,false,0,0);//creates the sprite using image above
    sprite_set_offset(global.consCardSpriteArray[i],sprite_get_width(global.consCardSpriteArray[i])/2,sprite_get_height(global.consCardSpriteArray[i])/2);
}
for(i = 0; i &lt; global.totalInfoCardSprites; i++)
{
    spriteName = "InfoCardSprite"+string(i);//set the sprite name to be Usersprite + i
    global.infoCardSpriteArray[i] = sprite_add("editor_files/sprites/"+spriteName+".png",1,false,false,0,0);//creates the sprite using image above
    sprite_set_offset(global.infoCardSpriteArray[i],sprite_get_width(global.infoCardSpriteArray[i])/2,sprite_get_height(global.infoCardSpriteArray[i])/2);
}
for(i = 0; i &lt; global.totalCharCardSprites; i++)
{
    spriteName = "CharCardSprite"+string(i);//set the sprite name to be Usersprite + i
    global.charCardSpriteArray[i] = sprite_add("editor_files/sprites/"+spriteName+".png",1,false,false,0,0);//creates the sprite using image above
    sprite_set_offset(global.charCardSpriteArray[i],sprite_get_width(global.charCardSpriteArray[i])/2,sprite_get_height(global.charCardSpriteArray[i])/2);
}
global.lastRoom = room;
room = RoomResChange;//moves to the menu

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

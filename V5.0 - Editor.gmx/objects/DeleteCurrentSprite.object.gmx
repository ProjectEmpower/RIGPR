<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ButtonSpriteDeleteLocationSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if(room == RoomSprites)
{
    x = global.roomWidth - 375;
    y = global.roomHeight-70;
}
else
{
    x = global.roomWidth - 125;
    y = global.roomHeight/2 -50;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tempRoom = room;
if(global.totalBothBuildingSprites &gt; 0 and global.buildingSprite != -1)//if there are events
{
        
    for(i = global.buildingSprite; i &lt; global.totalBothBuildingSprites; i++)
    {
        file_delete("editor_files/sprites/BuildingSpriteN"+string(i)+".png");
        sprite_delete("BuildingSpriteN"+string(i)+".png");
        file_delete("editor_files/sprites/BuildingSpriteM"+string(i)+".png");
        sprite_delete("BuildingSpriteM"+string(i)+".png");
        file_delete("editor_files/sprites/BuildingSpriteB"+string(i)+".png");
        sprite_delete("BuildingSpriteB"+string(i)+".png");
        if(!sprite_exists("BuildingSpriteN"+string(i)+".png") and file_exists("editor_files/sprites/BuildingSpriteN"+string(i+1)+".png"))
        {
    
            file_rename("editor_files/sprites/BuildingSpriteN"+string(i+1)+".png","editor_files/sprites/BuildingSpriteN"+string(i)+".png");
            global.normBuildingArray[i] = sprite_add("editor_files/sprites/BuildingSpriteN"+string(i)+".png",1,false,true,0,0);//creates the sprite using image above
            sprite_set_offset(global.normBuildingArray[i],sprite_get_width(global.normBuildingArray[i])/2,sprite_get_height(global.normBuildingArray[i])/2)
            sprite_delete("BuildingSpriteN"+string(i+1)+".png");
                
            file_rename("editor_files/sprites/BuildingSpriteM"+string(i+1)+".png","editor_files/sprites/BuildingSpriteM"+string(i)+".png");
            global.mythBuildingArray[i] = sprite_add("editor_files/sprites/BuildingSpriteM"+string(i)+".png",1,false,true,0,0);//creates the sprite using image above
            sprite_set_offset(global.mythBuildingArray[i],sprite_get_width(global.mythBuildingArray[i])/2,sprite_get_height(global.mythBuildingArray[i])/2)
            sprite_delete("BuildingSpriteM"+string(i+1)+".png");
                
            file_rename("editor_files/sprites/BuildingSpriteB"+string(i+1)+".png","editor_files/sprites/BuildingSpriteB"+string(i)+".png");
            global.bothBuildingArray[i] = sprite_add("editor_files/sprites/BuildingSpriteB"+string(i)+".png",1,false,true,0,0);//creates the sprite using image above
            sprite_set_offset(global.bothBuildingArray[i],sprite_get_width(global.bothBuildingArray[i])/2,sprite_get_height(global.bothBuildingArray[i])/2)
            sprite_delete("BuildingSpriteB"+string(i+1)+".png");
            show_debug_message("yes2");
        }
    }
    for(i = 0; i &lt; global.TotalInstanceNum; i++)
    {
        ini_open(global.locationINI);
        LocationName = "Location"+string(i);
        tempRef = ini_read_real(LocationName,"SpriteRef",-1);
        if(tempRef == global.buildingSprite)
        {
            tempRef = -1;
            ini_write_real(LocationName,"SpriteRef", tempRef);
        }
        if(tempRef &gt; global.buildingSprite)
        {
            tempRef -= 1;
            ini_write_real(LocationName,"SpriteRef", tempRef);
        }
        ini_close();
        
    }
    global.buildingSprite = -1;
    global.totalNormBuildingSprites -= 1;
    global.totalMythBuildingSprites -= 1;
    global.totalBothBuildingSprites -= 1;

    ini_open(global.editorINI);
    ini_write_real("General", "Norm Building Sprites", global.totalNormBuildingSprites);
    ini_write_real("General", "Myth Building Sprites", global.totalMythBuildingSprites);
    ini_write_real("General", "Both Building Sprites", global.totalBothBuildingSprites);
    ini_close();

}
room = tempRoom;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>TextInputBoxSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This code creates the text boxes default display info
realNameTextBoxRef = global.textBoxInstanceRef;//takes the textBoxInstanceRef (set via instance_count) and creates a variable for use on this page
descTextBoxRef = realNameTextBoxRef+1; //creates the references to the textboxes instance, accessed via instance_id[ref]
thirdTextBoxRef = realNameTextBoxRef+2;
forthTextBoxRef = realNameTextBoxRef+3;
fifthTextBoxRef = realNameTextBoxRef+4;
sixthTextBoxRef = realNameTextBoxRef+5;
seventhTextBoxRef = realNameTextBoxRef+6;
eighthTextBoxRef = realNameTextBoxRef+7;
ninthTextBoxRef = realNameTextBoxRef+8;
tenthTextBoxRef = realNameTextBoxRef+9;
msg = "";
InfoDesc = "";
actDesc = "";
charsText = "";
timer = 0;//sets timer to 0
delay = 4;//sets the delay on text entry
textShortLength = 30;//sets the max text for small text boxes
textLongLength = 200;//sets the max text for large text boxes
image_xscale = 1.5; //sets the scale to be 1.5 (default is 1)
if(room == RoomLocationAdd)//checks room
{    
    if(instance_id[realNameTextBoxRef] == id)//checks instnace_id[ref] vs the id (current box clicked on)
    {
        txt_input = global.realLocationName;//sets default text
        txt_display = "Location Name: ";     //sets display text
    }
    if(instance_id[descTextBoxRef] == id)
    {
        sprite_index = TextInputBoxSprite_Large;//changes the sprite to fit the spacing/text length
        txt_input = global.description;//sets default text
        txt_display = "Description: "
    }
    if(instance_id[thirdTextBoxRef] == id) 
    {
        sprite_index = No_sprite;
        txt_input = "Error - Map Visibility not updated";//if this is not update elsewhere, this will set
        txt_display = "Event Type: "
    }
    if(instance_id[forthTextBoxRef] == id)
    {
        sprite_index = No_sprite;
        txt_input = global.locationEventNumber;//sets default text
        txt_display = "Number of events: "
    }
    if(instance_id[fifthTextBoxRef] == id)
    {
        sprite_index = No_sprite;
        txt_input = "Error - Event type not updated";//sets default text
        txt_display = "Event: "
    }
    if(instance_id[sixthTextBoxRef] == id)
    {
        if(global.TutorialSetup == false)
            sprite_index = TextInputBoxSprite_Small;
        else
            sprite_index = No_sprite;
        txt_input = string(global.eventWeek);//sets default text
        txt_display = "Acvailable week: "
    }
    if(instance_id[seventhTextBoxRef] == id)
    {
        sprite_index = No_sprite;
        txt_input = global.eventMyth;//sets default text
        txt_display = "Event Type: "
    }
    if(instance_id[seventhTextBoxRef+1] == id)
    {
        sprite_index = No_sprite;
        txt_input = "Error - Event 1 type not updated"; //sets default text

            txt_display = "Event " + global.tempEventID[0] + ": "
            if(global.eventType2[0] != 0)//if there is an event type (other than 0, which is blank)
                {
                    s = string(global.eventType2[0])//set string based on the type
                    tempEvent = "Event"+s;//set event name to load based on the string above
                    ini_open(global.cardEventINI);//open ini
                    if(ini_section_exists(tempEvent))
                    {
                        txt_input = ini_read_string(tempEvent, "Event Name", "");//loads the events name using the type variable
                    }
                    else
                    {
                        txt_input = "Editor Only: Event deleted, please replace.";
                    }
                    ini_close();//closes the ini
                }
                else
                {
                    txt_input = "No event selected";//if the event is blank, display text
                }
    

    }
    if(instance_id[seventhTextBoxRef+2] == id)
    {
        sprite_index = No_sprite;
        txt_input = "Error - Event 2 type not updated";//sets default text
        txt_display = "Event " + global.tempEventID[1] + ": "
        
                    if(global.eventType2[1] != 0)//if there is an event type (other than 0, which is blank)
            {
                s = string(global.eventType2[1])//set string based on the type
                tempEvent = "Event"+s;//set event name to load based on the string above
                ini_open(global.cardEventINI);//open ini
                if(ini_section_exists(tempEvent))
                {
                    txt_input = ini_read_string(tempEvent, "Event Name", "");//loads the events name using the type variable
                }
                else
                {
                    txt_input = "Editor Only: Event deleted, please replace.";
                }
                ini_close();//closes the ini
            }
            else
            {
                txt_input = "No event selected";//if the event is blank, display text
            }
    }
    if(instance_id[seventhTextBoxRef+3] == id)
    {
        sprite_index = No_sprite//TextInputBoxSprite_Small;
        txt_input = "Error - Event 3 type not updated";//sets default text
        txt_display = "Event " + global.tempEventID[2] + ": "
                    
            if(global.eventType2[2] != 0)//if there is an event type (other than 0, which is blank)
            {
                s = string(global.eventType2[2])//set string based on the type
                tempEvent = "Event"+s;//set event name to load based on the string above
                ini_open(global.cardEventINI);//open ini
                if(ini_section_exists(tempEvent))
                {
                    txt_input = ini_read_string(tempEvent, "Event Name", "");//loads the events name using the type variable
                }
                else
                {
                    txt_input = "Editor Only: Event deleted, please replace.";
                }
                ini_close();//closes the ini
            }
            else
            {
                txt_input = "No event selected";//if the event is blank, display text
            }
    }
}
if(room == RoomTutorial)
{
image_xscale = 2
    if(instance_id[global.box0] == id)
    {
            txt_input = "LOCKED";
        txt_display = "Location Tutorial: ";     //sets display text
    }
    if(instance_id[global.box1] == id)
    {
            txt_input = "LOCKED";
        txt_display = "Event Card Tutorial: ";     //sets display text
    }
    if(instance_id[global.box2] == id)
    {
            txt_input = "LOCKED";
        txt_display = "Action Card Tutorial: ";     //sets display text
    }   
    if(instance_id[global.box3] == id)
    {
            txt_input = "LOCKED";
        txt_display = "Consequence Card Tutorial: ";     //sets display text
    }   
    if(instance_id[global.box4] == id)
    {
            txt_input = "LOCKED";
        txt_display = "Information Card Tutorial: ";     //sets display text
    }  
    if(instance_id[global.box5] == id)
    {
        switch(global.CharTutorial)
        {
            case 0:  txt_input = "Not Included";//sets default text
            break;
            case 1: txt_input = "Included";
            break;
        }
        txt_display = "Character Card Tutorial: ";     //sets display text
    }  
    if(instance_id[global.box6] == id)
    {
        switch(global.MythTutorial)
        {
            case 0:  txt_input = "Not Included";//sets default text
            break;
            case 1: txt_input = "Included";
            break;
        }
        txt_display = "Mythical Tutorial: ";     //sets display text
    } 
    if(instance_id[global.box7] == id)
    {
            txt_input = "LOCKED";
        txt_display = "Player Stats Tutorial: ";     //sets display text
    } 
    if(instance_id[global.box8] == id)
    {
            txt_input = "LOCKED";
        txt_display = "Journal Tutorial: ";     //sets display text
    } 
    if(instance_id[global.box9] == id)
    {
            txt_input = "LOCKED";
        txt_display = "Cards Page Tutorial: ";     //sets display text
    } 
    
}
if(room == RoomCardEdit)
{
    if(global.RoomState == 0)//event card
    {
        if(instance_id[global.box0] == id)
        {
            txt_input = global.realEventName;//sets default text
            txt_display = "Event Name: ";     //sets display text
    }
        if(instance_id[global.box1] == id)
        {
            sprite_index = TextInputBoxSprite_Small;
            txt_input = string(global.reqEventInt);//sets default text
            txt_display = "Required Int: "
        }
        if(instance_id[global.box2] == id)
        {
            sprite_index = TextInputBoxSprite_Small;
            txt_input = string(global.reqEventChar);
            txt_display = "Required Char: "
        }
        if(instance_id[global.box3] == id)
        {
            sprite_index = TextInputBoxSprite_Small;
            txt_input = string(global.reqEventWell);
            txt_display = "Required Well: "
        }
        if(instance_id[global.box4] == id)
        {
            sprite_index = No_sprite;
            txt_input = "Error - Mythical status not set";
            txt_display = "Event Type: "
        }

        if(global.TutorialSetup == false)
        {
            for(i = 0; i &lt;= global.eventActionCardsNum; i++)
            {
                if(instance_id[global.box5 + i] == id) 
                {
                
                    txt_input = global.card1[i];
                    txt_display = "Tutorial Action Card: ";
                }
            }
        }
        else
        {
            if(instance_id[global.box5] == id) 
            {
            
                txt_input = global.card1[0];
                txt_display = "Tutorial Action Card: ";
            }
        }
        if(global.TutorialSetup == false)
            global.eventActionCardsNum = 0;
        if(instance_id[global.box6 + global.eventActionCardsNum] == id) 
        {
            txt_input = global.InfoCard;
            if(global.TutorialSetup == false)
                txt_display = "Information Card: "
            else
               txt_display = "Tutorial Information Card: "; 
        }
        if(instance_id[global.box7 + global.eventActionCardsNum] == id) 
        {
            txt_input = global.CharCard;
            if(global.TutorialSetup == false)
                txt_display = "Character Card: "
            else
               txt_display = "Tutorial Character Card: "; 
        }
    }
    if(global.RoomState == 1)//action
    {
        if(instance_id[realNameTextBoxRef] == id)
        {
            txt_input = global.realCardName;//sets default text
            txt_display = "Card Name: ";     //sets display text
        }
        if(instance_id[descTextBoxRef] == id)
        {
            sprite_index = No_sprite;
            switch(global.cardMythical)
            {
                case 0: txt_input = "Normal Card";
                break;
                case 1: txt_input = "Mythical Card";
                break;
                default: txt_input = "Error: Card mythical status not loaded"; 
            }
            txt_display = "Event Type: "
        }
        if(instance_id[thirdTextBoxRef] == id) //Currently unused, there if we need more text boses, must change textFields in TextInputBoxAddObject - Create
        {
            sprite_index = TextInputBoxSprite_Large;
            txt_input = global.cardText;
            txt_display = "Text: "
        }
        if(instance_id[forthTextBoxRef] == id) //Currently unused, there if we need more text boses, must change textFields in TextInputBoxAddObject - Create
        {
            txt_input = global.ConsCard;
            txt_display = "Consequence Card: "
        }  
        if(instance_id[fifthTextBoxRef] == id) //Currently unused, there if we need more text boses, must change textFields in TextInputBoxAddObject - Create
        {
            txt_input = global.cardInfoSlot;
            txt_display = "Information Card: "
        }   
    }
    if(global.RoomState == 2)
    {
        if(instance_id[realNameTextBoxRef] == id)
        {
            txt_input = global.realConsName;//sets default text
            txt_display = "Card Name: ";     //sets display text
        }
        if(instance_id[descTextBoxRef] == id)
        {
            sprite_index = TextInputBoxSprite_Small;
            txt_input = string(global.consInt);
            txt_display = "Int: "
            global.tempVal = 2;
            inst = instance_create(global.tempInputBoxX -55,global.tempInputBoxY,ConsType);  //creats an instance at the location using the object 
        }
        if(instance_id[forthTextBoxRef] == id) //Currently unused, there if we need more text boses, must change textFields in TextInputBoxAddObject - Create
        {
            sprite_index = TextInputBoxSprite_Small;
            txt_input = string(global.consChar);
            txt_display = "Char: "
            global.tempVal = 3;
            inst = instance_create(global.tempInputBoxX -55,global.tempInputBoxY,ConsType);  //creats an instance at the location using the object 
 
        }
        if(instance_id[sixthTextBoxRef] == id) //Currently unused, there if we need more text boses, must change textFields in TextInputBoxAddObject - Create
        {
            sprite_index = TextInputBoxSprite_Small;
            txt_input = string(global.consWell);
            txt_display = "Well: "
            global.tempVal = 4;
            inst = instance_create(global.tempInputBoxX -55 ,global.tempInputBoxY,ConsType);  //creats an instance at the location using the object 
 
        }
        if(instance_id[eighthTextBoxRef] == id) //Currently unused, there if we need more text boses, must change textFields in TextInputBoxAddObject - Create
        {
            txt_input = global.cardInfoSlot;
            txt_display = "Info Card: "
        }   
    }
    if(global.RoomState == 3)
    {
        if(instance_id[realNameTextBoxRef] == id)
        {
            txt_input = global.realInfoName;//sets default text
            txt_display = "Card Name: ";     //sets display text
        }
        if(instance_id[descTextBoxRef] == id)
        {
            sprite_index = TextInputBoxSprite_Large;
            txt_input = global.infoCardText;
            txt_display = "Card Text: "
        }
        if(instance_id[thirdTextBoxRef] == id)
        {
            sprite_index = TextInputBoxSprite_Large;
            txt_input = global.infoLink;
            txt_display = "Web Address: "
        }
    }
    if(global.RoomState == 4)
    {
        if(instance_id[realNameTextBoxRef] == id)
        {
            txt_input = global.charCardName;//sets default text
            txt_display = "Card Name: ";     //sets display text
        }
        if(instance_id[descTextBoxRef] == id)
        {
            sprite_index = TextInputBoxSprite_Large;
            txt_input = global.charCardText;
            txt_display = "Card Text: "
        }
        if(instance_id[thirdTextBoxRef] == id)
        {
            txt_input = global.cardInfoSlot;
            txt_display = "Info Card: "
        }
    }
}
if(room == RoomCardDeck)
{
    if(global.RoomState == 0)//Event
    {
        image_xscale = 2;//changes the scale
        for(i = global.textBoxInstanceRef; i &lt; (global.textBoxInstanceRef+global.listLength); i++)//goes through the list of events 
        {    
            if(instance_id[i] == id)//sets each event (in the list), with default variables
            {
                ref_display = global.eventRef;
                name_display = global.realEventName;
                int_display = global.reqEventInt;
                char_display = global.reqEventChar;
                well_display = global.reqEventWell;
                
                switch(global.eventMythical)//checks the mythical status, and displays apporpriately
                {
                    case 0: mythical_display = "Normal Map";
                    break;
                    case 1: mythical_display = "Mythical Map";
                    break;
                    default: mythical_display = "Error: Missing info";
                }
            }
        }
    }
    if(global.RoomState == 1)//action
    {
        image_xscale = 2;
        for(i = global.textBoxInstanceRef; i &lt; (global.textBoxInstanceRef+global.listLength); i++)
        {    
            if(instance_id[i] == id)
            {
                ref_display = global.cardRef;
                name_display = global.realCardName;   
                switch(global.cardMythical)
                {
                    case 0: myth_display = "Normal Map";
                    break;
                    case 1: myth_display = "Mythical Map";
                    break;   
                }

            }
        }
    }
    if(global.RoomState == 2)//consequence
    {
        image_xscale = 2;
        for(i = global.textBoxInstanceRef; i &lt; (global.textBoxInstanceRef+global.listLength); i++)
        {    
            if(instance_id[i] == id)
            {
                ref_display = global.consCardRef;
                name_display = global.realConsName;
                int_display = global.consInt; 
                char_display = global.consChar;
                well_display = global.consWell;
                text_display = global.consCardText;//not shown here     
            }
        }
    }
    if(global.RoomState == 3)//Info
    {
        image_xscale = 2;
        for(i = global.textBoxInstanceRef; i &lt; (global.textBoxInstanceRef+global.listLength); i++)
        {    
            if(instance_id[i] == id)
            {   
                ref_display = global.infoCardRef;
                name_display = global.realInfoName;
                text_display = global.infoCardText;
                link_display = global.infoLink;       
            }
        }
    }
      if(global.RoomState == 4)//Char
    {
        image_xscale = 2;
        for(i = global.textBoxInstanceRef; i &lt; (global.textBoxInstanceRef+global.listLength); i++)
        {    
            if(instance_id[i] == id)
            {   
                ref_display = global.charCardRef;
                name_display = global.charCardName;
                text_display = global.charCardText;    
            }
        }
    }
}
if(room == RoomDeckList)
{
    image_xscale = 2;
    if(instance_id[realNameTextBoxRef] == id)
    {
        txt_display = "Event Cards Deck";     //sets display text
        num_display = global.totalEventCards;
    }
    if(instance_id[descTextBoxRef] == id)
    {
        txt_display = "Action Cards Deck";     //sets display text
        num_display = global.totalActionCards;
    }
    if(instance_id[thirdTextBoxRef] == id)
    {
        txt_display = "Consequence Cards Deck";     //sets display text
        num_display = global.totalConsCards;
    }
    if(instance_id[forthTextBoxRef] == id)
    {
        txt_display = "Information Cards Deck";     //sets display text
        num_display = global.totalInfoCards;
    }
    if(instance_id[fifthTextBoxRef] == id)
    {
        txt_display = "Character Cards Deck";     //sets display text
        num_display = global.totalCharCards;
    }
}

if(room == RoomMap)
{
    image_xscale = global.textBoxXScale;
    if(instance_id[realNameTextBoxRef] == id)
    {

        txt_display = "EDITOR MODE";     //sets display text
        num_display = "";
    }   
    if(instance_id[realNameTextBoxRef+1] == id)
    {
        sprite_index = No_sprite;
        txt_display = "";     //sets display text
        num_display = "";
    }     
    if(instance_id[realNameTextBoxRef+2] == id)
    {
        txt_display = "Event";     //sets display text
        num_display = string(global.totalEventCards) + " - ";
    }
    if(instance_id[realNameTextBoxRef+3]  == id)
    {
        txt_display = "Action";     //sets display text
        num_display = string(global.totalActionCards) + " - ";
    }
    if(instance_id[realNameTextBoxRef+4]  == id)
    {
        txt_display = "Consequence";     //sets display text
        num_display = string(global.totalConsCards) + " - ";
    }
    if(instance_id[realNameTextBoxRef+5]  == id)
    {
        txt_display = "Information";     //sets display text
        num_display = string(global.totalInfoCards) + " - ";
    }
    if(instance_id[realNameTextBoxRef+6]  == id)
    {
        txt_display = "Character";     //sets display text
        num_display = string(global.totalCharCards) + " - ";
    }
    if(instance_id[realNameTextBoxRef+7]  == id)
    {
        sprite_index = No_sprite;   
        txt_display = "";     //sets display text
        num_display = "";
    }
    if(instance_id[realNameTextBoxRef+8]  == id)
    {
        txt_display = "Image Managment";     //sets display text
        num_display = "";
    }
    if(instance_id[realNameTextBoxRef+9]  == id)
    {
        txt_display = "Tutorial Setup";     //sets display text
        num_display = "";
    }
    if(instance_id[realNameTextBoxRef+10]  == id)
    {
        txt_display = "Options";     //sets display text
        num_display = "";
    }
}
myY = global.tempTextBoxY;//sets current Position (increases depending on instance)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.focus == id)//checks focus against the instance ID of the text boxes, this allows the select box to be the only one effected by text entry
{
    //this code is used for switching the text boxes sprite between normal and selected.
    if(sprite_index == TextInputBoxSprite)//if normal sprite
    {
        sprite_index = SelectedTextBoxSprite;//change to selected normal sprite
    }
    if(sprite_index == TextInputBoxSprite_Large) //if large sprite
    {
        sprite_index = SelectedTextBoxSprite_Large;//change to selected large sprite
    }
    if(sprite_index == TextInputBoxSprite_Small)//etc.
    {
        sprite_index = SelectedTextBoxSprite_Small;
    }
    //this code is used for actually displaying the text (via script, keyStep) and delaying key entry
    //this is used because otherwise it enters about 10 characters a second.
    if keyboard_check_pressed(vk_anykey)//if any key is pressed
    {
        script_execute(keyStep);//execute the script "keystep" and enter a key
        timer = -6;//set the timer to -6, this is used to create a slight delay between first key entered and the next x (so first key has a logner delay than the rest, try entering a key on a text field if this doesn't make sence)
    }
    if keyboard_check(vk_anykey)//if the key is held down
    {
        if(timer == delay)//if the timer is equal to the current delay
        {
            script_execute(keyStep); //execute the script "keystep" and enter a key
            timer = 0; //set timer to 0
        }
        if(timer &gt; delay)//if the timer goes over the delay time
        {
            timer = delay; //set the timer to the delay time
        }
        else if(timer &lt; delay)//if the timer is under delay time
        {
            timer++;//increase the timer 
        }
    }
    if keyboard_check_released(vk_anykey)//if the key is released
    {
        timer = 0;//set the timer back to 0
    }
}
//this code is used for switching the text boxes sprite between selected and normal, same as above but in reverse, when the box is no longer in focus.
if(global.focus != id)
{    if(sprite_index == SelectedTextBoxSprite)
    {
        sprite_index = TextInputBoxSprite;
    }
    if(sprite_index == SelectedTextBoxSprite_Large)
    {
        sprite_index = TextInputBoxSprite_Large;
    }
    if(sprite_index == SelectedTextBoxSprite_Small)
    {
        sprite_index = TextInputBoxSprite_Small;
    }
}
//individual rooms specific entry requirements, numbers, unenterable feilds (from button clicks), etc.
if(room == RoomLocationAdd)
{

    //This code is used for the mythical status on location add, it goes through the list of events and if any are mythical or normal, it flags this.
    //It then takes that information and displays the correct mythical status for the location, based on all events.
    if(id == global.textboxArray[2])
    {
        if(global.locationEventNumber &gt; 0)
        {
            if(global.TutorialSetup == false)
            {
                tempNormMap = 0;//set normal map to 0 (false)
                tempMythMap = 0;//set mythical map to 0 (false)
                for(i = 1; i &lt;= global.locationEventNumber; i++)//go through the events
                {
                    tempEventID = string(i);//create a string of the event id based on the iteration (i) 
                    tempEvent = "Event"+tempEventID+"Type";//creates the tempEvent variable for use when accessing the events information from the location ini
                    ini_open(global.locationINI);//opens the location ini
                    tempEventRef = ini_read_real(global.tempLocation, tempEvent, 3);//reads the events reference 
                    ini_close();//closes the location ini
                    s = string(tempEventRef)//uses the reference set above and creates a string with it
                    tempEventName = "Event"+s;//uses the string to create the event name "Event"+*string set above"
                    ini_open(global.cardEventINI);//opens the event ini
    
                    tempMyth = ini_read_real(tempEventName, "Mythical", 3);//reads tge mythical status of current event
                    ini_close();//closes the event ini
                    switch(tempMyth)//checks the events mythical statsus, changes the tempNormMap and tempMythMap variables accordingly
                    {
                        case 0: tempNormMap = 1;
                        break;
                        case 1: tempMythMap = 1;
                        break;
                        case 2: tempNormMap = 1;
                                tempMythMap = 1;
                        break;
                        case 3: txt_input = "Editor only: Mythical status not set somewhere";
                        break;
                        default: txt_input = "None - Error: L93";
                        break;
                    }
                    
                }
                //sets locationMyth variable and text input accordingly
                if(tempNormMap == 1 and tempMythMap == 1)
                {
                    global.locationMyth = 2;
                    //global.eventMyth = 2; //unsure if needed.... I don't think so anymore. testing required.
                    txt_input = "Both Maps";
                }
                if(tempNormMap == 0 and tempMythMap == 1)
                {
                    global.locationMyth = 1;
                   // global.eventMyth = 1;
                    txt_input = "Mythical Map";
                }
                if(tempNormMap == 1 and tempMythMap == 0)
                {
                    global.locationMyth = 0
                    //global.eventMyth = 0;
                    txt_input = "Normal Map";
                }
                if(global.locationEventNumber == 0)//sets mythical status if there are no buttons visible.
                {
                    switch(global.locationMyth)
                    {
                        case 0: txt_input = "Normal Map";
                        break;
                        case 1: txt_input = "Mythical Map";
                        break;
                        case 2: txt_input = "Editor only - Event missing";
                        break;
                        default: txt_input = "None - Error: L127";
                    }
                }
            }
            else
            {
                txt_input = "Tutorial";
            }

        }
    }
    if(id == instance_id[forthTextBoxRef])
    {
        txt_input = global.locationEventNumber;
    }
    if(id == instance_id[fifthTextBoxRef])
    {
        if(global.TutorialSetup == false)
        {
            //checks to see the events type, it displays the event name
            if(global.eventType != 0)//if there is an event type (other than 0, which is blank)
            {
                s = string(global.eventType)//set string based on the type
                tempEvent = "Event"+s;//set event name to load based on the string above
                ini_open(global.cardEventINI);//open ini
                if(ini_section_exists(tempEvent))
                {
                    txt_input = ini_read_string(tempEvent, "Event Name", "");//loads the events name using the type variable
                }
                else
                {
                    txt_input = "Editor Only: Event deleted, please replace.";
                }
                ini_close();//closes the ini
            }
            else
            {
                txt_input = "No event selected";//if the event is blank, display text
            }
        }
        else
        {
                tempEvent = "EventT";//set event name to load based on the string above
                ini_open(global.cardEventINI);//open ini
                if(ini_section_exists(tempEvent))
                {
                    txt_input = ini_read_string(tempEvent, "Event Name", "");//loads the events name using the type variable
                }
                else
                {
                    txt_input = "Editor Only: Error.";
                }
                ini_close();//closes the ini
        }

    }
    if(id == instance_id[sixthTextBoxRef])
    {
        //this code stops the user from adding more than 1 events in a week (for this location only)
        week = 0;

        if(global.eventWeek != 0)
        {
            ini_open(global.locationINI);
            for(i = 1; i &lt; global.EventID; i++)
            {   
            
                s = string(i)
                tempEventWeek = "Event"+s+"Week";
                tempWeek = ini_read_real(global.tempLocation,tempEventWeek,0);
                if(tempWeek == global.eventWeek)
                {
                    week += global.eventWeek;
                }
            }
            for(i = global.EventID+1; i &lt;= global.locationEventNumber; i++)
            {   
                s = string(i)
                tempEventWeek = "Event"+s+"Week";
                tempWeek = ini_read_real(global.tempLocation,tempEventWeek,0);
                if(tempWeek == global.eventWeek)
                {
                    week += global.eventWeek;
                }
            }
            ini_close();

            if(global.focus != id)
            {
                if((week/3) == global.eventWeek)
                {
                    global.eventWeek = 0;
                    txt_input = string(global.eventWeek);    
                    show_message("You can only have 3 events on any week, if you wish to see all events on a given week, please select an event with the corresponding week");
                } 
                script_execute(SaveLocation);
            }

        }
    }
    if(id == instance_id[seventhTextBoxRef])
    {
    if(global.TutorialSetup == false)
    {
    //checks the event types mythical status and displays accordingly
        if(global.eventType != 0)
        {
            s = string(global.eventType)
            tempEvent = "Event"+s;
            ini_open(global.cardEventINI);
            if(ini_section_exists(tempEvent))
            {
                global.eventMyth = ini_read_real(tempEvent, "Mythical", 0);
                txt_input = string(global.eventMyth);
                ini_close();
                switch(global.eventMyth)
                {
                    case 0: txt_input = "Normal Map";
                    break;
                    case 1: txt_input = "Mythical Map";
                    break;
                    default: txt_input = "No event selected"; 
                }
            }
            else
            {
                txt_input = "Editor Only: Event deleted, please replace.";
            }
        }
        else
        {
            txt_input = "No event selected";
        }
    }
    else
    {
    txt_input = "Tutorial";
    }
    }
    //checks the event types mythical status and displays accordingly

}

if(room == RoomCardEdit)
{
    if(global.RoomState == 0)
    {
        if(instance_id[global.box2-1] == id)
        {
            txt_input = string(global.reqEventInt);
        }
        if(instance_id[global.box2-1] == id)
        {
            txt_input = string(global.reqEventChar);
        }
        if(instance_id[global.box3-1] == id)
        {
            txt_input = string(global.reqEventWell);
        }
        if(instance_id[global.box4-1] == id)
        {
        //checks the event mythical status and displays accordingly
            switch(global.eventMythical)
            {
                case 0: txt_input = "Normal event";
                break;
                case 1: txt_input = "Mythical event";
                break;
                default: txt_input = "Error - Missing event mythical info";
            }
        }
        if(global.TutorialSetup == false)
        {
            for(i = 0; i &lt;= global.eventActionCardsNum; i++)
            {
                if(instance_id[global.box5-1 + i] == id) 
                {

                    //checks to see if there is a card selected, if so, it displays the cards name
                    if(global.card1[i] == 0)
                    {
                        txt_input = "Click to add card";
                    }
                    else
                    {
                        ini_open(global.cardEventINI);
                        ini_write_real(global.eventName, "Action Cards",global.eventActionCardsNum);
                        ini_close();
                        s = string(global.card1[i]);
                        cardName = "Action"+s;
                        ini_open(global.cardActionINI);
                        if(!ini_section_exists(cardName))
                        {
                    
                            txt_input = "Deleted, please replace"
                        }
                        else
                        {
                            realCardName = ini_read_string(cardName,"Card Name","");
                            txt_input = realCardName;
                        }
                        ini_close();
                    }
                }
            }
        }
        else
        {                
            if(instance_id[global.box5-1] == id) 
            {
                cardName = "ActionT"
                ini_open(global.cardActionINI);
                realCardName = ini_read_string(cardName,"Card Name","");
                txt_input = realCardName;
                ini_close();
            }
        }
    
        if(instance_id[global.box6-1 + global.eventActionCardsNum] == id)
        {
            if(global.TutorialSetup == false)
            {
         //checks to see if there is a card selected, if so, it displays the cards name
                if(global.InfoCard == 0)
                {
                    txt_input = "Click to add card";
                }
                else
                {
                    s = string(global.InfoCard);
                    cardName = "Info"+s;
                    ini_open(global.cardInfoINI);
                    if(!ini_section_exists(cardName))
                    {
    
                        txt_input = "Deleted, please replace"
                    }
                    else
                    {
                        realCardName = ini_read_string(cardName,"Card Name","");
                        txt_input = realCardName;
                    }
                    ini_close();
                }
            }
            else
            {
                    cardName = "InfoT";
                    ini_open(global.cardInfoINI);
                    realCardName = ini_read_string(cardName,"Card Name","");
                    txt_input = realCardName;
                    ini_close();
            }
        }
        if(instance_id[global.box7-1 + global.eventActionCardsNum] == id) 
        {
            if(global.TutorialSetup == false)
            {
             //checks to see if there is a card selected, if so, it displays the cards name
                if(global.CharCard == 0)
                {
                    txt_input = "Click to add card";
                }
                else
                {
                    s = string(global.CharCard);
                    cardName = "Char"+s;
                    ini_open(global.cardCharINI);
                    if(!ini_section_exists(cardName))
                    {
    
                        txt_input = "Deleted, please replace"
                    }
                    else
                    {
                        realCardName = ini_read_string(cardName,"Card Name","");
                        txt_input = realCardName;
                    }
                    ini_close();
                }
            }
            else
            {
                    cardName = "CharT";
                    ini_open(global.cardCharINI);
                    realCardName = ini_read_string(cardName,"Card Name","");
                    txt_input = realCardName; 
                    ini_close();           
            }
        }
    }
    if(global.RoomState == 1)
    {
        if(id == instance_id[descTextBoxRef-1])
        {
            switch(global.cardMythical)
            {
                case 0: txt_input = "Normal Card";
                break;
                case 1: txt_input = "Mythical Card";
                break;
                default: txt_input = "Error: Card mythical status not loaded"; 
            }
        }
        if(id == instance_id[thirdTextBoxRef-1])
        {
            txt_input = global.cardText;
        }
        if(id == instance_id[forthTextBoxRef-1])
        {
            if(global.TutorialSetup == false)
            {
                if(global.ConsCard == 0)
                {
                    txt_input = "Click to add card";
                }
                else
                {
                    s = string(global.ConsCard);
                    cardName = "Cons"+s;
                    ini_open(global.cardConsINI);
                    if(!ini_section_exists(cardName))
                    {
    
                        txt_input = "Deleted, please replace"
                    }
                    else
                    {
                        realCardName = ini_read_string(cardName,"Card Name","");
                        txt_input = realCardName;
                    }
                    ini_close();
                }
            }
           else
            {
                cardName = "ConsT";
                ini_open(global.cardConsINI);
                realCardName = ini_read_string(cardName,"Card Name","");
                txt_input = realCardName;
                ini_close();
            }
        }
        if(id == instance_id[fifthTextBoxRef-1])
        {
            if(global.TutorialSetup == false)
            {
                 if(global.cardInfoSlot == 0)
                {
                    txt_input = "Click to add card";
                }
                else
                {
                    s = string(global.cardInfoSlot);
                    cardName = "Info"+s;
                    ini_open(global.cardInfoINI);
                    if(!ini_section_exists(cardName))
                    {
    
                        txt_input = "Deleted, please replace"
                    }
                    else
                    {
                        realCardName = ini_read_string(cardName,"Card Name","");
                        txt_input = realCardName;
                    }
                    ini_close();
                }
            }
            else
            {
                cardName = "InfoT";
                ini_open(global.cardInfoINI);
                realCardName = ini_read_string(cardName,"Card Name","");
                txt_input = realCardName;
                ini_close();
            }
        }
    }
    if(global.RoomState == 2)
    {

       if(id == instance_id[descTextBoxRef])
        {
            txt_input = string(global.consInt);
        }
        if(id == instance_id[forthTextBoxRef])
        {
            txt_input = string(global.consChar);
        }
        if(id == instance_id[sixthTextBoxRef])
        {
            txt_input = string(global.consWell);
        }
          if(id == instance_id[eighthTextBoxRef-1])
        {
            if(global.TutorialSetup == false)
            {
                if(global.cardInfoSlot == 0)
                {
                    txt_input = "Click to add card";
                }
                else
                {
                    s = string(global.cardInfoSlot);
                    cardName = "Info"+s;
                    ini_open(global.cardInfoINI);
                    if(!ini_section_exists(cardName))
                    {
    
                        txt_input = "Deleted, please replace"
                    }
                    else
                    {
                        realCardName = ini_read_string(cardName,"Card Name","");
                        txt_input = realCardName;
                    }
                    ini_close();
                }
            }
            else
            {                    
                cardName = "InfoT";
                ini_open(global.cardInfoINI);
                realCardName = ini_read_string(cardName,"Card Name","");
                txt_input = realCardName;
                ini_close();
            }
        }
    }
     if(global.RoomState == 4)
    {
        if(id == instance_id[thirdTextBoxRef-1])
        {
            if(global.TutorialSetup == false)
            {
                if(global.cardInfoSlot == 0)
                {
                    txt_input = "Click to add card";
                }
                else
                {
                    s = string(global.cardInfoSlot);
                    cardName = "Info"+s;
                    ini_open(global.cardInfoINI);
                    if(!ini_section_exists(cardName))
                    {
    
                        txt_input = "Deleted, please replace"
                    }
                    else
                    {
                        realCardName = ini_read_string(cardName,"Card Name","");
                        txt_input = realCardName;
                    }
                    ini_close();
                }
            }
            else
            {
                cardName = "InfoT";
                ini_open(global.cardInfoINI);
                realCardName = ini_read_string(cardName,"Card Name","");
                txt_input = realCardName;
                ini_close();
            }
        }

    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If a text box is clicked on, this is what happens
global.focus = id;//the focus is set to the current instances ID (button clicked ID)
if(room == RoomCardDeck)//deck of cards
{
    if(global.RoomState == 0)
    {
        if(global.lastRoom == RoomLocationAdd)//if your selecting the card
        {
            global.tempPos = 0; //creates the tempPos variable used for when a list is goes off screen and needs to be moved by x amount.
            //this opens the location ini, and updates the type section inside
            global.eventType = id.ref_display;//takes the ref displayed
            ini_open(global.locationINI);//opens locatio ini
            s = string(global.EventID);//creates a string using the eventID
            eventType = "Event"+s+"Type";//creates a eventname using type and the string above
            ini_write_real(global.tempLocation,eventType,global.eventType);//writes the info to the ini
            ini_write_real(global.tempLocation,"Mythical", global.locationMyth);
            ini_close();//closes the ini
            room = RoomLocationAdd;
            
        }
        else if(global.lastState == -1)//if you are editing the card
        {
            global.eventRef = id.ref_display;//takes the ref displayed in this instance, and sets it to the global eventRef
            global.lastState = 0;
            global.lastRoom = RoomCardDeck;
            room = RoomCardEdit;//changes room         
        }

    }
    if(global.RoomState == 1)
    {
        if(global.lastState == 0)//selecing the card
        {
           //writes the cards type to the event inside the event ini file
            global.cardType = id.ref_display;//sets the ref to "cardtype"
            ini_open(global.cardEventINI);//open the event ini
            s = string(global.currentCard);
            cardToUpdate = "Action"+s;
            if(global.edit == 0)
            {
                global.eventActionCardsNum = ini_read_real(global.eventName,"Action Cards",0);
                if( global.eventActionCardsNum &lt; 2)
                global.eventActionCardsNum += 1;
                ini_write_real(global.eventName,"Action Cards",global.eventActionCardsNum);
            }
            ini_write_real(global.eventName,cardToUpdate,global.cardType);
            ini_close();//closes the ini
            global.lastState = 1;
            global.RoomState = 0;
            global.lastRoom = RoomCardDeck;
            room = RoomCardEdit;//reads the "lastroom" variable and sets that to room
        }
        else if(global.lastState == -1) //editing the card
        {
            global.cardRef = id.ref_display;
            global.lastState = 1;
            global.lastRoom = RoomCardDeck;
            room = RoomCardEdit;//changes room      
        }

    }
    if(global.RoomState == 2)
    {
        if(global.lastState == 1)//selecing the card
        {
       //writes the cards type to the event inside the event ini file
            global.cardType = id.ref_display;//sets the ref to "cardtype"
            ini_open(global.cardActionINI);//open the event ini
            ini_write_real(global.cardName,"Cons Cards",global.cardType);
            ini_close();//closes the ini
            global.lastState = 2;
            global.RoomState = 1;
            global.lastRoom = RoomCardDeck;
            room = RoomCardEdit;//reads the "lastroom" variable and sets that to room
        }
        else if(global.lastState == -1) //editing the card
        {
            global.consCardRef = id.ref_display;
            global.lastState = 2;
            global.lastRoom = RoomCardDeck;
            room = RoomCardEdit;//changes room       
        }   
    }
    if(global.RoomState == 3)
    {
        if(global.lastState == 0)//selecing the card
        {
              //writes the cards type to the event inside the event ini file
            global.cardType = id.ref_display;//sets the ref to "cardtype"
            ini_open(global.cardEventINI);//open the event ini
            ini_write_real(global.eventName,"Info Cards",global.cardType);
            ini_close();//closes the ini
            global.lastState = 3;
            global.RoomState = 0;
            global.lastRoom = RoomCardDeck;
            room = RoomCardEdit;//reads the "lastroom" variable and sets that to room
        }
        else if(global.lastState == 1)
        {
             global.cardType = id.ref_display;
            ini_open(global.cardActionINI);//open the event ini               
            ini_write_real(global.cardName,"Info Cards",global.cardType);
            ini_close();//closes the ini
            global.lastState = 3;
            global.RoomState = 1;
            global.lastRoom = RoomCardDeck;
            room = RoomCardEdit;
        }
        else if(global.lastState == 4)
        {
            global.cardType = id.ref_display;
            ini_open(global.cardCharINI);//open the event ini               
            ini_write_real(global.charName,"Info Cards",global.cardType);
            ini_close();//closes the ini
            global.lastState = 3;
            global.RoomState = 4;
            global.lastRoom = RoomCardDeck;
            room = RoomCardEdit;
        }
        else if(global.lastState == 2)
        {
            global.cardType = id.ref_display;
            ini_open(global.cardConsINI);//open the event ini               
            ini_write_real(global.consName,"Info Cards",global.cardType);
            ini_close();//closes the ini
            global.lastState = 3;
            global.RoomState = 2;
            global.lastRoom = RoomCardDeck;
            room = RoomCardEdit;
        }

        else //editing the card
        {
            global.infoCardRef = id.ref_display;
            global.lastState = 3;
            global.lastRoom = RoomCardDeck; 
            room = RoomCardEdit;//changes room      
        }    
    }   
    if(global.RoomState == 4)
    {
        if(global.lastState == 0)//selecing the card
        {
            //writes the cards type to the event inside the event ini file
            global.cardType = id.ref_display;//sets the ref to "cardtype"
            ini_open(global.cardEventINI);//open the event ini
            ini_write_real(global.eventName,"Char Cards",global.cardType);
            ini_close();//closes the ini
            global.lastState = 4;
            global.RoomState = 0;
            global.lastRoom = RoomCardDeck;
            room = RoomCardEdit;//reads the "lastroom" variable and sets that to room
        }
        
        else if(global.lastState == -1) //editing the card
        {
            global.charCardRef = id.ref_display;
            global.lastState = 4;
            global.lastRoom = RoomCardDeck;
            room = RoomCardEdit;//changes room       
        }   
    }
}
if(room == RoomTutorial)
{
        if(instance_id[global.box5] == id)
    {
            switch(global.CharTutorial)
        {
            case 0:  global.CharTutorial = 1;//sets default text
            break;
            case 1: global.CharTutorial = 0;
            break;
        }
            room = RoomTutorial;
    }
        if(instance_id[global.box6] == id)
    {
            switch(global.MythTutorial)
        {
            case 0:  global.MythTutorial = 1;//sets default text
            break;
            case 1: global.MythTutorial = 0;
            break;
        }
            room = RoomTutorial;
    }



}
if(room == RoomCardEdit)
{
    if(global.RoomState == 0)
    {
        for(i = 0; i &lt;= global.eventActionCardsNum; i++)
        {
            if(instance_id[global.box5-1+i] == id and global.TutorialSetup == false)
            {
            global.tempPos = 0; //creates the tempPos variable used for when a list is goes off screen and needs to be moved by x amount.

                global.currentCard = 1+i;//action slot
                s = string(global.currentCard);
                cardToCheck = "Action"+s;
                ini_open(global.cardEventINI);
                tempCheckingCard = ini_read_real(global.eventName,cardToCheck,0);
                ini_close();
                if(tempCheckingCard == 0)
                {
                    global.edit = 0;
                }
                else
                {
                    global.edit = 1;
                }
                script_execute(SaveEventCard);
                global.lastState = 0;  
                global.RoomState = 1;
                room = RoomCardDeck;
            }    
        }
        if(instance_id[global.box6-1+global.eventActionCardsNum] == id and global.TutorialSetup == false)
        {
            global.tempPos = 0; //creates the tempPos variable used for when a list is goes off screen and needs to be moved by x amount.
            global.currentCard = 3;
            global.lastState = 0;  
            global.RoomState = 3;
            room = RoomCardDeck;
        } 
        if(instance_id[global.box7-1+global.eventActionCardsNum] == id and global.TutorialSetup == false)
        {
            global.tempPos = 0; //creates the tempPos variable used for when a list is goes off screen and needs to be moved by x amount.
            global.currentCard = 4;
            global.lastState = 0;  
            global.RoomState = 4;
            room = RoomCardDeck;
        } 
    }
    if(global.RoomState == 1)
    {
        if(instance_id[global.textBoxInstanceRef+1] == id)
        {
            actDesc = get_string_async("Please enter the Action Card's Descrption",global.cardText);
        } 
       if(instance_id[global.textBoxInstanceRef+3-1] == id and global.TutorialSetup == false)
        {
            global.tempPos = 0; //creates the tempPos variable used for when a list is goes off screen and needs to be moved by x amount.
            global.currentCard = 2;
            global.lastState = 1;  
            global.RoomState = 2;
            room = RoomCardDeck;
        } 
        if(instance_id[global.textBoxInstanceRef+4-1] == id and global.TutorialSetup == false)
        {
            global.tempPos = 0; //creates the tempPos variable used for when a list is goes off screen and needs to be moved by x amount.
            global.currentCard = 3;
            global.lastState = 1;  
            global.RoomState = 3;
            room = RoomCardDeck;
        } 
    }
    if(global.RoomState == 2)
    {
        if(instance_id[global.textBoxInstanceRef+6] == id and global.TutorialSetup == false)
        {
            global.tempPos = 0; //creates the tempPos variable used for when a list is goes off screen and needs to be moved by x amount.
            global.currentCard = 3;
            global.lastState = 2;  
            global.RoomState = 3;
            room = RoomCardDeck;
        } 
    }
    if(global.RoomState == 3)
    {
        if(instance_id[global.textBoxInstanceRef] == id)
        {
            InfoDesc = get_string_async("Please enter the Information Card's description",global.infoCardText);
        } 
        if(instance_id[global.textBoxInstanceRef+1] == id)
        {
            msg = get_string_async("Please enter web address",global.infoLink);
        } 
    }
    if(global.RoomState == 4)
    {
        if(instance_id[global.textBoxInstanceRef] == id)
        {
            charsText = get_string_async("Please Character Card's Description",global.charCardText);
        } 
        if(instance_id[global.textBoxInstanceRef+2-1] == id and global.TutorialSetup == false)
        {
            global.tempPos = 0; //creates the tempPos variable used for when a list is goes off screen and needs to be moved by x amount.
            global.currentCard = 3;
            global.lastState = 4;  
            global.RoomState = 3;
            room = RoomCardDeck;
        } 
    }
}
if(room == RoomMap)
{
    if(global.moveLock == 0)
    {
        if(global.textboxArray[0] == id)
        {
            if (global.myth != 2)//if not in editor mode
            {
                global.editorMode = global.myth;//stores the mythical status on click inside "editorMode"
                global.myth = 2;//sets the current mythical status to 2, editor mode
            }
            else//if in editor mode
            {
                global.myth = global.editorMode;//set the mythical status back to the previous
            }
            room = RoomMap;//reloads the map screen
        }
        if(global.textboxArray[2] == id)//event cards
        {
            global.tempPos = 0; //creates the tempPos variable used for when a list is goes off screen and needs to be moved by x amount.
            global.lastRoom = room;
            global.RoomState = 0;
            global.lastState = -1;
            room = RoomCardDeck;
        }
        if(global.textboxArray[3] == id)//action cards
        {
            global.tempPos = 0; //creates the tempPos variable used for when a list is goes off screen and needs to be moved by x amount.
            global.lastRoom = room;
            global.RoomState = 1;
            global.lastState = -1;
            room = RoomCardDeck;
        }
        if(global.textboxArray[4] == id)//cons cards
        {
            global.tempPos = 0; //creates the tempPos variable used for when a list is goes off screen and needs to be moved by x amount.
            global.lastRoom = room;
            global.RoomState = 2;
            global.lastState = -1;
            room = RoomCardDeck;
        }   
        if(global.textboxArray[5] == id)//info cards
        {
            global.tempPos = 0; //creates the tempPos variable used for when a list is goes off screen and needs to be moved by x amount.
            global.lastRoom = room;
            global.RoomState = 3;
            global.lastState = -1;
            room = RoomCardDeck;
        }  
        if(global.textboxArray[6] == id)//char cards
        {
            global.tempPos = 0; //creates the tempPos variable used for when a list is goes off screen and needs to be moved by x amount.
            global.lastRoom = room;
            global.RoomState = 4;
            global.lastState = -1;
            room = RoomCardDeck;
        }   
        if(global.textboxArray[8] == id)//options
        {
            //on click
            global.cardSprite = -1;
            global.RoomState = 0;
            global.buildingSprite = -1;
            global.SelectWindow = false;
            global.lastRoom = room;//lastRoom variable is the current room

            room = RoomSprites;//Move to Sprites room
        }  
        if(global.textboxArray[9] == id)//options
        {
            //on click
            global.lastRoom = room;//lastRoom variable is the current room
            room = RoomTutorial;//Move to Options room
        }  
        if(global.textboxArray[10] == id)//options
        {
            //on click
            global.lastRoom = room;//lastRoom variable is the current room
            room = RoomOptions;//Move to Options room
        }  
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>i_d = ds_map_find_value(async_load, "id");
if(i_d == msg)
{
   if (ds_map_find_value(async_load, "status"))
      {
      if( ds_map_find_value(async_load, "result") != "")
         {
            global.infoLink = ds_map_find_value(async_load, "result");
            
            if(string_copy(global.infoLink,1,4) == "www." and string_copy(global.infoLink,1,7) != "http://")
            {
                global.infoLink = "http://"+global.infoLink;
            }
            if(string_copy(global.infoLink,1,11) != "http://www.")
            {
                global.infoLink = "http://www."+global.infoLink;
            }
            msg = "";
            script_execute(SaveInfoCard);
            room = RoomCardEdit;
         }
      }
  }
if(i_d == actDesc)
{
   if (ds_map_find_value(async_load, "status"))
      {
      if( ds_map_find_value(async_load, "result") != "")
         {
            global.cardText = ds_map_find_value(async_load, "result");
            script_execute(SaveActionCard);
            actDesc = "";
            room = RoomCardEdit;
         }
      }
}
if(i_d == charsText)
{
   if (ds_map_find_value(async_load, "status"))
      {
      if( ds_map_find_value(async_load, "result") != "")
         {
            global.charCardText = ds_map_find_value(async_load, "result");
            script_execute(SaveCharCard);
            charsText = "";
            room = RoomCardEdit;
         }
      }
  }
if(i_d == InfoDesc)
{
   if (ds_map_find_value(async_load, "status"))
      {
      if( ds_map_find_value(async_load, "result") != "")
         {
            global.infoCardText = ds_map_find_value(async_load, "result");
            script_execute(SaveInfoCard);
            InfoDesc = "";
            room = RoomCardEdit;
         }
      }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This sets up the individual rooms text to actually draw on screen
//this includes text alignment, sizing of boxes, screen positioning
if(room == RoomLocationAdd)
{
    draw_set_valign(fa_middle);
    draw_set_halign(fa_right);
    tempX = 0;
    if(id == instance_id[seventhTextBoxRef+1] or id == instance_id[seventhTextBoxRef+2] or id == instance_id[seventhTextBoxRef+3])
    {
        tempX = 400;
    }
    draw_text(global.InputTextX + tempX, myY, txt_display);//Draws the input text
    draw_set_halign(fa_left);
    if(id != instance_id[descTextBoxRef])
    {
        draw_text(global.InputBoxX + tempX,myY, txt_input); //draws the input box text
    }
    else
    {   
        draw_set_valign(fa_top);
        draw_text_ext(global.InputBoxX, myY - 8 ,txt_input, 20, 300);
    }
}

if(room == RoomCardEdit)
{
    if(global.RoomState == 1)
    {
        draw_set_valign(fa_middle);
        draw_set_halign(fa_right);
        draw_text(global.InputTextX, myY ,txt_display);//Draws the input text
        draw_set_halign(fa_left);
        if(id == instance_id[thirdTextBoxRef-1])      
        {        
            draw_set_valign(fa_top);
            draw_text_ext(global.InputBoxX, myY ,txt_input, 20, 300);
        }
        else
        {
            draw_set_valign(fa_middle);
            draw_text(global.InputBoxX, myY ,txt_input); //draws the input box text
        }
    }
    else if(global.RoomState == 3)
    {
        draw_set_valign(fa_middle);
        draw_set_halign(fa_right);
        draw_text(global.InputTextX, myY ,txt_display);//Draws the input text
        draw_set_halign(fa_left);
        if(id == instance_id[descTextBoxRef-1] or id == instance_id[thirdTextBoxRef-1])
        {        
            draw_set_valign(fa_top);
            draw_text_ext(global.InputBoxX, myY ,txt_input, 20, 300);
        }
        else
        {        
            draw_set_valign(fa_middle);
            draw_text(global.InputBoxX, myY ,txt_input); //draws the input box text
        }
    }
    else if(global.RoomState == 4)
    {
        draw_set_valign(fa_middle);
        draw_set_halign(fa_right);
        draw_text(global.InputTextX, myY ,txt_display);//Draws the input text
        draw_set_halign(fa_left);
        if(id == instance_id[descTextBoxRef-1])
        {        
            draw_set_valign(fa_top);
            draw_text_ext(global.InputBoxX, myY ,txt_input, 20, 300);
        }
        else
        {
            draw_set_valign(fa_middle);
            draw_text(global.InputBoxX, myY ,txt_input); //draws the input box text
        }
    }
    else
    {
        draw_set_valign(fa_middle);
        draw_set_halign(fa_right);
        draw_text(global.InputTextX, myY ,txt_display);//Draws the input text
        draw_set_halign(fa_left);
        draw_text(global.InputBoxX, myY ,txt_input); //draws the input box text

    }
}
if(room == RoomTutorial)
{
        draw_set_valign(fa_middle);
        draw_set_halign(fa_right);
        draw_text(global.roomWidth/2 , myY ,txt_display);//Draws the input text
        draw_set_halign(fa_left);
        draw_text(global.roomWidth/2 , myY ,txt_input); //draws the input box text

}
if(room == RoomCardDeck)
{
    if(global.RoomState == 0)
    {
        draw_set_valign(fa_middle);
        draw_set_halign(fa_left);
        draw_text(global.InputBoxX - 45, myY, ref_display); //draws the input box text
        draw_text(global.InputBoxX - 10, myY, name_display);
        draw_text(global.InputBoxX + 125, myY, int_display); 
        draw_text(global.InputBoxX + 165, myY, char_display); 
        draw_text(global.InputBoxX + 205, myY, well_display); 
        draw_text(global.InputBoxX + 235, myY, mythical_display); 
    }
    if(global.RoomState == 1)
    {
        draw_set_valign(fa_middle);
        draw_set_halign(fa_left);
        draw_text(global.InputBoxX - 45, myY, ref_display); //draws the input box text
        draw_text(global.InputBoxX - 10, myY, name_display);
        draw_text(global.InputBoxX + 235, myY, myth_display);     
        
    }
    if(global.RoomState == 2)
    {
        draw_set_valign(fa_middle);
        draw_set_halign(fa_left);
        draw_text(global.InputBoxX - 45, myY, ref_display); //draws the input box text
        draw_text(global.InputBoxX - 10, myY, name_display);
        draw_text(global.InputBoxX + 125, myY, int_display);
        draw_text(global.InputBoxX + 165, myY, char_display);     
        draw_text(global.InputBoxX + 205, myY, well_display);   
        
    }
    if(global.RoomState == 3)
    {
        draw_set_valign(fa_middle);
        draw_set_halign(fa_left);
        draw_text(global.InputBoxX - 45, myY, ref_display); //draws the input box text
        draw_text(global.InputBoxX + 0, myY, name_display);                
    }
    if(global.RoomState == 4)
    {
        draw_set_valign(fa_middle);
        draw_set_halign(fa_left);
        draw_text(global.InputBoxX - 45, myY, ref_display); //draws the input box text
        draw_text(global.InputBoxX + 0, myY, name_display);                
    }
}
if(room == RoomDeckList)
{
    draw_set_valign(fa_middle);
    draw_set_halign(fa_left);
    draw_text(global.InputBoxX - 25, myY, num_display); //draws the input box text
    draw_text(global.InputBoxX + 0, myY, txt_display);

}
if(room == RoomMap)
{
    if(instance_id[11] != id and instance_id[19] != id and instance_id[20] != id and instance_id[21] != id) 
    {
        draw_set_valign(fa_middle);
        draw_set_halign(fa_right);
        draw_text(global.mapInputBoxX - 36, myY + 0, num_display); //draws the input box text
        draw_set_halign(fa_left);
        draw_text(global.mapInputBoxX - 36, myY + 0, txt_display);

    }
 
    else
    {
        draw_set_valign(fa_middle);
        draw_set_halign(fa_center);
        draw_text(global.mapInputBoxX - 0, myY + 0, num_display); //draws the input box text
        draw_text(global.mapInputBoxX - 0, myY + 0, txt_display);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

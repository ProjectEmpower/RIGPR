<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ButtonSpriteAddBuildingSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tempRoom = room;
fileN = "";
fileM = "";
fileB = "";
inputN = "";
inputM = "";
inputB = "";

if(room == RoomSprites)
{
    x = global.roomWidth - 375;
    y = global.roomHeight - 170;
}
else
{
    x = global.roomWidth - 125;
    y = global.roomHeight/2 - 150;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inputN = show_message_async("Please select normal building's image to upload.");
                
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>i_d = ds_map_find_value(async_load,"id");
if(i_d == DeleteCurrentSprite.BuildDel)
{
    if ds_map_find_value(async_load, "status")
    {
        for(i = global.buildingSprite; i &lt; global.totalBothBuildingSprites; i++)
        {
            file_delete("editor_files/sprites/BuildingSpriteN"+string(i)+".png");
            sprite_delete("BuildingSpriteN"+string(i)+".png");
            file_delete("editor_files/sprites/BuildingSpriteM"+string(i)+".png");
            sprite_delete("BuildingSpriteM"+string(i)+".png");
            file_delete("editor_files/sprites/BuildingSpriteB"+string(i)+".png");
            sprite_delete("BuildingSpriteB"+string(i)+".png");
            if(!sprite_exists("BuildingSpriteN"+string(i)+".png") and file_exists("editor_files/sprites/BuildingSpriteN"+string(i+1)+".png"))
            {
        
                file_rename("editor_files/sprites/BuildingSpriteN"+string(i+1)+".png","editor_files/sprites/BuildingSpriteN"+string(i)+".png");
                global.normBuildingArray[i] = sprite_add("editor_files/sprites/BuildingSpriteN"+string(i)+".png",1,false,true,0,0);//creates the sprite using image above
                sprite_set_offset(global.normBuildingArray[i],sprite_get_width(global.normBuildingArray[i])/2,sprite_get_height(global.normBuildingArray[i])/2)
                sprite_delete("BuildingSpriteN"+string(i+1)+".png");
                    
                file_rename("editor_files/sprites/BuildingSpriteM"+string(i+1)+".png","editor_files/sprites/BuildingSpriteM"+string(i)+".png");
                global.mythBuildingArray[i] = sprite_add("editor_files/sprites/BuildingSpriteM"+string(i)+".png",1,false,true,0,0);//creates the sprite using image above
                sprite_set_offset(global.mythBuildingArray[i],sprite_get_width(global.mythBuildingArray[i])/2,sprite_get_height(global.mythBuildingArray[i])/2)
                sprite_delete("BuildingSpriteM"+string(i+1)+".png");
                    
                file_rename("editor_files/sprites/BuildingSpriteB"+string(i+1)+".png","editor_files/sprites/BuildingSpriteB"+string(i)+".png");
                global.bothBuildingArray[i] = sprite_add("editor_files/sprites/BuildingSpriteB"+string(i)+".png",1,false,true,0,0);//creates the sprite using image above
                sprite_set_offset(global.bothBuildingArray[i],sprite_get_width(global.bothBuildingArray[i])/2,sprite_get_height(global.bothBuildingArray[i])/2)
                sprite_delete("BuildingSpriteB"+string(i+1)+".png");
                show_debug_message("yes2");
            }
        }
        for(i = 0; i &lt; global.TotalInstanceNum; i++)
        {
            ini_open(global.locationINI);
            LocationName = "Location"+string(i);
            tempRef = ini_read_real(LocationName,"SpriteRef",-1);
            if(tempRef == global.buildingSprite)
            {
                tempRef = -1;
                ini_write_real(LocationName,"SpriteRef", tempRef);
            }
            if(tempRef &gt; global.buildingSprite)
            {
                tempRef -= 1;
                ini_write_real(LocationName,"SpriteRef", tempRef);
            }
            ini_close();
            
        }
        ini_open(global.locationINI);
        LocationName = "LocationT";
        tempRef = ini_read_real(LocationName,"SpriteRef",-1);
        if(tempRef == global.buildingSprite)
        {
            tempRef = -1;
            ini_write_real(LocationName,"SpriteRef", tempRef);
        }
        if(tempRef &gt; global.buildingSprite)
        {
            tempRef -= 1;
            ini_write_real(LocationName,"SpriteRef", tempRef);
        }
        ini_close();
        global.buildingSprite = -1;
        global.totalNormBuildingSprites -= 1;
        global.totalMythBuildingSprites -= 1;
        global.totalBothBuildingSprites -= 1;
    
        ini_open(global.editorINI);
        ini_write_real("General", "Norm Building Sprites", global.totalNormBuildingSprites);
        ini_write_real("General", "Myth Building Sprites", global.totalMythBuildingSprites);
        ini_write_real("General", "Both Building Sprites", global.totalBothBuildingSprites);
        ini_close();
        room = tempRoom;
    }
}
if(room != RoomSprites)
    if(i_d == ButtonAddLocationBackground.Background)
    {
        ButtonAddLocationBackground.BackgroundF = get_open_filename("PNG|*.png", "");//opens the file
        if(ButtonAddLocationBackground.BackgroundF != "")//if it finds a file, do this
        {
            show_message_async("Background uploaded");
        }
        else
        {
            show_message_async("You did not upload a background.");
        }
        
    }
if(i_d == inputN)
{
    fileN = get_open_filename("PNG|*.png", "");//opens the file
    if(fileN != "")//if it finds a file, do this
    {
        inputM = show_message_async("Please select mythical building's image to upload.");
    }
    else
    {
        show_message_async("You did not select normal map's building's image to upload.");
    }
    
}
if(i_d == inputM)
{
    fileM = get_open_filename("PNG|*.png", "");//opens the file
    if(fileM != "")//if it finds a file, do this
    {
        inputB = show_message_async("Please select both building's image to upload.");
    }
    else
    {
        show_message_async("You did not select mythical map's building's image to upload.");
    }
    
}
if(i_d == inputB)
{
    fileB = get_open_filename("PNG|*.png", "");//opens the file
    if(fileB != "")//if it finds a file, do this
    {
        show_message_async("Sprite set added successfully.");
    }
    else
    {
        show_message_async("You did not select both map's building's image to upload.");
    }
   
}
if(room != RoomSprites)
if(ButtonAddLocationBackground.BackgroundF != "")
{
    spriteName = "LocBack"+string(global.totalLocationBackgrounds);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
    global.locationBGArray[global.totalLocationBackgrounds] = background_add(ButtonAddLocationBackground.BackgroundF,0,0);
    background_save(global.locationBGArray[global.totalLocationBackgrounds], "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
    room_set_background(tempRoom, 0, 1, 0, global.locationBGArray[global.totalLocationBackgrounds], 0, 0, 0, 0, 0, 0, 1); 
    Background = "";
    global.BGRef = global.totalLocationBackgrounds;
    script_execute(SaveLocation);
    global.totalLocationBackgrounds += 1;
    ini_open(global.editorINI)
    ini_write_real("General","Location Backgrounds",global.totalLocationBackgrounds);
    ini_close();
    room = tempRoom;
            
}
if(fileN != "" and fileM != "" and fileB != "")
{
        spriteName = "BuildingSpriteN"+string(global.totalNormBuildingSprites);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
        global.normBuildingArray[global.totalNormBuildingSprites] = sprite_add(fileN,1,false,true,0,0);//creates the sprite using image above
        sprite_set_offset(global.normBuildingArray[global.totalNormBuildingSprites],sprite_get_width(global.normBuildingArray[global.totalNormBuildingSprites])/2,sprite_get_height(global.normBuildingArray[global.totalNormBuildingSprites])/2)
        saveLoc = sprite_save_strip(global.normBuildingArray[global.totalNormBuildingSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalNormBuildingSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Norm Building Sprites", global.totalNormBuildingSprites);
        ini_close();//closes the ini
        fileN = "";//sets the open file to blank
        
        spriteName = "BuildingSpriteM"+string(global.totalMythBuildingSprites);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
        global.mythBuildingArray[global.totalMythBuildingSprites] = sprite_add(fileM,1,false,true,0,0);//creates the sprite using image above
        sprite_set_offset(global.mythBuildingArray[global.totalMythBuildingSprites],sprite_get_width(global.mythBuildingArray[global.totalMythBuildingSprites])/2,sprite_get_height(global.mythBuildingArray[global.totalMythBuildingSprites])/2)
        saveLoc = sprite_save_strip(global.mythBuildingArray[global.totalMythBuildingSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalMythBuildingSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Myth Building Sprites", global.totalMythBuildingSprites);
        ini_close();//closes the ini
        fileM = "";//sets the open file to blank
                      
        spriteName = "BuildingSpriteB"+string(global.totalBothBuildingSprites);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
        global.bothBuildingArray[global.totalBothBuildingSprites] = sprite_add(fileB,1,false,true,0,0);//creates the sprite using image above
        sprite_set_offset(global.bothBuildingArray[global.totalBothBuildingSprites],sprite_get_width(global.bothBuildingArray[global.totalBothBuildingSprites])/2,sprite_get_height(global.bothBuildingArray[global.totalBothBuildingSprites])/2)
        saveLoc = sprite_save_strip(global.bothBuildingArray[global.totalBothBuildingSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalBothBuildingSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Both Building Sprites", global.totalBothBuildingSprites);
        ini_close();//closes the ini
        fileB = "";//sets the open file to blank
        
        global.buildingSprite = global.totalNormBuildingSprites-1;
        if(room != RoomSprites)
            script_execute(SaveLocation);//saves the current location
        room = tempRoom;//reloads the room
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

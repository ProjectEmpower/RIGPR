<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//on create, create the variable and set
drag = 0 //drag is used when moving the sceen
currentPosX = 0//current x/y is used when checking if the screen has been moved.
currentPosY = 0
tempZoom = global.zoom;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(drag == 1) //if drag is 1 (true)
{

    //sets the view when dragging
    view_xview = dragX - (mouse_x - view_xview);
    view_yview = dragY - (mouse_y - view_yview);
        
    //makes sure the view stays within the boundries of the room
    view_xview = max(0, min(view_xview, room_width - view_wview));
    view_yview = max(0, min(view_yview, room_height - view_hview));
    
if(global.TutorialSetup == true)
{
    for(i = 0; i &lt; global.numberOfBackgrounds; i++)
    {    
        if(global.TutBG[i].instCheck != 1)
        {
        global.TutBG[i].x = view_xview + global.TutBG[i].instX * global.zoom;
        global.TutBG[i].y = view_yview + global.TutBG[i].instY * global.zoom;
        }
    }
}
    //sets the button postions when the screen is in movement
    ButtonCharacter.x = view_xview + global.CharacterButtonX * global.zoom
    ButtonCharacter.y = view_yview + global.CharacterButtonY * global.zoom// * global.zoom
    
    //ButtonWeekLeft.x = view_xview + global.WeekLeftButtonX * global.zoom;
    //ButtonWeekLeft.y = view_yview + global.WeekLeftButtonY * global.zoom;
    //ButtonWeekRight.x = view_xview + global.WeekRightButtonX * global.zoom;
    //ButtonWeekRight.y = view_yview + global.WeekRightButtonY * global.zoom;
    if(currentPosX != view_xview or currentPosY != view_yview)
    {
        global.moveLock = 1;
    }
}
if(tempZoom != global.zoom)
{ 
    tempZoom = global.zoom;
    view_wview[0] = global.roomWidth * global.zoom //set the view width/height to the global variable roomWidth/roomHeight, this is set when the game starts and the player changes the screen size using options
    view_hview[0] = global.roomHeight * global.zoom
    
    ButtonCharacter.x = view_xview + global.CharacterButtonX * global.zoom
    ButtonCharacter.y = view_yview + global.CharacterButtonY * global.zoom// * global.zoom    
    //ButtonWeekLeft.x = view_xview + global.WeekLeftButtonX * global.zoom;
    //ButtonWeekLeft.y = view_yview + global.WeekLeftButtonY * global.zoom;
    //ButtonWeekRight.x = view_xview + global.WeekRightButtonX * global.zoom;
    //ButtonWeekRight.y = view_yview + global.WeekRightButtonY * global.zoom;
    if(global.TutorialSetup == true)
    {    
        for(i = 0; i &lt; global.numberOfBackgrounds; i++)
        {
            if(global.TutBG[i].instCheck != 1)
            {
                global.TutBG[i].x = view_xview + global.TutBG[i].instX * global.zoom;
                global.TutBG[i].y = view_yview + global.TutBG[i].instY * global.zoom;
                global.TutBG[i].image_xscale = global.zoom;
                global.TutBG[i].image_yscale = global.zoom;
            }
        }
    }
    ButtonCharacter.image_xscale = global.zoom
    ButtonCharacter.image_yscale = global.zoom// * global.zoom
    //ButtonWeekLeft.image_xscale = global.zoom;
    //ButtonWeekLeft.image_yscale = global.zoom;
    //ButtonWeekRight.image_xscale = global.zoom;
    //ButtonWeekRight.image_yscale = global.zoom;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//sets the drag variable to false
drag = 0;
global.moveLock = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.zooming == false)
{
    //turns on drag variable (true)
    drag = 1
    //sets the dragX and dragY positions to the mouse's current position
    dragX = mouse_x
    dragY = mouse_y
    currentPosX = view_xview;
    currentPosY = view_yview;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

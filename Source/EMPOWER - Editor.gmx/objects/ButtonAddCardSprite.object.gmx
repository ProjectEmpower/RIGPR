<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ButtonSpriteSave</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == RoomSprites)
{
    x = 125;
    y = global.roomHeight - 170;
}
else
{
    x = global.roomWidth - 375;
    y = global.roomHeight - 70;
}
tempRoom = room;
CardImage = "";
if(global.RoomState == 3)
    sprite_index = No_sprite;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>CardImage = show_message_async("Please select the Card art to upload.");
                
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>i_d = ds_map_find_value(async_load,"id");
if(i_d == DeleteCard.msgDelCard)
{
    if(global.RoomState == 0)
    {
        if ds_map_find_value(async_load, "status")
        {
            ini_open(global.cardEventINI)
            ini_section_delete(global.eventName);
            ini_close()
            for(i = global.eventRef; i &lt; global.totalEventCards; i++)
            {
                ini_open(global.cardEventINI)
                tempEventName = "Event"+string(i)
                tempNextEventName = "Event"+string(i+1)
                if(ini_section_exists(tempNextEventName) and !ini_section_exists(tempEventName))
                {
                    tempName = ini_read_string(tempNextEventName,"Event Name",0);
                    tempText = ini_read_string(tempNextEventName,"Event Text",0);
                    tempInt = ini_read_real(tempNextEventName,"Int",0);
                    tempChar = ini_read_real(tempNextEventName,"Char",0);
                    tempWell = ini_read_real(tempNextEventName,"Well",0);
                    tempMyth = ini_read_real(tempNextEventName,"Mythical",0);
                    tempSprite = ini_read_real(tempNextEventName,"Sprite",-1);
                    tempInfoCard = ini_read_real(tempNextEventName,"Info Cards",0);
                    tempCharCard = ini_read_real(tempNextEventName,"Char Cards",0);
                    tempActionNum = ini_read_real(tempNextEventName,"Action Cards",0);
                    tempAction[tempActionNum] = 0;
                    for(t = 0; t &lt;= tempActionNum; t++)
                    {
                        tempActionName = "Action"+string(t+1);
                        tempAction[t] = ini_read_real(tempNextEventName,tempActionName,0);
                    }
                    ini_write_real(tempEventName,"Ref",i);
                    ini_write_string(tempEventName,"Event Name",tempName);
                    ini_write_string(tempEventName,"Event Text",tempText);
                    ini_write_real(tempEventName,"Int",tempInt);
                    ini_write_real(tempEventName,"Char",tempChar);
                    ini_write_real(tempEventName,"Well",tempWell);
                    ini_write_real(tempEventName,"Mythical",tempMyth);
                    ini_write_real(tempEventName,"Sprite",tempSprite);
                    ini_write_real(tempEventName,"Info Cards",tempInfoCard);
                    ini_write_real(tempEventName,"Char Cards",tempCharCard);
                    ini_write_real(tempEventName,"Action Cards",tempActionNum);
                    for(t = 0; t &lt;= tempActionNum; t++)
                    {
                        tempActionName = "Action"+string(t+1);
                         ini_write_real(tempEventName,tempActionName,tempAction[t]);
                    }
                    ini_section_delete(tempNextEventName);
                    ini_close(); //closes the ini file       
                }
            }
            global.totalEventCards -= 1; //after running, this will decrease the total instance number by 1
            DeleteCard.msgDelCard = ""
            room = RoomCardDeck
        }
    }
    if(global.RoomState == 1)
    {
        if ds_map_find_value(async_load, "status")
        {
            ini_open(global.cardActionINI)
            ini_section_delete(global.cardName);
            ini_close()
            for(i = global.cardRef; i &lt; global.totalActionCards; i++)
            {
                ini_open(global.cardActionINI)
                tempName = "Action"+string(i)
                tempNextName = "Action"+string(i+1)
                if(ini_section_exists(tempNextName) and !ini_section_exists(tempName))
                {
                    tempCName = ini_read_string(tempNextName,"Card Name",0);
                    tempText = ini_read_string(tempNextName,"Card Text",0);
                    tempMyth = ini_read_real(tempNextName,"Mythical",0);
                    tempSprite = ini_read_real(tempNextName,"Sprite",-1);
                    tempInfoCard = ini_read_real(tempNextName,"Info Cards",0);
                    tempConsCard = ini_read_real(tempNextName,"Cons Cards",0);
        
                    ini_write_real(tempName,"Ref",i);
                    ini_write_string(tempName,"Card Name",tempCName);
                    ini_write_string(tempName,"Card Text",tempText);
                    ini_write_real(tempName,"Mythical",tempMyth);
                    ini_write_real(tempName,"Sprite",tempSprite);
                    ini_write_real(tempName,"Info Cards",tempInfoCard);
                    ini_write_real(tempName,"Cons Cards",tempConsCard);
        
                    ini_section_delete(tempNextName);
                    ini_close(); //closes the ini file       
                }
            }
            global.totalActionCards -= 1;
            DeleteCard.msgDelCard = ""
            room = RoomCardDeck
            
        }
    }
    if(global.RoomState == 2)
    {
        if ds_map_find_value(async_load, "status")
        {
            ini_open(global.cardConsINI)
            ini_section_delete(global.consName);
            ini_close()
            for(i = global.consCardRef; i &lt; global.totalConsCards; i++)
            {
                ini_open(global.cardConsINI)
                tempName = "Cons"+string(i)
                tempNextName = "Cons"+string(i+1)
                if(ini_section_exists(tempNextName) and !ini_section_exists(tempName))
                {
                    tempCName = ini_read_string(tempNextName,"Card Name",0);
                    tempText = ini_read_string(tempNextName,"Card Text",0);
                    tempInt = ini_read_real(tempNextName,"Int",0);
                    tempChar = ini_read_real(tempNextName,"Char",0);
                    tempWell = ini_read_real(tempNextName,"Well",0);
                    tempSprite = ini_read_real(tempNextName,"Sprite",-1);
                    tempInfoCard = ini_read_real(tempNextName,"Info Cards",0);
        
                    ini_write_real(tempName,"Ref",i);
                    ini_write_string(tempName,"Card Name",tempCName);
                    ini_write_string(tempName,"Card Text",tempText);
                    ini_write_real(tempName,"Int",tempInt);
                    ini_write_real(tempName,"Char",tempChar);
                    ini_write_real(tempName,"Well",tempWell);
        
                    ini_write_real(tempName,"Sprite",tempSprite);
                    ini_write_real(tempName,"Info Cards",tempInfoCard);
        
                    ini_section_delete(tempNextName);
                    ini_close(); //closes the ini file       
                }
            }
            global.totalConsCards -= 1;
            DeleteCard.msgDelCard = ""
            room = RoomCardDeck
        }
    }
    if(global.RoomState == 3)
    {
        if ds_map_find_value(async_load, "status")
        {
            ini_open(global.cardInfoINI)
            ini_section_delete(global.infoName);
            ini_close()
            for(i = global.infoCardRef; i &lt; global.totalInfoCards; i++)
            {
                ini_open(global.cardInfoINI)
                tempName = "Info"+string(i)
                tempNextName = "Info"+string(i+1)
                if(ini_section_exists(tempNextName) and !ini_section_exists(tempName))
                {
                    tempCName = ini_read_string(tempNextName,"Card Name",0);
                    tempText = ini_read_string(tempNextName,"Card Text",0);
                    tempSprite = ini_read_real(tempNextName,"Sprite",-1);
                    tempLink = ini_read_string(tempNextName,"Link","");
        
                    ini_write_real(tempName,"Ref",i);
                    ini_write_string(tempName,"Card Name",tempCName);
                    ini_write_string(tempName,"Card Text",tempText);
        
                    ini_write_real(tempName,"Sprite",tempSprite);
                    ini_write_string(tempName,"Link",tempLink);
        
                    ini_section_delete(tempNextName);
                    ini_close(); //closes the ini file       
                }
            }
            global.totalInfoCards -= 1;
            DeleteCard.msgDelCard = ""
            room = RoomCardDeck
        }
    }
    if(global.RoomState == 4)
    {
        if ds_map_find_value(async_load, "status")
        {
            ini_open(global.cardCharINI)
            ini_section_delete(global.charName);
            ini_close()
            for(i = global.charCardRef; i &lt; global.totalCharCards; i++)
            {
                ini_open(global.cardCharINI)
                tempName = "Char"+string(i)
                tempNextName = "Char"+string(i+1)
                if(ini_section_exists(tempNextName) and !ini_section_exists(tempName))
                {
                    tempCName = ini_read_string(tempNextName,"Card Name",0);
                    tempText = ini_read_string(tempNextName,"Card Text",0);
        
                    tempSprite = ini_read_real(tempNextName,"Sprite",-1);
                    tempInfoCard = ini_read_real(tempNextName,"Info Cards",0);
        
                    ini_write_real(tempName,"Ref",i);
                    ini_write_string(tempName,"Card Name",tempCName);
                    ini_write_string(tempName,"Card Text",tempText);
        
        
                    ini_write_real(tempName,"Sprite",tempSprite);
                    ini_write_real(tempName,"Info Cards",tempInfoCard);
        
                    ini_section_delete(tempNextName);
                    ini_close(); //closes the ini file       
                }
            }
            global.totalCharCards -= 1;
            DeleteCard.msgDelCard = ""
            room = RoomCardDeck
        }
    }
}
if(i_d == CardImage)
{
    CardImage = get_open_filename("PNG|*.png", "");//opens the file
    if(CardImage != "")
    {
       show_message_async("Card art added."); 
    }
    else
    {
        show_message_async("Card art failed to upload.");
    }
}
if(CardImage != "")
{
    if(global.RoomState == 0)
    {
        spriteName = "EventCardSprite"+string(global.totalEventCardSprites);
        global.eventCardSpriteArray[global.totalEventCardSprites]= sprite_add(CardImage,1,false,true,0,0)
        sprite_set_offset(global.eventCardSpriteArray[global.totalEventCardSprites],sprite_get_width(global.eventCardSpriteArray[global.totalEventCardSprites])/2,sprite_get_height(global.eventCardSpriteArray[global.totalEventCardSprites])/2);
        saveLoc = sprite_save_strip(global.eventCardSpriteArray[global.totalEventCardSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalEventCardSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Event Card Sprites", global.totalEventCardSprites);
        ini_close();//closes the ini
        CardImage = "";//sets the open file to blank
        global.cardSprite = global.totalEventCardSprites-1;
        if(room != RoomSprites)
            script_execute(SaveEventCard);//saves the current location
        room = tempRoom;//reloads the room
    }
    if(global.RoomState == 1)
    {
        spriteName = "ActionCardSprite"+string(global.totalActionCardSprites);
        global.actionCardSpriteArray[global.totalActionCardSprites]= sprite_add(CardImage,1,false,true,0,0)
        sprite_set_offset(global.actionCardSpriteArray[global.totalActionCardSprites],sprite_get_width(global.actionCardSpriteArray[global.totalActionCardSprites])/2,sprite_get_height(global.actionCardSpriteArray[global.totalActionCardSprites])/2);
        saveLoc = sprite_save_strip(global.actionCardSpriteArray[global.totalActionCardSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalActionCardSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Action Card Sprites", global.totalActionCardSprites);
        ini_close();//closes the ini
        CardImage = "";//sets the open file to blank
        global.cardSprite = global.totalActionCardSprites-1;
                if(room != RoomSprites)
        script_execute(SaveActionCard);//saves the current location
        room = tempRoom;//reloads the room
    }
    if(global.RoomState == 2)
    {
        spriteName = "ConsCardSprite"+string(global.totalConsCardSprites);
        global.consCardSpriteArray[global.totalConsCardSprites]= sprite_add(CardImage,1,false,true,0,0)
        sprite_set_offset(global.consCardSpriteArray[global.totalConsCardSprites],sprite_get_width(global.consCardSpriteArray[global.totalConsCardSprites])/2,sprite_get_height(global.consCardSpriteArray[global.totalConsCardSprites])/2);
        saveLoc = sprite_save_strip(global.consCardSpriteArray[global.totalConsCardSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalConsCardSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Cons Card Sprites", global.totalConsCardSprites);
        ini_close();//closes the ini
        CardImage = "";//sets the open file to blank
        global.cardSprite = global.totalConsCardSprites-1;
                if(room != RoomSprites)
        script_execute(SaveConsCard);//saves the current location
        room = tempRoom;//reloads the room
    
    }
    if(global.RoomState == 3)
    {
        spriteName = "InfoCardSprite"+string(global.totalInfoCardSprites);
        global.infoCardSpriteArray[global.totalInfoCardSprites]= sprite_add(CardImage,1,false,true,0,0)
        sprite_set_offset(global.infoCardSpriteArray[global.totalInfoCardSprites],sprite_get_width(global.infoCardSpriteArray[global.totalInfoCardSprites])/2,sprite_get_height(global.infoCardSpriteArray[global.totalInfoCardSprites])/2);
        saveLoc = sprite_save_strip(global.infoCardSpriteArray[global.totalInfoCardSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalInfoCardSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Info Card Sprites", global.totalInfoCardSprites);
        ini_close();//closes the ini
        CardImage = "";//sets the open file to blank
        global.cardSprite = global.totalInfoCardSprites-1;
                if(room != RoomSprites)
        script_execute(SaveInfoCard);//saves the current location
        room = tempRoom;//reloads the room
    }
    if(global.RoomState == 4)
    {
        spriteName = "CharCardSprite"+string(global.totalCharCardSprites);
        global.charCardSpriteArray[global.totalCharCardSprites]= sprite_add(CardImage,1,false,true,0,0)
        sprite_set_offset(global.charCardSpriteArray[global.totalCharCardSprites],sprite_get_width(global.charCardSpriteArray[global.totalCharCardSprites])/2,sprite_get_height(global.charCardSpriteArray[global.totalCharCardSprites])/2);
        saveLoc = sprite_save_strip(global.charCardSpriteArray[global.totalCharCardSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalCharCardSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Char Card Sprites", global.totalCharCardSprites);
        ini_close();//closes the ini
        CardImage = "";//sets the open file to blank
        global.cardSprite = global.totalCharCardSprites-1;
                if(room != RoomSprites)
        script_execute(SaveCharCard);//saves the current location
        room = tempRoom;//reloads the room
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

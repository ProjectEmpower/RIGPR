<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tempRoom = room;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>i_d = ds_map_find_value(async_load,"id");

//AddnormalCardBack
if(room == RoomSprites)
if(i_d == ButtonAddNormalCardBack.CardBack)
{
    ButtonAddNormalCardBack.CardBackF = get_open_filename("PNG|*.png", "");//opens the file
    spriteName = "NormalCardBack"
    global.normalCardBack = sprite_add(ButtonAddNormalCardBack.CardBackF,1,false,true,0,0)
    if(ButtonAddNormalCardBack.CardBackF != "")
    {    
        if(sprite_get_width(global.normalCardBack) == 256 and sprite_get_height(global.normalCardBack) == 424)
        {
            ButtonAddNormalCardBack.InfoBack = show_message_async("Please select the Regular Info Card background, must be 256x424."); 
        }
        else
        {
            sprite_delete(global.normalCardBack)
            show_message_async("Failed to upload card background, must be 256x424.");
            ButtonAddNormalCardBack.CardBackF = ""
        }
    }
    else
    {
        show_message_async("Card background failed to upload.");
        ButtonAddNormalCardBack.CardBackF = ""
    }
}
if(room == RoomSprites)
if(i_d == ButtonAddNormalCardBack.InfoBack)
{

    ButtonAddNormalCardBack.InfoBackF = get_open_filename("PNG|*.png", "");//opens the file
    spriteName = "NormalInfoCardBack"
    global.normalInfoCardBack = sprite_add(ButtonAddNormalCardBack.InfoBackF,1,false,true,0,0)
        if(ButtonAddNormalCardBack.InfoBackF != "")
        {
            if(sprite_get_width(global.normalInfoCardBack) == 256 and sprite_get_height(global.normalInfoCardBack) == 424)
            {
                show_message_async("Card backgrounds added."); 
                 ButtonAddNormalCardBack.CardBackF = ""
                 ButtonAddNormalCardBack.InfoBackF = ""
            }
            else
            {
                sprite_delete(global.normalCardBack)
                sprite_delete(global.normalInfoCardBack)
                show_message_async("Failed to upload card backgrounds, must be 256x424.");
                 ButtonAddNormalCardBack.CardBackF = ""
                 ButtonAddNormalCardBack.InfoBackF = ""
            }
        }
        else
        {
            show_message_async("Card background failed to upload.");
             ButtonAddNormalCardBack.CardBackF = ""
             ButtonAddNormalCardBack.InfoBackF = ""
        }
}

if(room == RoomSprites)
if(ButtonAddNormalCardBack.CardBackF != "" and ButtonAddNormalCardBack.InfoBackF != "")
{
    spriteName = "NormalCardBack"
    sprite_set_offset(global.normalCardBack,sprite_get_width(global.normalCardBack)/2,sprite_get_height(global.normalCardBack)/2);
    saveLoc = sprite_save_strip(global.normalCardBack, "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
    spriteName = "NormalInfoCardBack"
    sprite_set_offset(global.normalInfoCardBack,sprite_get_width(global.normalInfoCardBack)/2,sprite_get_height(global.normalInfoCardBack)/2);
    saveLoc = sprite_save_strip(global.normalInfoCardBack, "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
    global.normalCardBacking = 1;
    ini_open(global.editorINI);//opens the editorINI
    ini_write_real("General","Normal Card Back",global.normalCardBacking);
    ini_close();//closes the ini
    global.tempCardBackMythStatus = 0;
        room = tempRoom; //swaps room   
    
}

//addmap
if(room == RoomMap)
if(i_d == ButtonAddMap.Map)
{
    ButtonAddMap.MapF = get_open_filename("PNG|*.png", "");//opens the file
    if(ButtonAddMap.MapF != "")
    {
       show_message_async("New map uploaded. Please wait, this may take a few seconds to take effect depending ont he map size."); 
        MapF = ""
    }
    else
    {
        show_message_async("Map failed to upload");
        MapF = ""
    }       
}
if(room == RoomMap)
if(ButtonAddMap.MapF != "")
{
    spriteName = "Map"
    global.MapBack = background_add(ButtonAddMap.MapF,0,0);
    background_save(global.MapBack , "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
         
    room_set_background(RoomMap, 0, 1, 0, global.MapBack, 0, 0, 1, 1, 0, 0, 1);
    global.MapBacking = 1;
    ini_open(global.editorINI);//opens the editorINI
    ini_write_real("General","Map Background",global.MapBacking);
    ini_close();//closes the ini
    room = tempRoom; //swaps room   
}

//addcardbackmythical
if(room == RoomSprites)
if(i_d == ButtonAddMythicalCardBack.CardBack)
{    
    ButtonAddMythicalCardBack.CardBackF = get_open_filename("PNG|*.png", "");//opens the file
    spriteName = "MythCardBack"
    global.mythCardBack = sprite_add(ButtonAddMythicalCardBack.CardBackF,1,false,true,0,0);

    if(ButtonAddMythicalCardBack.CardBackF != "")
    {
        if(sprite_get_width(global.mythCardBack) == 256 and sprite_get_height(global.mythCardBack) == 424)
        {
            ButtonAddMythicalCardBack.InfoBack = show_message_async("Please select the Mythical Info card background, must be 256x424.");

        } 
        else
        {
            sprite_delete(global.mythCardBack)
            show_message_async("Failed to upload card background, must be 256x424.");
            ButtonAddMythicalCardBack.CardBackF = ""
        }
    }
    else
    {
        show_message_async("Card background failed to upload.");
        ButtonAddMythicalCardBack.CardBackF = ""
    }


}
if(room == RoomSprites)
if(i_d == ButtonAddMythicalCardBack.InfoBack)
{

    ButtonAddMythicalCardBack.InfoBackF = get_open_filename("PNG|*.png", "");//opens the file
    spriteName = "MythInfoCardBack"
    global.mythInfoCardBack = sprite_add(ButtonAddMythicalCardBack.InfoBackF,1,false,true,0,0)

    if(ButtonAddMythicalCardBack.InfoBackF != "")
    {    
        if(sprite_get_width(global.mythCardBack) == 256 and sprite_get_height(global.mythCardBack) == 424)
        {
           show_message_async("Card backgrounds added."); 
            ButtonAddMythicalCardBack.CardBackF = "" 
            ButtonAddMythicalCardBack.InfoBackF = ""             
        }
        else
        {
            sprite_delete(global.mythCardBack)
            sprite_delete(global.mythInfoCardBack)
            show_message_async("Failed to upload card backgrounds, must be 256x424.");
            ButtonAddMythicalCardBack.CardBackF = "" 
            ButtonAddMythicalCardBack.InfoBackF = ""   
        }
    }
    else
    {
        show_message_async("Card background failed to upload.");
            ButtonAddMythicalCardBack.CardBackF = "" 
            ButtonAddMythicalCardBack.InfoBackF = ""   
    }
}
if(room == RoomSprites)
if(ButtonAddMythicalCardBack.CardBackF != "" and ButtonAddMythicalCardBack.InfoBackF != "")
{
    spriteName = "MythCardBack"
    sprite_set_offset(global.mythCardBack,sprite_get_width(global.mythCardBack)/2,sprite_get_height(global.mythCardBack)/2);
    saveLoc = sprite_save_strip(global.mythCardBack, "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
    ButtonAddMythicalCardBack.CardBack = "";//sets the open file to blank
    
    spriteName = "MythInfoCardBack"
    sprite_set_offset(global.mythInfoCardBack,sprite_get_width(global.mythInfoCardBack)/2,sprite_get_height(global.mythInfoCardBack)/2);
    saveLoc = sprite_save_strip(global.mythInfoCardBack, "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
    ButtonAddMythicalCardBack.InfoBack = "";//sets the open file to blank

    global.mythCardBacking = 1;
    ini_open(global.editorINI);//opens the editorINI
    ini_write_real("General","Myth Card Back",global.mythCardBacking);
    ini_close();//closes the ini    
    global.tempCardBackMythStatus = 1;
    room = RoomSprites;//reloads the room
}


/*
if(room == RoomCardEdit or room == RoomSprites)
if(i_d == CardImage)
{    
    pass = false;

    CardImageF = get_open_filename("PNG|*.png", "");//opens the file
    if(CardImageF != "")
    {    
        if(global.RoomState == 0)
        {
            spriteName = "EventCardSprite"+string(global.totalEventCardSprites);
            global.eventCardSpriteArray[global.totalEventCardSprites] = sprite_add(CardImageF,1,false,true,0,0)
            if(sprite_get_width(global.eventCardSpriteArray[global.totalEventCardSprites]) == 208 and sprite_get_height(global.eventCardSpriteArray[global.totalEventCardSprites]) == 160)
                pass = true;   
        } 
        if(global.RoomState == 1)
        {
            spriteName = "ActionCardSprite"+string(global.totalActionCardSprites);
            global.actionCardSpriteArray[global.totalActionCardSprites]= sprite_add(CardImageF,1,false,true,0,0)
            if(sprite_get_width(global.actionCardSpriteArray[global.totalActionCardSprites]) == 208 and sprite_get_height(global.actionCardSpriteArray[global.totalActionCardSprites]) == 160)
                pass = true;  
        }
        if(global.RoomState == 2)
        {
            spriteName = "ConsCardSprite"+string(global.totalConsCardSprites);
            global.consCardSpriteArray[global.totalConsCardSprites]= sprite_add(CardImageF,1,false,true,0,0)
            if(sprite_get_width(global.consCardSpriteArray[global.totalConsCardSprites]) == 208 and sprite_get_height(global.consCardSpriteArray[global.totalConsCardSprites]) == 160)
                pass = true;  
        }
        if(global.RoomState == 4)
        {
            spriteName = "CharCardSprite"+string(global.totalCharCardSprites);
            global.charCardSpriteArray[global.totalCharCardSprites]= sprite_add(CardImageF,1,false,true,0,0)
            if(sprite_get_width(global.charCardSpriteArray[global.totalCharCardSprites]) == 208 and sprite_get_height(global.charCardSpriteArray[global.totalCharCardSprites]) == 160)
                pass = true;    
        }
        if(pass == true)
           show_message_async("Card art added."); 
       else
       {
        show_message_async("Card art failed to upload, must be 208x160."); 
            if(global.RoomState == 0)
                sprite_delete(global.eventCardSpriteArray[global.totalEventCardSprites]);
            if(global.RoomState == 1)
                sprite_delete(global.actionCardSpriteArray[global.totalActionCardSprites]);
            if(global.RoomState == 2)
                sprite_delete(global.consCardSpriteArray[global.totalConsCardSprites]);
            if(global.RoomState == 4)
                sprite_delete(global.charCardSpriteArray[global.totalCharCardSprites]);
            CardImage = "";
            CardImageF = "";
;
                
       }
    }
    else
    {
        show_message_async("Card art failed to upload.");
    }
}
if(room == RoomCardEdit or RoomSprites)
if(CardImageF != "")
{
    if(global.RoomState == 0)
    {
        spriteName = "EventCardSprite"+string(global.totalEventCardSprites);
        sprite_set_offset(global.eventCardSpriteArray[global.totalEventCardSprites],sprite_get_width(global.eventCardSpriteArray[global.totalEventCardSprites])/2,sprite_get_height(global.eventCardSpriteArray[global.totalEventCardSprites])/2);
        saveLoc = sprite_save_strip(global.eventCardSpriteArray[global.totalEventCardSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalEventCardSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Event Card Sprites", global.totalEventCardSprites);
        ini_close();//closes the ini
        CardImage = "";//sets the open file to blank
        global.cardSprite = global.totalEventCardSprites-1;
        if(room != RoomSprites)
            script_execute(SaveEventCard);//saves the current location
    }
    if(global.RoomState == 1)
    {
        spriteName = "ActionCardSprite"+string(global.totalActionCardSprites);
        sprite_set_offset(global.actionCardSpriteArray[global.totalActionCardSprites],sprite_get_width(global.actionCardSpriteArray[global.totalActionCardSprites])/2,sprite_get_height(global.actionCardSpriteArray[global.totalActionCardSprites])/2);
        saveLoc = sprite_save_strip(global.actionCardSpriteArray[global.totalActionCardSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalActionCardSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Action Card Sprites", global.totalActionCardSprites);
        ini_close();//closes the ini
        CardImage = "";//sets the open file to blank
        global.cardSprite = global.totalActionCardSprites-1;
                if(room != RoomSprites)
        script_execute(SaveActionCard);//saves the current location
    }
    if(global.RoomState == 2)
    {
        spriteName = "ConsCardSprite"+string(global.totalConsCardSprites);
        sprite_set_offset(global.consCardSpriteArray[global.totalConsCardSprites],sprite_get_width(global.consCardSpriteArray[global.totalConsCardSprites])/2,sprite_get_height(global.consCardSpriteArray[global.totalConsCardSprites])/2);
        saveLoc = sprite_save_strip(global.consCardSpriteArray[global.totalConsCardSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalConsCardSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Cons Card Sprites", global.totalConsCardSprites);
        ini_close();//closes the ini
        CardImage = "";//sets the open file to blank
        global.cardSprite = global.totalConsCardSprites-1;
                if(room != RoomSprites)
        script_execute(SaveConsCard);//saves the current location
    
    }
    if(global.RoomState == 4)
    {
        spriteName = "CharCardSprite"+string(global.totalCharCardSprites);
        sprite_set_offset(global.charCardSpriteArray[global.totalCharCardSprites],sprite_get_width(global.charCardSpriteArray[global.totalCharCardSprites])/2,sprite_get_height(global.charCardSpriteArray[global.totalCharCardSprites])/2);
        saveLoc = sprite_save_strip(global.charCardSpriteArray[global.totalCharCardSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalCharCardSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Char Card Sprites", global.totalCharCardSprites);
        ini_close();//closes the ini
        CardImage = "";//sets the open file to blank
        global.cardSprite = global.totalCharCardSprites-1;
                if(room != RoomSprites)
        script_execute(SaveCharCard);//saves the current location
    }
}*/
if(room == RoomSprites or room == RoomCardEdit)
if(i_d == ButtonAddCardSprite.CardImage)
{    
    pass = false;

    ButtonAddCardSprite.CardImageF = get_open_filename("PNG|*.png", "");//opens the file
    if(ButtonAddCardSprite.CardImageF != "")
    {    
        if(global.RoomState == 0)
        {
            spriteName = "EventCardSprite"+string(global.totalEventCardSprites);
            global.eventCardSpriteArray[global.totalEventCardSprites] = sprite_add(ButtonAddCardSprite.CardImageF,1,false,true,0,0)
            if(sprite_get_width(global.eventCardSpriteArray[global.totalEventCardSprites]) == 208 and sprite_get_height(global.eventCardSpriteArray[global.totalEventCardSprites]) == 160)
                pass = true;   
        } 
        if(global.RoomState == 1)
        {
            spriteName = "ActionCardSprite"+string(global.totalActionCardSprites);
            global.actionCardSpriteArray[global.totalActionCardSprites]= sprite_add(ButtonAddCardSprite.CardImageF,1,false,true,0,0)
            if(sprite_get_width(global.actionCardSpriteArray[global.totalActionCardSprites]) == 208 and sprite_get_height(global.actionCardSpriteArray[global.totalActionCardSprites]) == 160)
                pass = true;  
        }
        if(global.RoomState == 2)
        {
            spriteName = "ConsCardSprite"+string(global.totalConsCardSprites);
            global.consCardSpriteArray[global.totalConsCardSprites]= sprite_add(ButtonAddCardSprite.CardImageF,1,false,true,0,0)
            if(sprite_get_width(global.consCardSpriteArray[global.totalConsCardSprites]) == 208 and sprite_get_height(global.consCardSpriteArray[global.totalConsCardSprites]) == 160)
                pass = true;  
        }
        if(global.RoomState == 4)
        {
            spriteName = "CharCardSprite"+string(global.totalCharCardSprites);
            global.charCardSpriteArray[global.totalCharCardSprites]= sprite_add(ButtonAddCardSprite.CardImageF,1,false,true,0,0)
            if(sprite_get_width(global.charCardSpriteArray[global.totalCharCardSprites]) == 208 and sprite_get_height(global.charCardSpriteArray[global.totalCharCardSprites]) == 160)
                pass = true;    
        }
        if(pass == true)
        {
           show_message_async("Card art added."); 
       }
       else
       {
            show_message_async("358Card art failed to upload, must be 208x160."); 
            if(global.RoomState == 0)
                sprite_delete(global.eventCardSpriteArray[global.totalEventCardSprites]);
            if(global.RoomState == 1)
                sprite_delete(global.actionCardSpriteArray[global.totalActionCardSprites]);
            if(global.RoomState == 2)
                sprite_delete(global.consCardSpriteArray[global.totalConsCardSprites]);
            if(global.RoomState == 4)
                sprite_delete(global.charCardSpriteArray[global.totalCharCardSprites]);
            ButtonAddCardSprite.CardImageF = ""

                
       }
    }
    else
    {
        show_message_async("Card art failed to upload.");
        ButtonAddCardSprite.CardImageF = ""
    }
}
if(room == RoomSprites or room == RoomCardEdit)
if(ButtonAddCardSprite.CardImageF != "")
{
    if(global.RoomState == 0)
    {
        spriteName = "EventCardSprite"+string(global.totalEventCardSprites);
        sprite_set_offset(global.eventCardSpriteArray[global.totalEventCardSprites],sprite_get_width(global.eventCardSpriteArray[global.totalEventCardSprites])/2,sprite_get_height(global.eventCardSpriteArray[global.totalEventCardSprites])/2);
        saveLoc = sprite_save_strip(global.eventCardSpriteArray[global.totalEventCardSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalEventCardSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Event Card Sprites", global.totalEventCardSprites);
        ini_close();//closes the ini
        global.cardSprite = global.totalEventCardSprites-1;
        if(room != RoomSprites)
            script_execute(SaveEventCard);//saves the current location
    }
    if(global.RoomState == 1)
    {
        spriteName = "ActionCardSprite"+string(global.totalActionCardSprites);
        sprite_set_offset(global.actionCardSpriteArray[global.totalActionCardSprites],sprite_get_width(global.actionCardSpriteArray[global.totalActionCardSprites])/2,sprite_get_height(global.actionCardSpriteArray[global.totalActionCardSprites])/2);
        saveLoc = sprite_save_strip(global.actionCardSpriteArray[global.totalActionCardSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalActionCardSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Action Card Sprites", global.totalActionCardSprites);
        ini_close();//closes the ini
        global.cardSprite = global.totalActionCardSprites-1;
                if(room != RoomSprites)
        script_execute(SaveActionCard);//saves the current location
    }
    if(global.RoomState == 2)
    {
        spriteName = "ConsCardSprite"+string(global.totalConsCardSprites);
        sprite_set_offset(global.consCardSpriteArray[global.totalConsCardSprites],sprite_get_width(global.consCardSpriteArray[global.totalConsCardSprites])/2,sprite_get_height(global.consCardSpriteArray[global.totalConsCardSprites])/2);
        saveLoc = sprite_save_strip(global.consCardSpriteArray[global.totalConsCardSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalConsCardSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Cons Card Sprites", global.totalConsCardSprites);
        ini_close();//closes the ini
        global.cardSprite = global.totalConsCardSprites-1;
                if(room != RoomSprites)
        script_execute(SaveConsCard);//saves the current location
    
    }
    if(global.RoomState == 4)
    {
        spriteName = "CharCardSprite"+string(global.totalCharCardSprites);
        sprite_set_offset(global.charCardSpriteArray[global.totalCharCardSprites],sprite_get_width(global.charCardSpriteArray[global.totalCharCardSprites])/2,sprite_get_height(global.charCardSpriteArray[global.totalCharCardSprites])/2);
        saveLoc = sprite_save_strip(global.charCardSpriteArray[global.totalCharCardSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalCharCardSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Char Card Sprites", global.totalCharCardSprites);
        ini_close();//closes the ini
        global.cardSprite = global.totalCharCardSprites-1;
                if(room != RoomSprites)
        script_execute(SaveCharCard);//saves the current location
    }
    room = tempRoom; //swaps room   
}

/*
if(room == RoomBackgrounds or room == RoomLocationAdd)
if(i_d == ButtonAddLocationBackground.Background)
{
    ButtonAddLocationBackground.BackgroundF = get_open_filename("PNG|*.png", "");//opens the file
    spriteName = "LocBack"+string(global.totalLocationBackgrounds);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
    global.locationBGArray[global.totalLocationBackgrounds] = background_add(ButtonAddLocationBackground.BackgroundF,0,0);   

    if(ButtonAddLocationBackground.BackgroundF != "")//if it finds a file, do this
    {
        if((background_get_width(global.locationBGArray[global.totalLocationBackgrounds]) == 1920 and background_get_height(global.locationBGArray[global.totalLocationBackgrounds]) == 1080) or (background_get_width(global.locationBGArray[global.totalLocationBackgrounds]) == 1280  and background_get_height(global.locationBGArray[global.totalLocationBackgrounds]) == 720))
        {
            show_message_async("Background uploaded");
        }
        else
        {
            show_message_async("Background failed to upload, backgrounds must either be 1920x1080 or 1280x720.");
            background_delete(global.locationBGArray[global.totalLocationBackgrounds])
            ButtonAddLocationBackground.BackgroundF = ""
            ButtonAddLocationBackground.Background = ""
        }
    }
    else
    {
        show_message_async("You did not upload a background.");
    }

}
if(room == RoomBackgrounds or room == RoomLocationAdd)
if(ButtonAddLocationBackground.BackgroundF != "")
{ 
    spriteName = "LocBack"+string(global.totalLocationBackgrounds);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
    background_save(global.locationBGArray[global.totalLocationBackgrounds], "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
    room_set_background(tempRoom, 0, 1, 0, global.locationBGArray[global.totalLocationBackgrounds], 0, 0, 0, 0, 0, 0, 1); 
    Background = "";
    global.BGRef = global.totalLocationBackgrounds;
    global.totalLocationBackgrounds += 1;
    ini_open(global.editorINI)
    ini_write_real("General","Location Backgrounds",global.totalLocationBackgrounds);
    ini_close();
    room = tempRoom;
            
}*/

//General Background Add - Splash
if(room == RoomMenu)
if(i_d == ButtonAddBackground.BackgroundS)
{
    ButtonAddBackground.BackgroundFS = get_open_filename("PNG|*.png", "");//opens the file
    spriteName = "SplashBackground"
    global.MenuBG = background_add(ButtonAddBackground.BackgroundFS,0,0);
    if(ButtonAddBackground.BackgroundFS != "")//if it finds a file, do this
    {        
        if((background_get_width(global.MenuBG) == 1920 and background_get_height(global.MenuBG) == 1080) or (background_get_width(global.MenuBG) == 1280  and background_get_height(global.MenuBG) == 720))
        {
            ButtonAddBackground.BackgroundN = show_message_async("Please select a 'Click to Start' splash background"); 

        }
        else
        {
            show_message_async("Background failed to upload, backgrounds must either be 1920x1080 or 1280x720.");
            background_delete(global.MenuBG)
            ButtonAddBackground.BackgroundN = "";
            ButtonAddBackground.BackgroundS = "";
        }   
    }
    else
    {
        show_message_async("Splash backgrounds failed to uploaded.");
        ButtonAddBackground.BackgroundN = "";
        ButtonAddBackground.BackgroundS = "";
    } 
}

//General Background Add - Splash
if(room == RoomMenu)
if(i_d == ButtonAddBackground.BackgroundN)
{

    ButtonAddBackground.BackgroundFN = get_open_filename("PNG|*.png", "");//opens the file
    spriteName = "SplashClickBackground"
    global.MenuClickBG = background_add(ButtonAddBackground.BackgroundFN,0,0);

        if(ButtonAddBackground.BackgroundFN != "")
        {
            if((background_get_width(global.MenuClickBG) == 1920 and background_get_height(global.MenuClickBG) == 1080) or (background_get_width(global.MenuClickBG) == 1280  and background_get_height(global.MenuClickBG) == 720))
            {
                show_message_async("Splash backgrounds uploaded.");     
                    ButtonAddBackground.BackgroundN = "";
                    ButtonAddBackground.BackgroundS = "";
            }
            else
            {
                show_message_async("Background failed to upload, backgrounds must either be 1920x1080 or 1280x720.");
                background_delete(global.MenuClickBG)


                background_delete(global.MenuBG)
                    ButtonAddBackground.BackgroundN = "";
                    ButtonAddBackground.BackgroundS = "";
            }  
        }
        else
        {
            show_message_async("Splash backgrounds failed to uploaded.");
                    ButtonAddBackground.BackgroundN = "";
                    ButtonAddBackground.BackgroundS = "";
            
        }

}

//General Background Add - Splash
if(room == RoomMenu)
if(ButtonAddBackground.BackgroundFN != "")
{    
    spriteName = "SplashBackground"
    background_save(global.MenuBG , "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
    room_set_background(RoomMenu, 1, 1, 0, global.MenuBG, 0, 0, 0, 0, 0, 0, 1);
    
    spriteName = "SplashClickBackground"
    background_save(global.MenuClickBG , "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
    room_set_background(RoomMenu, 0, 1, 0, global.MenuClickBG, 0, 0, 0, 0, 0, 0, 1);
    global.MenuBGing = 1;

    
}  

//General Background Add - Most
if(room == RoomCharacter or room == RoomPlayerMenu or room == RoomDiary or room == RoomNewGame or room == RoomCards)
if(i_d == ButtonAddBackground.Background)
{

    pass = false;
    ButtonAddBackground.BackgroundF = get_open_filename("PNG|*.png", "");//opens the file
    if(ButtonAddBackground.BackgroundF != "")    
    {
        if(room == RoomCharacter)
        {        
            spriteName = "CharacterBackground"
            global.CharacterBG = background_add(ButtonAddBackground.BackgroundF,0,0);
            if((background_get_width(global.CharacterBG) == 1920 and background_get_height(global.CharacterBG) == 1080) or (background_get_width(global.CharacterBG) == 1280  and background_get_height(global.CharacterBG) == 720))
                pass = true;       
        }
        if(room == RoomPlayerMenu)
        {
            spriteName = "MenuBackground"
            global.PlayerMenuBG = background_add(ButtonAddBackground.BackgroundF,0,0);
            if((background_get_width(global.PlayerMenuBG) == 1920 and background_get_height(global.PlayerMenuBG) == 1080) or (background_get_width(global.PlayerMenuBG) == 1280  and background_get_height(global.PlayerMenuBG) == 720))
                pass = true;       
        }
        if(room == RoomDiary)
        {
            spriteName = "DiaryBackground"
            global.DiaryBG = background_add(ButtonAddBackground.BackgroundF,0,0);
            if((background_get_width(global.DiaryBG) == 1920 and background_get_height(global.DiaryBG) == 1080) or (background_get_width(global.DiaryBG) == 1280  and background_get_height(global.DiaryBG) == 720))
                pass = true;   
        }
        if(room == RoomNewGame)
        {
            spriteName = "NewGameBackground"
            global.NewGBG = background_add(ButtonAddBackground.BackgroundF,0,0);
            if((background_get_width(global.NewGBG) == 1920 and background_get_height(global.NewGBG) == 1080) or (background_get_width(global.NewGBG) == 1280  and background_get_height(global.NewGBG) == 720))
                pass = true;  
        }                 
        if(room == RoomCards)
        {
            if(global.RoomState == -1)
            {
                spriteName = "CardsBackground"
                global.CardsBG = background_add(ButtonAddBackground.BackgroundF,0,0);
                if((background_get_width(global.CardsBG) == 1920 and background_get_height(global.CardsBG) == 1080) or (background_get_width(global.CardsBG) == 1280  and background_get_height(global.CardsBG) == 720))
                    pass = true;    
            }
            if(global.RoomState == 0)
            {
                spriteName = "EventCardBackground"
                global.EventCardBG = background_add(ButtonAddBackground.BackgroundF,0,0);
                if((background_get_width(global.EventCardBG) == 1920 and background_get_height(global.EventCardBG) == 1080) or (background_get_width(global.EventCardBG) == 1280  and background_get_height(global.EventCardBG) == 720))
                    pass = true;   
            } 
            if(global.RoomState == 1)
            {
                spriteName = "ActionCardBackground"
                global.ActionCardBG = background_add(ButtonAddBackground.BackgroundF,0,0); 
                if((background_get_width(global.ActionCardBG) == 1920 and background_get_height(global.ActionCardBG) == 1080) or (background_get_width(global.ActionCardBG) == 1280  and background_get_height(global.ActionCardBG) == 720))
                    pass = true;   
            }
            if(global.RoomState == 2)
            {
                spriteName = "ConsCardBackground"
                global.ConsCardBG = background_add(ButtonAddBackground.BackgroundF,0,0);
                if((background_get_width(global.ConsCardBG) == 1920 and background_get_height(global.ConsCardBG) == 1080) or (background_get_width(global.ConsCardBG) == 1280  and background_get_height(global.ConsCardBG) == 720))
                    pass = true;   
            }
            if(global.RoomState == 3)
            {
                spriteName = "InfoCardBackground"
                global.InfoCardBG = background_add(ButtonAddBackground.BackgroundF,0,0);
                if((background_get_width(global.InfoCardBG) == 1920 and background_get_height(global.InfoCardBG) == 1080) or (background_get_width(global.InfoCardBG) == 1280  and background_get_height(global.InfoCardBG) == 720))
                    pass = true;   
            }
            if(global.RoomState == 4)
            {
                spriteName = "CharCardBackground"
                global.CharCardBG = background_add(ButtonAddBackground.BackgroundF,0,0);
                if((background_get_width(global.CharCardBG) == 1920 and background_get_height(global.CharCardBG) == 1080) or (background_get_width(global.CharCardBG) == 1280  and background_get_height(global.CharCardBG) == 720))
                    pass = true;   
            }
        }   
        if(pass == true)
        {
            show_message_async("Background uploaded."); 
           ButtonAddBackground.Background = "";
        }
        else
        {
            show_message_async("Background failed to upload, backgrounds must either be 1920x1080 or 1280x720.");
            if(room == RoomCharacter)
                background_delete(global.CharacterBG)
            if(room == RoomPlayerMenu)
                background_delete(global.PlayerMenuBG)
            if(room == RoomDiary)
                background_delete(global.DiaryBG)
            if(room == RoomNewGame)
                background_delete(global.NewGBG)
            if(room == RoomCards and global.RoomState == -1)
                background_delete(global.CardsBG)
            if(room == RoomCards and global.RoomState == 0)
                background_delete(global.EventCardBG)
            if(room == RoomCards and global.RoomState == 1)
                background_delete(global.ActionCardBG)
            if(room == RoomCards and global.RoomState == 2)
                background_delete(global.ConsCardBG)
            if(room == RoomCards and global.RoomState == 3)
                background_delete(global.InfoCardBG)
            if(room == RoomCards and global.RoomState == 4)
                background_delete(global.CharCardBG)
            ButtonAddBackground.Background = "";               

        }
    }
   else
    {
        show_message_async("Background failed to uploaded.");
       ButtonAddBackground.Background = "";
    }
}
 
//General Background Add - Most
if(room == RoomCharacter or room == RoomPlayerMenu or room == RoomDiary or room == RoomNewGame or room == RoomCards)
if(ButtonAddBackground.BackgroundF != "")
{
    if(room == RoomCharacter)
    {   
        spriteName = "CharacterBackground"     
        background_save(global.CharacterBG , "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
        global.CharacterBGing = 1;
        room_set_background(RoomCharacter, 0, 1, 0, global.CharacterBG, 0, 0, 0, 0, 0, 0, 1);
        global.CharacterBG = "";

    }
    if(room == RoomPlayerMenu)
    {        
        spriteName = "MenuBackground"
        background_save(global.PlayerMenuBG , "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
        global.PlayerMenuBGing = 1;
        room_set_background(RoomPlayerMenu, 0, 1, 0, global.PlayerMenuBG, 0, 0, 0, 0, 0, 0, 1);
        global.PlayerMenuBG = "";

    }
    if(room == RoomDiary)
    {        
        spriteName = "DiaryBackground"
        background_save(global.DiaryBG , "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
        global.DiaryBGing = 1;
        room_set_background(RoomDiary, 0, 1, 0, global.DiaryBG, 0, 0, 0, 0, 0, 0, 1);
        global.DiaryBG = "";

    }
    if(room == RoomNewGame)
    {
        spriteName = "NewGameBackground"
        background_save(global.NewGBG , "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
        global.NewGBGing = 1;
        room_set_background(RoomNewGame, 0, 1, 0, global.NewGBG, 0, 0, 0, 0, 0, 0, 1);
        global.NewGBG = "";

    }
    if(room == RoomCards)
    {
        if(global.RoomState == -1)
        {            
            spriteName = "CardsBackground"
            background_save(global.CardsBG , "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
            global.CardsBGing = 1;
            room_set_background(RoomCards, 0, 1, 0, global.CardsBG, 0, 0, 0, 0, 0, 0, 1);
            global.CardsBG = "";

        }

        if(global.RoomState == 0)
        {
            spriteName = "EventCardBackground"
            background_save( global.EventCardBG, "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
            global.EventCardBGing = 1;   
            room_set_background(RoomCards, 1, 1, 0, global.EventCardBG, 0, 0, 0, 0, 0, 0, 1);
            room_set_background(RoomCardEdit, 0, 1, 0, global.EventCardBG, 0, 0, 0, 0, 0, 0, 1);
            room_set_background(RoomCardDeck, 0, 1, 0, global.EventCardBG, 0, 0, 0, 0, 0, 0, 1);
            
         global.EventCardBG = "";

        }   
        if(global.RoomState == 1)
        {            
            spriteName = "ActionCardBackground"
            background_save(global.ActionCardBG, "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
            global.ActionCardBGing = 1;
            room_set_background(RoomCards, 2, 1, 0, global.ActionCardBG, 0, 0, 0, 0, 0, 0, 1);
            room_set_background(RoomCardEdit, 1, 1, 0, global.ActionCardBG, 0, 0, 0, 0, 0, 0, 1);
            room_set_background(RoomCardDeck, 1, 1, 0, global.ActionCardBG, 0, 0, 0, 0, 0, 0, 1);
            global.ActionCardBG = "";

        }     
        if(global.RoomState == 2)
        {
            spriteName = "ConsCardBackground"
            background_save(global.ConsCardBG, "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
            global.ConsCardBGing = 1;    
            room_set_background(RoomCards, 3, 1, 0, global.ConsCardBG, 0, 0, 0, 0, 0, 0, 1);
            room_set_background(RoomCardEdit, 2, 1, 0, global.ConsCardBG, 0, 0, 0, 0, 0, 0, 1);
            room_set_background(RoomCardDeck, 2, 1, 0, global.ConsCardBG, 0, 0, 0, 0, 0, 0, 1);
            global.ConsCardBG = "";

        }   
        if(global.RoomState == 3)
        {
            spriteName = "InfoCardBackground"
                        background_save(global.InfoCardBG, "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
            global.InfoCardBGing = 1;

            room_set_background(RoomCards, 4, 1, 0, global.InfoCardBG, 0, 0, 0, 0, 0, 0, 1);
             room_set_background(RoomCardEdit, 3, 1, 0, global.InfoCardBG, 0, 0, 0, 0, 0, 0, 1);
            room_set_background(RoomCardDeck, 3, 1, 0, global.InfoCardBG, 0, 0, 0, 0, 0, 0, 1);
         global.InfoCardBG = "";

        }   
        if(global.RoomState == 4)
        {
            spriteName = "CharCardBackground"
                        background_save(global.CharCardBG, "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
            global.CharCardBGing = 1;

            room_set_background(RoomCards, 5, 1, 0, global.CharCardBG, 0, 0, 0, 0, 0, 0, 1);
             room_set_background(RoomCardEdit, 4, 1, 0, global.CharCardBG, 0, 0, 0, 0, 0, 0, 1);
            room_set_background(RoomCardDeck, 4, 1, 0, global.CharCardBG, 0, 0, 0, 0, 0, 0, 1);
         global.CharCardBG = "";

        }   
    }  
}

//Location Background Add
if(room == RoomLocationAdd or room == RoomBackgrounds)
if(i_d == ButtonAddLocationBackground.Background)
{
    ButtonAddLocationBackground.BackgroundF = get_open_filename("PNG|*.png", "");//opens the file
    spriteName = "LocBack"+string(global.totalLocationBackgrounds);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
    global.locationBGArray[global.totalLocationBackgrounds] = background_add(ButtonAddLocationBackground.BackgroundF,0,0);   

    if(ButtonAddLocationBackground.BackgroundF != "")//if it finds a file, do this
    {        
        if((background_get_width(global.locationBGArray[global.totalLocationBackgrounds]) == 1920 and background_get_height(global.locationBGArray[global.totalLocationBackgrounds]) == 1080) or (background_get_width(global.locationBGArray[global.totalLocationBackgrounds]) == 1280  and background_get_height(global.locationBGArray[global.totalLocationBackgrounds]) == 720))
        {
            show_message_async("Background uploaded");

        }
        else
        {
            show_message_async("Background failed to upload, background's must either be 1920x1080 or 1280x720.");
            background_delete(global.locationBGArray[global.totalLocationBackgrounds])

        }
    }
    else
    {
        show_message_async("Failed to upload Background.");

    }

}
//Location Background Add
if(room == RoomLocationAdd or room == RoomBackgrounds)
if(ButtonAddLocationBackground.BackgroundF != "")
{  
    spriteName = "LocBack"+string(global.totalLocationBackgrounds);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
    background_save(global.locationBGArray[global.totalLocationBackgrounds], "editor_files/BG/"+spriteName+".png");//saves the sprite to the editor files
    room_set_background(tempRoom, 0, 1, 0, global.locationBGArray[global.totalLocationBackgrounds], 0, 0, 0, 0, 0, 0, 1); 
    global.BGRef = global.totalLocationBackgrounds;
    if(room != RoomBackgrounds)
        script_execute(SaveLocation);
    global.totalLocationBackgrounds += 1;
    ini_open(global.editorINI)
    ini_write_real("General","Location Backgrounds",global.totalLocationBackgrounds);
    ini_close();
    room = tempRoom; //swaps room   
}
//Building Sprite Add
if(room == RoomLocationAdd or room == RoomSprites)
if(i_d == ButtonAddBuildingSprite.inputN)
{
    ButtonAddBuildingSprite.fileN = get_open_filename("PNG|*.png", "");//opens the file
    spriteName = "BuildingSpriteN"+string(global.totalNormBuildingSprites);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
    global.normBuildingArray[global.totalNormBuildingSprites] = sprite_add(ButtonAddBuildingSprite.fileN,1,false,true,0,0);//creates the sprite using image above

    if(ButtonAddBuildingSprite.fileN != "")//if it finds a file, do this
    {    
        if(sprite_get_width(global.normBuildingArray[global.totalNormBuildingSprites]) == 128 and sprite_get_height(global.normBuildingArray[global.totalNormBuildingSprites]) == 128)
        {
            ButtonAddBuildingSprite.inputM = show_message_async("Please select Mythical Building's image to upload.");
        }
        else
        {
            show_message_async("Image failed to upload, building's must be 128x128.");
            sprite_delete(global.normBuildingArray[global.totalNormBuildingSprites]);
            ButtonAddBuildingSprite.fileN = ""
    
        }
    }
    else
    {
        show_message_async("Failed to upload Building Image.");
        ButtonAddBuildingSprite.fileN = ""
    }

    
}
//Building Sprite Add
if(room == RoomLocationAdd or room == RoomSprites)
if(i_d == ButtonAddBuildingSprite.inputM)
{
    ButtonAddBuildingSprite.fileM = get_open_filename("PNG|*.png", "");//opens the file
    spriteName = "BuildingSpriteM"+string(global.totalMythBuildingSprites);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
    global.mythBuildingArray[global.totalMythBuildingSprites] = sprite_add(ButtonAddBuildingSprite.fileM,1,false,true,0,0);//creates the sprite using image above     

    if(ButtonAddBuildingSprite.fileM != "")//if it finds a file, do this
    {
        if(sprite_get_width(global.mythBuildingArray[global.totalMythBuildingSprites]) == 128 and sprite_get_height(global.mythBuildingArray[global.totalMythBuildingSprites]) == 128)
        {
            ButtonAddBuildingSprite.inputB = show_message_async("Please select the Both Regular and Mythical building's image that you wish to upload.");
        }
        else
        {
            show_message_async("Image failed to upload, building's must be 128x128.");
            sprite_delete(global.normBuildingArray[global.totalNormBuildingSprites]);
            sprite_delete(global.mythBuildingArray[global.totalMythBuildingSprites]);
            ButtonAddBuildingSprite.fileN = ""
            ButtonAddBuildingSprite.fileM = ""
        }   
    }
    else
    {
        show_message_async("Failed to upload Building Image.");
        ButtonAddBuildingSprite.fileN = ""
        ButtonAddBuildingSprite.fileM = ""
    }
 
}
//Building Sprite Add
if(room == RoomLocationAdd or room == RoomSprites)
if(i_d == ButtonAddBuildingSprite.inputB)
{
    ButtonAddBuildingSprite.fileB = get_open_filename("PNG|*.png", "");//opens the file
    spriteName = "BuildingSpriteB"+string(global.totalBothBuildingSprites);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
    global.bothBuildingArray[global.totalBothBuildingSprites] = sprite_add(ButtonAddBuildingSprite.fileB,1,false,true,0,0);//creates the sprite using image above       

    if(ButtonAddBuildingSprite.fileB != "")//if it finds a file, do this
    {    
        if(sprite_get_width(global.bothBuildingArray[global.totalBothBuildingSprites]) == 128 and sprite_get_height(global.bothBuildingArray[global.totalBothBuildingSprites]) == 128)
        {
            show_message_async("Sprite set added successfully.");
        }
        else
        {
            show_message_async("Image failed to upload, building's must be 128x128.");
            sprite_delete(global.normBuildingArray[global.totalNormBuildingSprites]);
            sprite_delete(global.mythBuildingArray[global.totalMythBuildingSprites]);
            sprite_delete(global.bothBuildingArray[global.totalBothBuildingSprites]);
            ButtonAddBuildingSprite.fileN = ""
            ButtonAddBuildingSprite.fileM = ""
            ButtonAddBuildingSprite.fileB = ""
        }    
    }
    else
    {
        show_message_async("You did not select both map's building's image to upload.");
        ButtonAddBuildingSprite.fileN = ""
        ButtonAddBuildingSprite.fileM = ""
        ButtonAddBuildingSprite.fileB = ""
    }   

}
//Building Sprite Add
if(room == RoomLocationAdd or room == RoomSprites)
if(ButtonAddBuildingSprite.fileN != "" and ButtonAddBuildingSprite.fileM != "" and ButtonAddBuildingSprite.fileB != "")
{
        spriteName = "BuildingSpriteN"+string(global.totalNormBuildingSprites);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
        sprite_set_offset(global.normBuildingArray[global.totalNormBuildingSprites],sprite_get_width(global.normBuildingArray[global.totalNormBuildingSprites])/2,sprite_get_height(global.normBuildingArray[global.totalNormBuildingSprites])/2)
        saveLoc = sprite_save_strip(global.normBuildingArray[global.totalNormBuildingSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalNormBuildingSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Norm Building Sprites", global.totalNormBuildingSprites);
        ini_close();//closes the ini

        
        spriteName = "BuildingSpriteM"+string(global.totalMythBuildingSprites);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
        sprite_set_offset(global.mythBuildingArray[global.totalMythBuildingSprites],sprite_get_width(global.mythBuildingArray[global.totalMythBuildingSprites])/2,sprite_get_height(global.mythBuildingArray[global.totalMythBuildingSprites])/2)
        saveLoc = sprite_save_strip(global.mythBuildingArray[global.totalMythBuildingSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalMythBuildingSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Myth Building Sprites", global.totalMythBuildingSprites);
        ini_close();//closes the ini

        
        spriteName = "BuildingSpriteB"+string(global.totalBothBuildingSprites);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)          
        sprite_set_offset(global.bothBuildingArray[global.totalBothBuildingSprites],sprite_get_width(global.bothBuildingArray[global.totalBothBuildingSprites])/2,sprite_get_height(global.bothBuildingArray[global.totalBothBuildingSprites])/2)
        saveLoc = sprite_save_strip(global.bothBuildingArray[global.totalBothBuildingSprites], "editor_files/sprites/"+spriteName+".png");//saves the sprite to the editor files
        global.totalBothBuildingSprites += 1;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General", "Both Building Sprites", global.totalBothBuildingSprites);
        ini_close();//closes the ini
        
        global.buildingSprite = global.totalNormBuildingSprites-1;
        if(room != RoomSprites)
            script_execute(SaveLocation);//saves the current location
        room = tempRoom; //swaps room   

}
//Delete Location
if(room == RoomLocationAdd)
if(i_d == ButtonDeleteLocation.DeleteLocation)
{
    if ds_map_find_value(async_load, "status")
    {
        ini_open(global.locationINI); //opens the ini file
        ini_section_delete(global.tempLocation);//deletes the current location
        ini_close();
        for(i = global.tempNum; i &lt; global.TotalInstanceNum; i++)
        {
            currRef = string(i)//sets currRef to the current loop iteration in string format
            locationName = "Location"+currRef//writes "Location#loopREF#" to a variable
            nextI = i+1; //next in loop
            nextRef = string(nextI); //sets nextref to the next loop iteration in string format
            NextLocationName = "Location"+nextRef; //writes "location#nextRef#" to a variable
            
            ini_open(global.locationINI); //opens the ini file   
            if(ini_section_exists(NextLocationName)==true and ini_section_exists(locationName)==false) //checks that the next item in the list exists, and the current doesnt
            {
                //reads all relevent info from the next location
                tempX = ini_read_real(NextLocationName,"X",0);
                tempY = ini_read_real(NextLocationName,"Y",0);
                tempMyth = ini_read_real(NextLocationName,"Mythical",0);
                tempRealName = ini_read_string(NextLocationName,"Real Location Name",0);
                tempDesc = ini_read_string(NextLocationName,"Description",0);
                tempNumEvents = ini_read_real(NextLocationName,"Number of Events",0);
                for(e = 0; e &lt; tempNumEvents; e++)
                {
                    eventRef= string(e); //sets the currRef variable to a string of the global TotalInstanceNumber, this is the number of instances currently used
                    eventNameType = "Event"+eventRef+"Type"; //this sets lcoation name to "location#REF#"
                    eventNameWeek = "Event"+eventRef+"Week";
                    eventNameMyth = "Event"+eventRef+"Mythical";
                    tempEventType[e] = ini_read_real(NextLocationName,eventNameType,0);
                    tempEventWeek[e] = ini_read_real(NextLocationName,eventNameWeek,0);
                    tempEventMyth[e] = ini_read_real(NextLocationName,eventNameMyth,0);
                    
                }
                //writes the info to the current Location
                ini_write_real(locationName,"NumRef",i); //sets NumRef inside the ini file (used for comparing instances later)       
                ini_write_real(locationName,"X",tempX); //X pos
                ini_write_real(locationName,"Y",tempY); //Y pos
                ini_write_real(locationName,"Mythical",tempMyth);//Current mythical state (0,1)
                ini_write_string(locationName,"Real Location Name",tempRealName)
                ini_write_string(locationName,"Description",tempDesc)
                ini_write_real(locationName,"Number of Events",tempNumEvents); //Y pos
                for(e = 0; e &lt; tempNumEvents; e++)
                {
                    eventRef= string(e); //sets the currRef variable to a string of the global TotalInstanceNumber, this is the number of instances currently used
                    eventNameType = "Event"+eventRef+"Type"; //this sets lcoation name to "location#REF#"
                    eventNameWeek = "Event"+eventRef+"Week";
                    eventNameMyth = "Event"+eventRef+"Mythical";
                    ini_write_real(locationName, eventNameType, tempEventType[e]);
                    ini_write_real(locationName, eventNameWeek, tempEventWeek[e]);
                    ini_write_real(locationName, eventNameMyth, tempEventMyth[e]);
                }
                ini_section_delete(NextLocationName); //deletes the next location
                ini_close(); //closes the ini file 



            }                
            global.TotalInstanceNum -= 1; //after running, this will decrease the total instance number by 1
            tempLocDel = show_message_async("Location Deleted.");

          room = RoomMap; //swaps room   
        }       

    }

}
//Delete Building Sprite
if(room == RoomSprites or room == RoomLocationAdd)
if(i_d == DeleteCurrentSprite.BuildDel)
{
    if ds_map_find_value(async_load, "status")
    {
        for(i = global.buildingSprite; i &lt; global.totalBothBuildingSprites; i++)
        {
            file_delete("editor_files/sprites/BuildingSpriteN"+string(i)+".png");
            sprite_delete("BuildingSpriteN"+string(i)+".png");
            file_delete("editor_files/sprites/BuildingSpriteM"+string(i)+".png");
            sprite_delete("BuildingSpriteM"+string(i)+".png");
            file_delete("editor_files/sprites/BuildingSpriteB"+string(i)+".png");
            sprite_delete("BuildingSpriteB"+string(i)+".png");
            if(!sprite_exists("BuildingSpriteN"+string(i)+".png") and file_exists("editor_files/sprites/BuildingSpriteN"+string(i+1)+".png"))
            {
        
                file_rename("editor_files/sprites/BuildingSpriteN"+string(i+1)+".png","editor_files/sprites/BuildingSpriteN"+string(i)+".png");
                global.normBuildingArray[i] = sprite_add("editor_files/sprites/BuildingSpriteN"+string(i)+".png",1,false,true,0,0);//creates the sprite using image above
                sprite_set_offset(global.normBuildingArray[i],sprite_get_width(global.normBuildingArray[i])/2,sprite_get_height(global.normBuildingArray[i])/2)
                sprite_delete("BuildingSpriteN"+string(i+1)+".png");
                    
                file_rename("editor_files/sprites/BuildingSpriteM"+string(i+1)+".png","editor_files/sprites/BuildingSpriteM"+string(i)+".png");
                global.mythBuildingArray[i] = sprite_add("editor_files/sprites/BuildingSpriteM"+string(i)+".png",1,false,true,0,0);//creates the sprite using image above
                sprite_set_offset(global.mythBuildingArray[i],sprite_get_width(global.mythBuildingArray[i])/2,sprite_get_height(global.mythBuildingArray[i])/2)
                sprite_delete("BuildingSpriteM"+string(i+1)+".png");
                    
                file_rename("editor_files/sprites/BuildingSpriteB"+string(i+1)+".png","editor_files/sprites/BuildingSpriteB"+string(i)+".png");
                global.bothBuildingArray[i] = sprite_add("editor_files/sprites/BuildingSpriteB"+string(i)+".png",1,false,true,0,0);//creates the sprite using image above
                sprite_set_offset(global.bothBuildingArray[i],sprite_get_width(global.bothBuildingArray[i])/2,sprite_get_height(global.bothBuildingArray[i])/2)
                sprite_delete("BuildingSpriteB"+string(i+1)+".png");
            }
        }
        for(i = 0; i &lt; global.TotalInstanceNum; i++)
        {
            ini_open(global.locationINI);
            LocationName = "Location"+string(i);
            tempRef = ini_read_real(LocationName,"SpriteRef",-1);
            if(tempRef == global.buildingSprite)
            {
                tempRef = -1;
                ini_write_real(LocationName,"SpriteRef", tempRef);
            }
            if(tempRef &gt; global.buildingSprite)
            {
                tempRef -= 1;
                ini_write_real(LocationName,"SpriteRef", tempRef);
            }
            ini_close();
            
        }
        ini_open(global.locationINI);
        LocationName = "LocationT";
        tempRef = ini_read_real(LocationName,"SpriteRef",-1);
        if(tempRef == global.buildingSprite)
        {
            tempRef = -1;
            ini_write_real(LocationName,"SpriteRef", tempRef);
        }
        if(tempRef &gt; global.buildingSprite)
        {
            tempRef -= 1;
            ini_write_real(LocationName,"SpriteRef", tempRef);
        }
        ini_close();
        global.buildingSprite = -1;
        global.totalNormBuildingSprites -= 1;
        global.totalMythBuildingSprites -= 1;
        global.totalBothBuildingSprites -= 1;
    
        ini_open(global.editorINI);
        ini_write_real("General", "Norm Building Sprites", global.totalNormBuildingSprites);
        ini_write_real("General", "Myth Building Sprites", global.totalMythBuildingSprites);
        ini_write_real("General", "Both Building Sprites", global.totalBothBuildingSprites);
        ini_close();
        room = tempRoom
    }
}
//Delete Card
if(room == RoomCardEdit)
if(i_d == DeleteCard.msgDelCard)
{
    if ds_map_find_value(async_load, "status")
    {
        if(global.RoomState == 0)
        {

            ini_open(global.cardEventINI)
            ini_section_delete(global.eventName);
            ini_close()
            for(i = global.eventRef; i &lt; global.totalEventCards; i++)
            {
                ini_open(global.cardEventINI)
                tempEventName = "Event"+string(i)
                tempNextEventName = "Event"+string(i+1)
                if(ini_section_exists(tempNextEventName) and !ini_section_exists(tempEventName))
                {
                    tempName = ini_read_string(tempNextEventName,"Event Name",0);
                    tempText = ini_read_string(tempNextEventName,"Event Text",0);
                    tempInt = ini_read_real(tempNextEventName,"Int",0);
                    tempChar = ini_read_real(tempNextEventName,"Char",0);
                    tempWell = ini_read_real(tempNextEventName,"Well",0);
                    tempMyth = ini_read_real(tempNextEventName,"Mythical",0);
                    tempSprite = ini_read_real(tempNextEventName,"Sprite",-1);
                    tempInfoCard = ini_read_real(tempNextEventName,"Info Cards",0);
                    tempCharCard = ini_read_real(tempNextEventName,"Char Cards",0);
                    tempActionNum = ini_read_real(tempNextEventName,"Action Cards",0);
                    tempAction[tempActionNum] = 0;
                    for(t = 0; t &lt;= tempActionNum; t++)
                    {
                        tempActionName = "Action"+string(t+1);
                        tempAction[t] = ini_read_real(tempNextEventName,tempActionName,0);
                    }
                    ini_write_real(tempEventName,"Ref",i);
                    ini_write_string(tempEventName,"Event Name",tempName);
                    ini_write_string(tempEventName,"Event Text",tempText);
                    ini_write_real(tempEventName,"Int",tempInt);
                    ini_write_real(tempEventName,"Char",tempChar);
                    ini_write_real(tempEventName,"Well",tempWell);
                    ini_write_real(tempEventName,"Mythical",tempMyth);
                    ini_write_real(tempEventName,"Sprite",tempSprite);
                    ini_write_real(tempEventName,"Info Cards",tempInfoCard);
                    ini_write_real(tempEventName,"Char Cards",tempCharCard);
                    ini_write_real(tempEventName,"Action Cards",tempActionNum);
                    for(t = 0; t &lt;= tempActionNum; t++)
                    {
                        tempActionName = "Action"+string(t+1);
                         ini_write_real(tempEventName,tempActionName,tempAction[t]);
                    }
                    ini_section_delete(tempNextEventName);
                    ini_close(); //closes the ini file       
                }
            }
            global.totalEventCards -= 1; //after running, this will decrease the total instance number by 1
            if(global.totalEventCards == 0)
                tempRoom = RoomCardDeck;

        
        }
        if(global.RoomState == 1)
        {

            ini_open(global.cardActionINI)
            ini_section_delete(global.cardName);
            ini_close()
            for(i = global.cardRef; i &lt; global.totalActionCards; i++)
            {
                ini_open(global.cardActionINI)
                tempName = "Action"+string(i)
                tempNextName = "Action"+string(i+1)
                if(ini_section_exists(tempNextName) and !ini_section_exists(tempName))
                {
                    tempCName = ini_read_string(tempNextName,"Card Name",0);
                    tempText = ini_read_string(tempNextName,"Card Text",0);
                    tempMyth = ini_read_real(tempNextName,"Mythical",0);
                    tempSprite = ini_read_real(tempNextName,"Sprite",-1);
                    tempInfoCard = ini_read_real(tempNextName,"Info Cards",0);
                    tempConsCard = ini_read_real(tempNextName,"Cons Cards",0);
        
                    ini_write_real(tempName,"Ref",i);
                    ini_write_string(tempName,"Card Name",tempCName);
                    ini_write_string(tempName,"Card Text",tempText);
                    ini_write_real(tempName,"Mythical",tempMyth);
                    ini_write_real(tempName,"Sprite",tempSprite);
                    ini_write_real(tempName,"Info Cards",tempInfoCard);
                    ini_write_real(tempName,"Cons Cards",tempConsCard);
        
                    ini_section_delete(tempNextName);
                    ini_close(); //closes the ini file       
                }
            }
            global.totalActionCards -= 1;
            if(global.totalActionCards == 0)
                tempRoom = RoomCardDeck;
            
        
        }
        if(global.RoomState == 2)
        {
   
            ini_open(global.cardConsINI)
            ini_section_delete(global.consName);
            ini_close()
            for(i = global.consCardRef; i &lt; global.totalConsCards; i++)
            {
                ini_open(global.cardConsINI)
                tempName = "Cons"+string(i)
                tempNextName = "Cons"+string(i+1)
                if(ini_section_exists(tempNextName) and !ini_section_exists(tempName))
                {
                    tempCName = ini_read_string(tempNextName,"Card Name",0);
                    tempText = ini_read_string(tempNextName,"Card Text",0);
                    tempInt = ini_read_real(tempNextName,"Int",0);
                    tempChar = ini_read_real(tempNextName,"Char",0);
                    tempWell = ini_read_real(tempNextName,"Well",0);
                    tempSprite = ini_read_real(tempNextName,"Sprite",-1);
                    tempInfoCard = ini_read_real(tempNextName,"Info Cards",0);
        
                    ini_write_real(tempName,"Ref",i);
                    ini_write_string(tempName,"Card Name",tempCName);
                    ini_write_string(tempName,"Card Text",tempText);
                    ini_write_real(tempName,"Int",tempInt);
                    ini_write_real(tempName,"Char",tempChar);
                    ini_write_real(tempName,"Well",tempWell);
        
                    ini_write_real(tempName,"Sprite",tempSprite);
                    ini_write_real(tempName,"Info Cards",tempInfoCard);
        
                    ini_section_delete(tempNextName);
                    ini_close(); //closes the ini file       
                }
            }
            global.totalConsCards -= 1;
            if(global.totalConsCards == 0)
                tempRoom = RoomCardDeck;

        
        }
        if(global.RoomState == 3)
        {

            ini_open(global.cardInfoINI)
            ini_section_delete(global.infoName);
            ini_close()
            for(i = global.infoCardRef; i &lt; global.totalInfoCards; i++)
            {
                ini_open(global.cardInfoINI)
                tempName = "Info"+string(i)
                tempNextName = "Info"+string(i+1)
                if(ini_section_exists(tempNextName) and !ini_section_exists(tempName))
                {
                    tempCName = ini_read_string(tempNextName,"Card Name",0);
                    tempText = ini_read_string(tempNextName,"Card Text",0);
                    tempSprite = ini_read_real(tempNextName,"Sprite",-1);
                    tempLink = ini_read_string(tempNextName,"Link","");
        
                    ini_write_real(tempName,"Ref",i);
                    ini_write_string(tempName,"Card Name",tempCName);
                    ini_write_string(tempName,"Card Text",tempText);
        
                    ini_write_real(tempName,"Sprite",tempSprite);
                    ini_write_string(tempName,"Link",tempLink);
        
                    ini_section_delete(tempNextName);
                    ini_close(); //closes the ini file       
                }
            }
            global.totalInfoCards -= 1;
            if(global.totalInfoCards == 0)
                tempRoom = RoomCardDeck;
        
        }
        if(global.RoomState == 4)
        {

            ini_open(global.cardCharINI)
            ini_section_delete(global.charName);
            ini_close()
            for(i = global.charCardRef; i &lt; global.totalCharCards; i++)
            {
                ini_open(global.cardCharINI)
                tempName = "Char"+string(i)
                tempNextName = "Char"+string(i+1)
                if(ini_section_exists(tempNextName) and !ini_section_exists(tempName))
                {
                    tempCName = ini_read_string(tempNextName,"Card Name",0);
                    tempText = ini_read_string(tempNextName,"Card Text",0);
        
                    tempSprite = ini_read_real(tempNextName,"Sprite",-1);
                    tempInfoCard = ini_read_real(tempNextName,"Info Cards",0);
        
                    ini_write_real(tempName,"Ref",i);
                    ini_write_string(tempName,"Card Name",tempCName);
                    ini_write_string(tempName,"Card Text",tempText);
        
        
                    ini_write_real(tempName,"Sprite",tempSprite);
                    ini_write_real(tempName,"Info Cards",tempInfoCard);
        
                    ini_section_delete(tempNextName);
                    ini_close(); //closes the ini file       
                }
            }
            global.totalCharCards -= 1;
            if(global.totalCharCards == 0)
                tempRoom = RoomCardDeck;
        }
        room = tempRoom
    }
    
}
//Delete Card Sprite
if(room == RoomSprites)
if(i_d = DeleteCurrentCardsprite.deleteCardArt)
{
    if ds_map_find_value(async_load, "status")
    {
        if(global.RoomState == 0 and global.totalEventCardSprites &gt; 0 and global.cardSprite != -1)
        {
            for(i = global.cardSprite; i &lt; global.totalEventCardSprites; i++)
            {
                file_delete("editor_files/sprites/EventCardSprite"+string(i)+".png");
                sprite_delete("EventCardSprite"+string(i)+".png");
                if(!sprite_exists("EventCardSprite"+string(i)+".png") and file_exists("editor_files/sprites/EventCardSprite"+string(i+1)+".png"))
                {
                    file_rename("editor_files/sprites/EventCardSprite"+string(i+1)+".png","editor_files/sprites/EventCardSprite"+string(i)+".png");
                    global.eventCardSpriteArray[i] = sprite_add("editor_files/sprites/EventCardSprite"+string(i)+".png",1,false,true,0,0);//creates the sprite using image above
                    sprite_set_offset(global.eventCardSpriteArray[i],sprite_get_width(global.eventCardSpriteArray[i])/2,sprite_get_height(global.eventCardSpriteArray[i])/2)
                    sprite_delete("EventCardSprite"+string(i+1)+".png");
                }
            }
            for(i = 1; i &lt;= global.totalEventCards; i++)
            {
                ini_open(global.cardEventINI);
                cardName = "Event"+string(i);
                tempRef = ini_read_real(cardName,"Sprite",-1);
                if(tempRef == global.cardSprite)
                {
                    tempRef = -1;
                    ini_write_real(cardName,"Sprite", tempRef);
                }
                if(tempRef &gt; global.cardSprite)
                {
                    tempRef -= 1;
                    ini_write_real(cardName,"Sprite", tempRef);
                }
                ini_close();
        
            }
                global.cardSprite = -1;
                global.totalEventCardSprites -= 1;
                ini_open(global.editorINI);
                ini_write_real("General", "Event Card Sprites", global.totalEventCardSprites);
                ini_close();
        }
        if(global.RoomState == 1 and global.totalActionCardSprites &gt; 0 and global.cardSprite != -1)
        {
            for(i = global.cardSprite; i &lt; global.totalActionCardSprites; i++)
            {
                file_delete("editor_files/sprites/ActionCardSprite"+string(i)+".png");
                sprite_delete("ActionCardSprite"+string(i)+".png");
                if(!sprite_exists("ActionCardSprite"+string(i)+".png") and file_exists("editor_files/sprites/ActionCardSprite"+string(i+1)+".png"))
                {
                    file_rename("editor_files/sprites/ActionCardSprite"+string(i+1)+".png","editor_files/sprites/ActionCardSprite"+string(i)+".png");
                    global.actionCardSpriteArray[i] = sprite_add("editor_files/sprites/ActionCardSprite"+string(i)+".png",1,false,true,0,0);//creates the sprite using image above
                    sprite_set_offset(global.actionCardSpriteArray[i],sprite_get_width(global.actionCardSpriteArray[i])/2,sprite_get_height(global.actionCardSpriteArray[i])/2)
                    sprite_delete("ActionCardSprite"+string(i+1)+".png");
                }
            }
            for(i = 1; i &lt;= global.totalActionCards; i++)
            {
                ini_open(global.cardActionINI);
                cardName = "Action"+string(i);
                tempRef = ini_read_real(cardName,"Sprite",-1);
                if(tempRef == global.cardSprite)
                {
                    tempRef = -1;
                    ini_write_real(cardName,"Sprite", tempRef);
                }
                if(tempRef &gt; global.cardSprite)
                {
                    tempRef -= 1;
                    ini_write_real(cardName,"Sprite", tempRef);
                }
                    ini_close();
            }
        
                global.cardSprite = -1;
                global.totalActionCardSprites -= 1;
                ini_open(global.editorINI);
                ini_write_real("General", "Action Card Sprites", global.totalActionCardSprites);
                ini_close();
        }
        if(global.RoomState == 2 and global.totalConsCardSprites &gt; 0 and global.cardSprite != -1)
        {
            for(i = global.cardSprite; i &lt; global.totalConsCardSprites; i++)
            {
                file_delete("editor_files/sprites/ConsCardSprite"+string(i)+".png");
                sprite_delete("ConsCardSprite"+string(i)+".png");
                if(!sprite_exists("ConsCardSprite"+string(i)+".png") and file_exists("editor_files/sprites/ConsCardSprite"+string(i+1)+".png"))
                {
                    file_rename("editor_files/sprites/ConsCardSprite"+string(i+1)+".png","editor_files/sprites/ConsCardSprite"+string(i)+".png");
                    global.consCardSpriteArray[i] = sprite_add("editor_files/sprites/ConsCardSprite"+string(i)+".png",1,false,true,0,0);//creates the sprite using image above
                    sprite_set_offset(global.consCardSpriteArray[i],sprite_get_width(global.consCardSpriteArray[i])/2,sprite_get_height(global.consCardSpriteArray[i])/2)
                    sprite_delete("ConsCardSprite"+string(i+1)+".png");
                }
            }
            for(i = 1; i &lt;= global.totalConsCards; i++)
            {
                ini_open(global.cardConsINI);
                cardName = "Cons"+string(i);
                tempRef = ini_read_real(cardName,"Sprite",-1);
                if(tempRef == global.cardSprite)
                {
                    tempRef = -1;
                    ini_write_real(cardName,"Sprite", tempRef);
                }
                if(tempRef &gt; global.cardSprite)
                {
                    tempRef -= 1;
                    ini_write_real(cardName,"Sprite", tempRef);
                }
            }
        }
        room = tempRoom
    }

}
/*

if(i_d = DeleteCurrentCardsprite.deleteCardArt)
{
    if ds_map_find_value(async_load, "status")
    {
        if(global.RoomState == 0 and global.totalEventCardSprites &gt; 0 and global.cardSprite != -1)
        {
            for(i = global.cardSprite; i &lt; global.totalEventCardSprites; i++)
            {
                file_delete("editor_files/sprites/EventCardSprite"+string(i)+".png");
                sprite_delete("EventCardSprite"+string(i)+".png");
                if(!sprite_exists("EventCardSprite"+string(i)+".png") and file_exists("editor_files/sprites/EventCardSprite"+string(i+1)+".png"))
                {
                    file_rename("editor_files/sprites/EventCardSprite"+string(i+1)+".png","editor_files/sprites/EventCardSprite"+string(i)+".png");
                    global.eventCardSpriteArray[i] = sprite_add("editor_files/sprites/EventCardSprite"+string(i)+".png",1,false,true,0,0);//creates the sprite using image above
                    sprite_set_offset(global.eventCardSpriteArray[i],sprite_get_width(global.eventCardSpriteArray[i])/2,sprite_get_height(global.eventCardSpriteArray[i])/2)
                    sprite_delete("EventCardSprite"+string(i+1)+".png");
                }
            }
            for(i = 1; i &lt;= global.totalEventCards; i++)
            {
                ini_open(global.cardEventINI);
                cardName = "Event"+string(i);
                tempRef = ini_read_real(cardName,"Sprite",-1);
                if(tempRef == global.cardSprite)
                {
                    tempRef = -1;
                    ini_write_real(cardName,"Sprite", tempRef);
                }
                if(tempRef &gt; global.cardSprite)
                {
                    tempRef -= 1;
                    ini_write_real(cardName,"Sprite", tempRef);
                }
                ini_close();
        
            }
                global.cardSprite = -1;
                global.totalEventCardSprites -= 1;
                ini_open(global.editorINI);
                ini_write_real("General", "Event Card Sprites", global.totalEventCardSprites);
                ini_close();
        }
        if(global.RoomState == 1 and global.totalActionCardSprites &gt; 0 and global.cardSprite != -1)
        {
            for(i = global.cardSprite; i &lt; global.totalActionCardSprites; i++)
            {
                file_delete("editor_files/sprites/ActionCardSprite"+string(i)+".png");
                sprite_delete("ActionCardSprite"+string(i)+".png");
                if(!sprite_exists("ActionCardSprite"+string(i)+".png") and file_exists("editor_files/sprites/ActionCardSprite"+string(i+1)+".png"))
                {
                    file_rename("editor_files/sprites/ActionCardSprite"+string(i+1)+".png","editor_files/sprites/ActionCardSprite"+string(i)+".png");
                    global.actionCardSpriteArray[i] = sprite_add("editor_files/sprites/ActionCardSprite"+string(i)+".png",1,false,true,0,0);//creates the sprite using image above
                    sprite_set_offset(global.actionCardSpriteArray[i],sprite_get_width(global.actionCardSpriteArray[i])/2,sprite_get_height(global.actionCardSpriteArray[i])/2)
                    sprite_delete("ActionCardSprite"+string(i+1)+".png");
                }
            }
            for(i = 1; i &lt;= global.totalActionCards; i++)
            {
                ini_open(global.cardActionINI);
                cardName = "Action"+string(i);
                tempRef = ini_read_real(cardName,"Sprite",-1);
                if(tempRef == global.cardSprite)
                {
                    tempRef = -1;
                    ini_write_real(cardName,"Sprite", tempRef);
                }
                if(tempRef &gt; global.cardSprite)
                {
                    tempRef -= 1;
                    ini_write_real(cardName,"Sprite", tempRef);
                }
                    ini_close();
            }
        
                global.cardSprite = -1;
                global.totalActionCardSprites -= 1;
                ini_open(global.editorINI);
                ini_write_real("General", "Action Card Sprites", global.totalActionCardSprites);
                ini_close();
        }
        if(global.RoomState == 2 and global.totalConsCardSprites &gt; 0 and global.cardSprite != -1)
        {
            for(i = global.cardSprite; i &lt; global.totalConsCardSprites; i++)
            {
                file_delete("editor_files/sprites/ConsCardSprite"+string(i)+".png");
                sprite_delete("ConsCardSprite"+string(i)+".png");
                if(!sprite_exists("ConsCardSprite"+string(i)+".png") and file_exists("editor_files/sprites/ConsCardSprite"+string(i+1)+".png"))
                {
                    file_rename("editor_files/sprites/ConsCardSprite"+string(i+1)+".png","editor_files/sprites/ConsCardSprite"+string(i)+".png");
                    global.consCardSpriteArray[i] = sprite_add("editor_files/sprites/ConsCardSprite"+string(i)+".png",1,false,true,0,0);//creates the sprite using image above
                    sprite_set_offset(global.consCardSpriteArray[i],sprite_get_width(global.consCardSpriteArray[i])/2,sprite_get_height(global.consCardSpriteArray[i])/2)
                    sprite_delete("ConsCardSprite"+string(i+1)+".png");
                }
            }
            for(i = 1; i &lt;= global.totalConsCards; i++)
            {
                ini_open(global.cardConsINI);
                cardName = "Cons"+string(i);
                tempRef = ini_read_real(cardName,"Sprite",-1);
                if(tempRef == global.cardSprite)
                {
                    tempRef = -1;
                    ini_write_real(cardName,"Sprite", tempRef);
                }
                if(tempRef &gt; global.cardSprite)
                {
                    tempRef -= 1;
                    ini_write_real(cardName,"Sprite", tempRef);
                }
            }
        }
        DeleteCurrentCardsprite.deleteCardArt = "";
    }
}*/
//Delete Mythical Card Back
if(room == RoomSprites)
if(i_d == ButtonDeleteMythCardBack.CardBack)
{
    if ds_map_find_value(async_load, "status")
    {
        file_delete("editor_files/sprites/MythCardBack.png");
        file_delete("editor_files/sprites/MythInfoCardBack.png");
        global.mythCardBacking = 0;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General","Myth Card Back",global.mythCardBacking);
        ini_close();//closes the ini
        global.tempCardBackMythStatus = 1;
        show_message_async("File deleted"); 
        room = tempRoom
    }
}
//Delete Normal Card Back
if(room == RoomSprites)
if(i_d == ButtonDeleteNormalCardBack.CardBack)
{
    if ds_map_find_value(async_load, "status")
    {
        file_delete("editor_files/sprites/NormalCardBack.png");
        file_delete("editor_files/sprites/NormalInfoCardBack.png");
        global.normalCardBacking = 0;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General","Normal Card Back",global.normalCardBacking);
        ini_close();//closes the ini
        global.tempCardBackMythStatus = 0;
        show_message_async("Card Background deleted."); 
        room = tempRoom
    }
}
//Delete Map
if(room == RoomMap)
if(i_d == DeleteMap.Map)
{
    if ds_map_find_value(async_load, "status")
    {
        file_delete("editor_files/sprites/Map.png");
        global.MapBacking = 0;
        ini_open(global.editorINI);//opens the editorINI
        ini_write_real("General","Map Background",global.MapBacking);
        ini_close();//closes the ini
        room_set_background(RoomMap, 0, 1, 0, NewMapBackground, 0, 0, 1, 1, 0, 0, 1);
        show_message_async("File deleted"); 
        room = RoomMap
    }

}
if(room == RoomBackgrounds)
if(i_d == ButtonDelLocationBackground.LocDel)
{
    if ds_map_find_value(async_load, "status")
    {
        for(i = global.BGRef; i &lt;= global.totalLocationBackgrounds; i++)
        {
            spriteName = "LocBack"+string(i);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
            spriteNextName = "LocBack"+string(i+1);//set the sprite name to be Usersprite + numberOftotalSprites(next sprite)
        
            file_delete("editor_files/BG/"+spriteName+".png");
            if(!file_exists("editor_files/BG/"+spriteName+".png") and file_exists("editor_files/BG/"+spriteNextName+".png"))
            {
        
                file_rename("editor_files/BG/"+spriteNextName+".png","editor_files/BG/"+spriteName+".png");
                global.locationBGArray[i] = background_add("editor_files/BG/"+spriteName+".png",0,0);
                
            }
        }
        for(i = 0; i &lt; global.TotalInstanceNum; i++)
        {
            ini_open(global.locationINI);
            LocationName = "Location"+string(i);
            tempRef = ini_read_real(LocationName,"Background",-1);
            if(tempRef == global.BGRef)
            {
                tempRef = -1;
                ini_write_real(LocationName,"Background", tempRef);
            }
            if(tempRef &gt; global.BGRef)
            {
                tempRef -= 1;
                ini_write_real(LocationName,"Background", tempRef);
            }
            ini_close();
            
        }
        ini_open(global.locationINI);
        LocationName = "LocationT";
        tempRef = ini_read_real(LocationName,"Background",-1);
        if(tempRef == global.BGRef)
        {
            tempRef = -1;
            ini_write_real(LocationName,"Background", tempRef);
        }
        if(tempRef &gt; global.BGRef)
        {
            tempRef -= 1;
            ini_write_real(LocationName,"Background", tempRef);
        }
        ini_close();
            
    
        global.totalLocationBackgrounds -= 1;
        if(global.totalLocationBackgrounds &gt; 0)
            global.BGRef-= 1
        if(global.totalLocationBackgrounds == 0)
            global.BGRef= -1       
        ini_open(global.editorINI);
        ini_write_real("General", "Location Backgrounds", global.totalLocationBackgrounds);
        ini_close();
        if(global.BGRef != -1)
            room_set_background(tempRoom, 0, 1, 0, global.locationBGArray[global.BGRef], 0, 0, 0, 0, 0, 0, 1); 
        else
        room_set_background(tempRoom, 0, 1, 0, Blank_background, 0, 0, 0, 0, 0, 0, 1);         
    }
    room = tempRoom
}
//General Background Delete
if(room == RoomCharacter or room == RoomPlayerMenu or room == RoomDiary or room == RoomNewGame or room == RoomCards or room == RoomMenu)
{
    if(room == RoomCharacter and ButtonDeleteBackground.BackgroundD != "")
    {
        if(i_d == ButtonDeleteBackground.BackgroundD)
        {
            if ds_map_find_value(async_load, "status")
            {
                file_delete("editor_files/BG/CharacterBackground.png");
                global.CharacterBGing = 0;
                room_set_background(RoomCharacter, 0, 1, 0, CharacterScreen_Background, 0, 0, 1, 1, 0, 0, 1);
                show_message_async("File deleted"); 
                    ButtonDeleteBackground.BackgroundD = "";

            }
        }

    }
    if(room == RoomNewGame and ButtonDeleteBackground.BackgroundD != "")
    {
        if(i_d == ButtonDeleteBackground.BackgroundD)
        {
            if ds_map_find_value(async_load, "status")
            {
                file_delete("editor_files/BG/NewGameBackground.png");
                global.NewGBGing = 0;
                room_set_background(RoomNewGame, 0, 1, 0, MenuBackground, 0, 0, 1, 1, 0, 0, 1);
                show_message_async("File deleted"); 
                    ButtonDeleteBackground.BackgroundD = "";

            }
        }

    }
    if(room == RoomDiary and ButtonDeleteBackground.BackgroundD != "")
    {
        if(i_d == ButtonDeleteBackground.BackgroundD)
        {
            if ds_map_find_value(async_load, "status")
            {
                file_delete("editor_files/BG/DiaryBackground.png");
                global.DiaryBGing = 0;
                room_set_background(RoomDiary, 0, 1, 0, JournalScreen_Background, 0, 0, 1, 1, 0, 0, 1);
                show_message_async("File deleted"); 
                    ButtonDeleteBackground.BackgroundD = "";

            }
        }

    }
    if(room == RoomMenu and ButtonDeleteBackground.BackgroundD != "")
    {
        if(i_d == ButtonDeleteBackground.BackgroundD)
        {
            if ds_map_find_value(async_load, "status")
            {
                background_visible[0] = true;
                background_visible[1] = false;
                file_delete("editor_files/BG/SplashBackground.png");
                file_delete("editor_files/BG/SplashClickBackground.png");
                global.MenuBGing = 0;
                room_set_background(RoomMenu, 0, 1, 0, MainMenuBackground, 0, 0, 1, 1, 0, 0, 1);
                room_set_background(RoomMenu, 1, 1, 0, MainMenuBackground, 0, 0, 1, 1, 0, 0, 1);
                show_message_async("File deleted"); 
                    ButtonDeleteBackground.BackgroundD = "";

            }
        }
    }
    if(room == RoomPlayerMenu and ButtonDeleteBackground.BackgroundD != "")
    {
        if(i_d == ButtonDeleteBackground.BackgroundD)
        {
            if ds_map_find_value(async_load, "status")
            {
                file_delete("editor_files/BG/MenuBackground.png");
                global.PlayerMenuBGing = 0;
                room_set_background(RoomPlayerMenu, 0, 1, 0, MenuBackground, 0, 0, 1, 1, 0, 0, 1);
                show_message_async("File deleted"); 
                    ButtonDeleteBackground.BackgroundD = "";
            }
        }
    }
    if(room == RoomCards and ButtonDeleteBackground.BackgroundD != "")
    {
        if(global.RoomState == -1)
        {
            if(i_d == ButtonDeleteBackground.BackgroundD)
            {
                if ds_map_find_value(async_load, "status")
                {
                    file_delete("editor_files/BG/CardsBackground.png");
                    global.CardsBGing = 0;
                    room_set_background(RoomCards, 0, 1, 0, CharacterScreen_Background, 0, 0, 1, 1, 0, 0, 1);
                show_message_async("File deleted"); 
                    ButtonDeleteBackground.BackgroundD = "";

                }
            }
        }
    
        if(global.RoomState == 0)
        {
            if(i_d == ButtonDeleteBackground.BackgroundD)
            {
                if ds_map_find_value(async_load, "status")
                {
                    file_delete("editor_files/BG/EventCardBackground.png");
                    global.EventCardBGing = 0;
                    room_set_background(RoomCards, 1, 1, 0, EventCard_Background, 0, 0, 1, 1, 0, 0, 1);
                    room_set_background(RoomCardEdit, 0, 1, 0, EventCard_Background, 0, 0, 1, 1, 0, 0, 1);
                    room_set_background(RoomCardDeck, 0, 1, 0, EventCard_Background, 0, 0, 1, 1, 0, 0, 1);
                show_message_async("File deleted"); 
                    ButtonDeleteBackground.BackgroundD = "";

                }
            }
        }   
        if(global.RoomState == 1)
        {
            if(i_d == ButtonDeleteBackground.BackgroundD)
            {
                if ds_map_find_value(async_load, "status")
                {
                   file_delete("editor_files/BG/ActionCardBackground.png");
                    global.ActionCardBGing = 0;
                    room_set_background(RoomCards, 2, 1, 0, ActionCard_Background, 0, 0, 1, 1, 0, 0, 1);
                    room_set_background(RoomCardEdit, 1, 1, 0, ActionCard_Background, 0, 0, 1, 1, 0, 0, 1);
                    room_set_background(RoomCardDeck, 1, 1, 0, ActionCard_Background, 0, 0, 1, 1, 0, 0, 1);
                show_message_async("File deleted"); 
                    ButtonDeleteBackground.BackgroundD = "";

                }
            }    
        }     
        if(global.RoomState == 2)
        {        
            if(i_d == ButtonDeleteBackground.BackgroundD)
            {
                if ds_map_find_value(async_load, "status")
                {
                    file_delete("editor_files/BG/ConsCardBackground.png");
                    global.ConsCardBGing = 0;
                    room_set_background(RoomCards, 3, 1, 0, ConsequenceCard_Background, 0, 0, 1, 1, 0, 0, 1);
                    room_set_background(RoomCardEdit, 2, 1, 0, ConsequenceCard_Background, 0, 0, 1, 1, 0, 0, 1);
                    room_set_background(RoomCardDeck, 2, 1, 0, ConsequenceCard_Background, 0, 0, 1, 1, 0, 0, 1);
                show_message_async("File deleted"); 
                    ButtonDeleteBackground.BackgroundD = "";

                }
            } 
        }  
        if(global.RoomState == 3)
        {
            if(i_d == ButtonDeleteBackground.BackgroundD)
            {
                if ds_map_find_value(async_load, "status")
                {
                    file_delete("editor_files/BG/InfoCardBackground.png");
                    global.InfoCardBGing = 0;
                    room_set_background(RoomCards, 4, 1, 0, InfoCard_Background, 0, 0, 1, 1, 0, 0, 1);
                    room_set_background(RoomCardEdit, 3, 1, 0, InfoCard_Background, 0, 0, 1, 1, 0, 0, 1);
                    room_set_background(RoomCardDeck, 3, 1, 0, InfoCard_Background, 0, 0, 1, 1, 0, 0, 1);
                show_message_async("File deleted"); 
                    ButtonDeleteBackground.BackgroundD = "";
                }
            }   
        }
        if(global.RoomState == 4)
        {        
            if(i_d == ButtonDeleteBackground.BackgroundD)
            {
                if ds_map_find_value(async_load, "status")
                {
                    file_delete("editor_files/BG/CharCardBackground.png");
                    global.CharCardBGing = 0;
                    room_set_background(RoomCards, 5, 1, 0, CharacterCard_Background, 0, 0, 1, 1, 0, 0, 1);
                    room_set_background(RoomCardEdit, 4, 1, 0, CharacterCard_Background, 0, 0, 1, 1, 0, 0, 1);
                    room_set_background(RoomCardDeck, 4, 1, 0, CharacterCard_Background, 0, 0, 1, 1, 0, 0, 1);
                show_message_async("File deleted"); 
                    ButtonDeleteBackground.BackgroundD = "";
                }
            }
        }  
    }
}    
//General Background Add - All
if(room == RoomCharacter or room == RoomPlayerMenu or room == RoomDiary or room == RoomNewGame or room == RoomCards or room == RoomMenu)
if(ButtonAddBackground.BackgroundN == "" and ButtonAddBackground.BackgroundS == "" and  ButtonAddBackground.Background == "" and ButtonDeleteBackground.BackgroundD == "")
{  
    ini_open(global.editorINI);//opens the editorINI
    ini_write_real("General","Character Background",global.CharacterBGing);
    ini_write_real("General","Diary Background",global.DiaryBGing);
    ini_write_real("General","Cards Background",global.CardsBGing);
    ini_write_real("General","Menu Background",global.MenuBGing);
    ini_write_real("General","New Game Background",global.NewGBGing);
    ini_write_real("General","Player Menu Background",global.PlayerMenuBGing);      
    ini_write_real("General","Event Cards Background",global.EventCardBGing);
    ini_write_real("General","Action Cards Background",global.ActionCardBGing);
    ini_write_real("General","Cons Cards Background",global.ConsCardBGing);
    ini_write_real("General","Info Cards Background",global.InfoCardBGing);
    ini_write_real("General","Char Cards Background",global.CharCardBGing);
    ini_close();//closes the ini
room = tempRoom
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

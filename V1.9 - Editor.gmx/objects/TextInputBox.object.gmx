<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>TextInputBoxSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>realNameTextBoxRef = global.textBoxInstanceRef;
descTextBoxRef = realNameTextBoxRef+1; //must be updated elsewhere if names are changed
thirdTextBoxRef = realNameTextBoxRef+2;
forthTextBoxRef = realNameTextBoxRef+3;
fifthTextBoxRef = realNameTextBoxRef+4;
sixthTextBoxRef = realNameTextBoxRef+5;
seventhTextBoxRef = realNameTextBoxRef+6;

image_xscale = 1.5;
if(instance_id[realNameTextBoxRef] == id)
{
    txt_input = global.realLocationName;//sets default text
    txt_display = "Location Name: ";     //sets display text
}
if(instance_id[descTextBoxRef] == id)
{
    sprite_index = TextInputBoxSprite_Large;
    txt_input = global.description;//sets default text
    txt_display = "Description: "
}
if(instance_id[thirdTextBoxRef] == id) //Currently unused, there if we need more text boses, must change textFields in TextInputBoxAddObject - Create
{
    sprite_index = No_sprite;
    txt_input = "Error - Map Visibility not updated";
    txt_display = "Map visibility: "
}
if(instance_id[forthTextBoxRef] == id)
{
    sprite_index = No_sprite;
    txt_input = global.locationEventNumber;//sets default text
    txt_display = "Number of events: "
}
if(instance_id[fifthTextBoxRef] == id)
{
    sprite_index = No_sprite;
    txt_input = "Error - Event type not updated";//sets default text
    txt_display = "Event Type: "
}
if(instance_id[sixthTextBoxRef] == id)
{
    sprite_index = TextInputBoxSprite_Small;
    txt_input = global.eventWeek;//sets default text
    txt_display = "Acvailable week: "
}
if(instance_id[seventhTextBoxRef] == id)
{
    sprite_index = No_sprite;
    txt_input = global.eventMyth;//sets default text
    txt_display = "Mythical?: "
}
myY = global.tempTextBoxY;//sets current Position (increases depending on instance)
timer = 0;
delay = 4;
textShortLength = 30;
textLongLength = 200;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.focus == id)//checks focus against the instance ID of the text boxes, this allows the select box to be the only one effected by text entry
{
    if keyboard_check_pressed(vk_anykey)
    {
        script_execute(keyStep);
        timer = -6;
    }
    if keyboard_check(vk_anykey)
    {
        if(timer == delay)
        {
            script_execute(keyStep);
            timer = 0;
        }
        if(timer &gt; delay)
        {
            timer = delay;
        }
        else if(timer &lt; delay)
        {
            timer++;
        }
    }
    if keyboard_check_released(vk_anykey)
    {
        timer = 0;
    }
}
if(id == instance_id[thirdTextBoxRef])
{
    if(global.locationEventNumber &gt; 0)
    {
        tempNormMap = 0;
        tempMythMap = 0;
        for(i = 0; i &lt; global.locationEventNumber; i++)
        {
            tempEventID = string(i);
            tempEventMyth = "Event"+tempEventID+"Mythical";
            ini_open("location.ini");
            tempMyth = ini_read_real(global.tempLocation, tempEventMyth, 3);
            ini_close();
            if(tempMyth == 0)
            {
                tempNormMap = 1;
            }
            if(tempMyth == 1)
            {
                tempMythMap = 1;
            }
            if(tempMyth == 2)
            {
                tempNormMap = 1;
                tempMythMap = 1;
            }
            if(tempMyth == 3)
            {
                txt_input = "Error - Missing mythical info2";
            }
        }
        if(tempNormMap == 1 and tempMythMap == 1)
        {
            global.locationMyth = 2;
            txt_input = "Both Maps";
        }
        if(tempNormMap == 0 and tempMythMap == 1)
        {
            global.locationMyth = 1;
            txt_input = "Mythical Map";
        }
        if(tempNormMap == 1 and tempMythMap == 0)
        {
            global.locationMyth = 0
            txt_input = "Normal Map";
        }
    }
    if(global.locationEventNumber == 0)
    {
        switch(global.locationMyth)
        {
            case 0: txt_input = "Normal Map";
            break;
            case 1: txt_input = "Mythical Map";
            break;
            case 2: txt_input = "Both Maps";
            break;
            default: txt_input = "Error - Missing mythical info";
        }
    }
}
if(id == instance_id[forthTextBoxRef])
{
    txt_input = global.locationEventNumber;
}
if(id == instance_id[fifthTextBoxRef])
{
    switch(global.eventWeek)
    {
        case 0: txt_input = "Blank Event";
        break;
        case 1: txt_input = "Test 1";
        break;
        case 2: txt_input = "Test 2";
        break;
        default: txt_input = "Error - Missing Event type";
    }
}
if(id == instance_id[seventhTextBoxRef])
{
    switch(global.eventMyth)
    {
        case 0: txt_input = "Normal event";
        break;
        case 1: txt_input = "Mythical event";
        break;
        default: txt_input = "Error - Missing event mythical info";
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.focus = id;//if the button is id, set the focus to this objects id
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_valign(fa_top);
draw_set_halign(fa_right);
draw_text(global.InputTextX ,myY ,txt_display);//Draws the input text
draw_set_halign(fa_left);
if(id != instance_id[descTextBoxRef])
{
    draw_text(global.InputBoxX , myY ,txt_input); //draws the input box text
}
else
{   
    draw_text_ext(global.InputBoxX , myY ,txt_input, 20, 300);
}
//draw_text_ext(x,y,string, seperation (between lines, go with 5), w(max width in pixels before current line breaks and starts a new line)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

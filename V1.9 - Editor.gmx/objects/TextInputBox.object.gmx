<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>TextInputBoxSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>realNameTextBoxRef = global.textBoxInstanceRef;
descTextBoxRef = realNameTextBoxRef+1; //must be updated elsewhere if names are changed
thirdTextBoxRef = realNameTextBoxRef+2;
forthTextBoxRef = realNameTextBoxRef+3;
fifthTextBoxRef = realNameTextBoxRef+4;
sixthTextBoxRef = realNameTextBoxRef+5;
seventhTextBoxRef = realNameTextBoxRef+6;
timer = 0;
delay = 4;
textShortLength = 30;
textLongLength = 200;
image_xscale = 1.5;
if(room == RoomLocationAdd)
{    
    if(instance_id[realNameTextBoxRef] == id)
    {
        txt_input = global.realLocationName;//sets default text
        txt_display = "Location Name: ";     //sets display text
    }
    if(instance_id[descTextBoxRef] == id)
    {
        sprite_index = TextInputBoxSprite_Large;
        txt_input = global.description;//sets default text
        txt_display = "Description: "
    }
    if(instance_id[thirdTextBoxRef] == id) //Currently unused, there if we need more text boses, must change textFields in TextInputBoxAddObject - Create
    {
        sprite_index = No_sprite;
        txt_input = "Error - Map Visibility not updated";
        txt_display = "Map visibility: "
    }
    if(instance_id[forthTextBoxRef] == id)
    {
        sprite_index = No_sprite;
        txt_input = global.locationEventNumber;//sets default text
        txt_display = "Number of events: "
    }
    if(instance_id[fifthTextBoxRef] == id)
    {
        sprite_index = No_sprite;
        txt_input = "Error - Event type not updated";//sets default text
        txt_display = "Event Type: "
    }
    if(instance_id[sixthTextBoxRef] == id)
    {
        sprite_index = TextInputBoxSprite_Small;
        txt_input = string(global.eventWeek);//sets default text
        txt_display = "Acvailable week: "
    }
    if(instance_id[seventhTextBoxRef] == id)
    {
        sprite_index = No_sprite;
        txt_input = global.eventMyth;//sets default text
        txt_display = "Visibility?: "
    }
}
if(room == RoomEventAdd or room == RoomEventEdit)
{
    if(instance_id[realNameTextBoxRef] == id)
    {
        txt_input = global.realEventName;//sets default text
        txt_display = "Event Name: ";     //sets display text
    }
    if(instance_id[descTextBoxRef] == id)
    {
        sprite_index = TextInputBoxSprite_Small;
        txt_input = global.reqEventInt;//sets default text
        txt_display = "Int: "
    }
    if(instance_id[thirdTextBoxRef] == id) //Currently unused, there if we need more text boses, must change textFields in TextInputBoxAddObject - Create
    {
        sprite_index = TextInputBoxSprite_Small;
        txt_input = global.reqEventChar;
        txt_display = "Char: "
    }
    if(instance_id[forthTextBoxRef] == id) //Currently unused, there if we need more text boses, must change textFields in TextInputBoxAddObject - Create
    {
        sprite_index = TextInputBoxSprite_Small;
        txt_input = global.reqEventWell;
        txt_display = "Well: "
    }
    if(instance_id[fifthTextBoxRef] == id) //Currently unused, there if we need more text boses, must change textFields in TextInputBoxAddObject - Create
    {
        sprite_index = No_sprite;
        txt_input = "Error - Mythical status not set";
        txt_display = "Visibility?: "
    }
    
}
if(room == RoomEventList or room == RoomSelectEvent)
{
    image_xscale = 1.5;
    for(i = realNameTextBoxRef; i &lt; (realNameTextBoxRef+global.listLength); i++)
    {    
        if(instance_id[i] == id)
        {
            ref_display = global.eventRef;
            name_display = global.eventName;
            int_display = global.reqEventInt;
            char_display = global.reqEventChar;
            well_display = global.reqEventWell;
            switch(global.eventMythical)
            {
                case 0: mythical_display = "Normal Map";
                break;
                case 1: mythical_display = "Mythical Map";
                break;
                default: mythical_display = "Error: Missing info";
            }
        }
    }
}
myY = global.tempTextBoxY;//sets current Position (increases depending on instance)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.focus == id)//checks focus against the instance ID of the text boxes, this allows the select box to be the only one effected by text entry
{
    if(sprite_index == TextInputBoxSprite)
    {
        sprite_index = SelectedTextBoxSprite;
    }
    if(sprite_index == TextInputBoxSprite_Large)
    {
        sprite_index = SelectedTextBoxSprite_Large;
    }
    if(sprite_index == TextInputBoxSprite_Small)
    {
        sprite_index = SelectedTextBoxSprite_Small;
    }
    if keyboard_check_pressed(vk_anykey)
    {
        script_execute(keyStep);
        timer = -6;
    }
    if keyboard_check(vk_anykey)
    {
        if(timer == delay)
        {
            script_execute(keyStep);
            timer = 0;
        }
        if(timer &gt; delay)
        {
            timer = delay;
        }
        else if(timer &lt; delay)
        {
            timer++;
        }
    }
    if keyboard_check_released(vk_anykey)
    {
        timer = 0;
    }
}
if(global.focus != id)
{    if(sprite_index == SelectedTextBoxSprite)
    {
        sprite_index = TextInputBoxSprite;
    }
    if(sprite_index == SelectedTextBoxSprite_Large)
    {
        sprite_index = TextInputBoxSprite_Large;
    }
    if(sprite_index == SelectedTextBoxSprite_Small)
    {
        sprite_index = TextInputBoxSprite_Small;
    }
}
if(room == RoomLocationAdd)
{
    if(id == instance_id[thirdTextBoxRef])
    {
     if(global.locationEventNumber &gt; 0)
        {
            tempNormMap = 0;
            tempMythMap = 0;
            for(i = 0; i &lt; global.locationEventNumber; i++)
            {
                tempEventID = string(i);
                tempEvent = "Event"+tempEventID+"Type";
                ini_open(global.locationINI);
                tempEventRef = ini_read_real(global.tempLocation, tempEvent, 3);
                ini_close();
                s = string(tempEventRef)
                tempEventName = "Event"+s;
                ini_open(global.eventINI);
                tempMyth = ini_read_real(tempEventName, "Mythical", 3);
                ini_close();
                if(tempMyth == 0)
                {
                    tempNormMap = 1;
                }
                if(tempMyth == 1)
                {
                    tempMythMap = 1;
                }
                if(tempMyth == 2)
                {
                    tempNormMap = 1;
                    tempMythMap = 1;
                }
                if(tempMyth == 3)
                {
                    txt_input = "Both - No event selected";
                }
            }
            if(tempNormMap == 1 and tempMythMap == 1)
            {
                global.locationMyth = 2;
                global.eventMyth = 2;
                txt_input = "Both Maps";
            }
            if(tempNormMap == 0 and tempMythMap == 1)
            {
                global.locationMyth = 1;
                global.eventMyth = 1;
                txt_input = "Mythical Map";
            }
            if(tempNormMap == 1 and tempMythMap == 0)
            {
                global.locationMyth = 0
                global.eventMyth = 0;
                txt_input = "Normal Map";
            }
        }
        if(global.locationEventNumber == 0)
        {
            switch(global.locationMyth)
            {
                case 0: txt_input = "Normal Map";
                break;
                case 1: txt_input = "Mythical Map";
                break;
                case 2: txt_input = "Both Maps - No event";
                break;
                default: txt_input = "Error - Missing mythical info";
            }
        }
    }
    if(id == instance_id[forthTextBoxRef])
    {
        txt_input = global.locationEventNumber;
    }
    if(id == instance_id[fifthTextBoxRef])
    {
        if(global.eventType != 0)
        {
            s = string(global.eventType)
            tempEvent = "Event"+s;
            ini_open(global.eventINI);
            txt_input = ini_read_string(tempEvent, "Event Name", "");
            ini_close();
        }
        else
        {
            txt_input = "No event selected";
        }

    }
    if(id == instance_id[sixthTextBoxRef])
    {
        txt_input = string(global.eventWeek);
    }
    if(id == instance_id[seventhTextBoxRef])
    {
        if(global.eventType != 0)
        {
            s = string(global.eventType)
            tempEvent = "Event"+s;
            ini_open(global.eventINI);
            global.eventMyth = ini_read_real(tempEvent, "Mythical", 0);
            txt_input = string(global.eventMyth);
            ini_close();
            switch(global.eventMyth)
            {
                case 0: txt_input = "Normal Map";
                break;
                case 1: txt_input = "Mythical Map";
                break;
                default: txt_input = "No event selected"; 
            }
        }
        else
        {
            txt_input = "No event selected";
        }
    }
}
if(room == RoomEventAdd or room == RoomEventEdit)
{
    if(id == instance_id[descTextBoxRef])
    {
        txt_input = string(global.reqEventInt);
    }
    if(id == instance_id[thirdTextBoxRef])
    {
        txt_input = string(global.reqEventChar);
    }
    if(id == instance_id[forthTextBoxRef])
    {
        txt_input = string(global.reqEventWell);
    }
    if(id == instance_id[fifthTextBoxRef])
    {
        switch(global.eventMythical)
        {
            case 0: txt_input = "Normal event";
            break;
            case 1: txt_input = "Mythical event";
            break;
            default: txt_input = "Error - Missing event mythical info";
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.focus = id;//if the button is id, set the focus to this objects id
if(room == RoomEventList)
{
    global.eventRef = id.ref_display;
    room = RoomEventEdit;
}
if(room == RoomSelectEvent)
{
    global.eventType = id.ref_display;
    ini_open(global.locationINI);
    s = string(global.EventID);
    eventType = "Event"+s+"Type";
    ini_write_real(global.tempLocation,eventType,global.eventType);
    ini_close();
    room = RoomLocationAdd;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == RoomLocationAdd)
{
    draw_set_valign(fa_top);
    draw_set_halign(fa_right);
    draw_text(global.InputTextX, myY, txt_display);//Draws the input text
    draw_set_halign(fa_left);
    if(id != instance_id[descTextBoxRef])
    {
        draw_text(global.InputBoxX, myY, txt_input); //draws the input box text
    }
    else
    {   
        draw_text_ext(global.InputBoxX, myY ,txt_input, 20, 300);
    }
}
else if(room == RoomEventAdd or room == RoomEventEdit)
{
    draw_set_valign(fa_top);
    draw_set_halign(fa_right);
    draw_text(global.InputTextX, myY ,txt_display);//Draws the input text
    draw_set_halign(fa_left);
    draw_text(global.InputBoxX, myY ,txt_input); //draws the input box text
}
else if(room == RoomEventList or room == RoomSelectEvent)
{
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    draw_text(global.InputBoxX - 25, myY, ref_display); //draws the input box text
    draw_text(global.InputBoxX + 25, myY, name_display);
    draw_text(global.InputBoxX + 125, myY, int_display); 
    draw_text(global.InputBoxX + 150, myY, char_display); 
    draw_text(global.InputBoxX + 175, myY, well_display); 
    draw_text(global.InputBoxX + 200, myY, mythical_display); 
}
//draw_text_ext(x,y,string, seperation (between lines, go with 5), w(max width in pixels before current line breaks and starts a new line)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

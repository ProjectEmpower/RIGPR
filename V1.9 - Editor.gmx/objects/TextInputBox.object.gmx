<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>TextInputBoxSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This code creates the text boxes default display info

realNameTextBoxRef = global.textBoxInstanceRef;//takes the textBoxInstanceRef (set via instance_count) and creates a variable for use on this page
descTextBoxRef = realNameTextBoxRef+1; //creates the references to the textboxes instance, accessed via instance_id[ref]
thirdTextBoxRef = realNameTextBoxRef+2;
forthTextBoxRef = realNameTextBoxRef+3;
fifthTextBoxRef = realNameTextBoxRef+4;
sixthTextBoxRef = realNameTextBoxRef+5;
seventhTextBoxRef = realNameTextBoxRef+6;
eighthTextBoxRef = realNameTextBoxRef+7;
timer = 0;//sets timer to 0
delay = 4;//sets the delay on text entry
textShortLength = 30;//sets the max text for small text boxes
textLongLength = 200;//sets the max text for large text boxes
image_xscale = 1.5; //sets the scale to be 1.5 (default is 1)
if(room == RoomLocationAdd)//checks room
{    
    if(instance_id[realNameTextBoxRef] == id)//checks instnace_id[ref] vs the id (current box clicked on)
    {
        txt_input = global.realLocationName;//sets default text
        txt_display = "Location Name: ";     //sets display text
    }
    if(instance_id[descTextBoxRef] == id)
    {
        sprite_index = TextInputBoxSprite_Large;//changes the sprite to fit the spacing/text length
        txt_input = global.description;//sets default text
        txt_display = "Description: "
    }
    if(instance_id[thirdTextBoxRef] == id) 
    {
        sprite_index = No_sprite;
        txt_input = "Error - Map Visibility not updated";//if this is not update elsewhere, this will set
        txt_display = "Map visibility: "
    }
    if(instance_id[forthTextBoxRef] == id)
    {
        sprite_index = No_sprite;
        txt_input = global.locationEventNumber;//sets default text
        txt_display = "Number of events: "
    }
    if(instance_id[fifthTextBoxRef] == id)
    {
        sprite_index = No_sprite;
        txt_input = "Error - Event type not updated";//sets default text
        txt_display = "Event Type: "
    }
    if(instance_id[sixthTextBoxRef] == id)
    {
        sprite_index = TextInputBoxSprite_Small;
        txt_input = string(global.eventWeek);//sets default text
        txt_display = "Acvailable week: "
    }
    if(instance_id[seventhTextBoxRef] == id)
    {
        sprite_index = No_sprite;
        txt_input = global.eventMyth;//sets default text
        txt_display = "Visibility?: "
    }
}
if(room == RoomEventAdd or room == RoomEventEdit)
{
    if(instance_id[realNameTextBoxRef] == id)
    {
        txt_input = global.realEventName;//sets default text
        txt_display = "Event Name: ";     //sets display text
    }
    if(instance_id[descTextBoxRef] == id)
    {
        sprite_index = TextInputBoxSprite_Small;
        txt_input = global.reqEventInt;//sets default text
        txt_display = "Required Int: "
    }
    if(instance_id[thirdTextBoxRef] == id) 
    {
        sprite_index = TextInputBoxSprite_Small;
        txt_input = global.reqEventChar;
        txt_display = "Required Char: "
    }
    if(instance_id[forthTextBoxRef] == id) 
    {
        sprite_index = TextInputBoxSprite_Small;
        txt_input = global.reqEventWell;
        txt_display = "Required Well: "
    }
    if(instance_id[fifthTextBoxRef] == id)
    {
        sprite_index = No_sprite;
        txt_input = "Error - Mythical status not set";
        txt_display = "Visibility?: "
    }
    if(instance_id[sixthTextBoxRef] == id) 
    {
        txt_input = global.card1;
        txt_display = "Card1: "
    }
    if(instance_id[seventhTextBoxRef] == id) 
    {
        txt_input = global.card2;
        txt_display = "Card2: "
    }
    if(instance_id[eighthTextBoxRef] == id) 
    {
        txt_input = global.card3;
        txt_display = "Card3: "
    }
}
if(room == RoomEventList or room == RoomEventSelect)
{
    image_xscale = 2;//changes the scale
    for(i = realNameTextBoxRef; i &lt; (realNameTextBoxRef+global.listLength); i++)//goes through the list of events 
    {    
        if(instance_id[i] == id)//sets each event (in the list), with default variables
        {
            ref_display = global.eventRef;
            name_display = global.realEventName;
            int_display = global.reqEventInt;
            char_display = global.reqEventChar;
            well_display = global.reqEventWell;
            
            switch(global.eventMythical)//checks the mythical status, and displays apporpriately
            {
                case 0: mythical_display = "Normal Map";
                break;
                case 1: mythical_display = "Mythical Map";
                break;
                default: mythical_display = "Error: Missing info";
            }
        }
    }
}
if(room == RoomCardAdd or room == RoomCardEdit)
{
    if(instance_id[realNameTextBoxRef] == id)
    {
        txt_input = global.realCardName;//sets default text
        txt_display = "Card Name: ";     //sets display text
    }
    if(instance_id[descTextBoxRef] == id)
    {
        sprite_index = No_sprite;
        switch(global.cardMythical)
        {
            case 0: txt_input = "Normal Card";
            break;
            case 1: txt_input = "Mythical Card";
            break;
            default: txt_input = "Error: Card mythical status not loaded"; 
        }
        txt_display = "Mythical?: "
    }
    if(instance_id[thirdTextBoxRef] == id)
    {
        sprite_index = TextInputBoxSprite_Small;
        txt_input = global.int;//sets default text
        txt_display = "Int: "
    }
    if(instance_id[forthTextBoxRef] == id) //Currently unused, there if we need more text boses, must change textFields in TextInputBoxAddObject - Create
    {
        sprite_index = TextInputBoxSprite_Small;
        txt_input = global.char;
        txt_display = "Char: "
    }
    if(instance_id[fifthTextBoxRef] == id) //Currently unused, there if we need more text boses, must change textFields in TextInputBoxAddObject - Create
    {
        sprite_index = TextInputBoxSprite_Small;
        txt_input = global.well;
        txt_display = "Well: "
    }
    if(instance_id[sixthTextBoxRef] == id) //Currently unused, there if we need more text boses, must change textFields in TextInputBoxAddObject - Create
    {
        sprite_index = TextInputBoxSprite_Large;
        txt_input = global.cardText;
        txt_display = "Text: "
    }
}
if(room == RoomCardList or room == RoomCardSelect)
{
    image_xscale = 2;
    for(i = realNameTextBoxRef; i &lt; (realNameTextBoxRef+global.listLength); i++)
    {    
        if(instance_id[i] == id)
        {
            ref_display = global.cardRef;
            name_display = global.realCardName;
            int_display = global.int;
            char_display = global.char;
            well_display = global.well;
            text_display = global.cardText;//not shown here        
            switch(global.cardMythical)
            {
                case 0: myth_display = "N";
                break;
                case 1: myth_display = "M";
                break;   
            }
        }
    }
}

myY = global.tempTextBoxY;//sets current Position (increases depending on instance)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.focus == id)//checks focus against the instance ID of the text boxes, this allows the select box to be the only one effected by text entry
{
    //this code is used for switching the text boxes sprite between normal and selected.
    if(sprite_index == TextInputBoxSprite)//if normal sprite
    {
        sprite_index = SelectedTextBoxSprite;//change to selected normal sprite
    }
    if(sprite_index == TextInputBoxSprite_Large) //if large sprite
    {
        sprite_index = SelectedTextBoxSprite_Large;//change to selected large sprite
    }
    if(sprite_index == TextInputBoxSprite_Small)//etc.
    {
        sprite_index = SelectedTextBoxSprite_Small;
    }
    //this code is used for actually displaying the text (via script, keyStep) and delaying key entry
    //this is used because otherwise it enters about 10 characters a second.
    if keyboard_check_pressed(vk_anykey)//if any key is pressed
    {
        script_execute(keyStep);//execute the script "keystep" and enter a key
        timer = -6;//set the timer to -6, this is used to create a slight delay between first key entered and the next x (so first key has a logner delay than the rest, try entering a key on a text field if this doesn't make sence)
    }
    if keyboard_check(vk_anykey)//if the key is held down
    {
        if(timer == delay)//if the timer is equal to the current delay
        {
            script_execute(keyStep); //execute the script "keystep" and enter a key
            timer = 0; //set timer to 0
        }
        if(timer &gt; delay)//if the timer goes over the delay time
        {
            timer = delay; //set the timer to the delay time
        }
        else if(timer &lt; delay)//if the timer is under delay time
        {
            timer++;//increase the timer 
        }
    }
    if keyboard_check_released(vk_anykey)//if the key is released
    {
        timer = 0;//set the timer back to 0
    }
}
//this code is used for switching the text boxes sprite between selected and normal, same as above but in reverse, when the box is no longer in focus.
if(global.focus != id)
{    if(sprite_index == SelectedTextBoxSprite)
    {
        sprite_index = TextInputBoxSprite;
    }
    if(sprite_index == SelectedTextBoxSprite_Large)
    {
        sprite_index = TextInputBoxSprite_Large;
    }
    if(sprite_index == SelectedTextBoxSprite_Small)
    {
        sprite_index = TextInputBoxSprite_Small;
    }
}
//individual rooms specific entry requirements, numbers, unenterable feilds (from button clicks), etc.
if(room == RoomLocationAdd)
{
    //This code is used for the mythical status on location add, it goes through the list of events and if any are mythical or normal, it flags this.
    //It then takes that information and displays the correct mythical status for the location, based on all events.
    if(id == instance_id[thirdTextBoxRef])
    {
     if(global.locationEventNumber &gt; 0)
        {
            tempNormMap = 0;//set normal map to 0 (false)
            tempMythMap = 0;//set mythical map to 0 (false)
            for(i = 1; i &lt;= global.locationEventNumber; i++)//go through the events
            {
                tempEventID = string(i);//create a string of the event id based on the iteration (i) 
                tempEvent = "Event"+tempEventID+"Type";//creates the tempEvent variable for use when accessing the events information from the location ini
                ini_open(global.locationINI);//opens the location ini
                tempEventRef = ini_read_real(global.tempLocation, tempEvent, 3);//reads the events reference 
                ini_close();//closes the location ini
                s = string(tempEventRef)//uses the reference set above and creates a string with it
                tempEventName = "Event"+s;//uses the string to create the event name "Event"+*string set above"
                ini_open(global.eventINI);//opens the event ini
                tempMyth = ini_read_real(tempEventName, "Mythical", 3);//reads tge mythical status of current event
                ini_close();//closes the event ini
                switch(tempMyth)//checks the events mythical statsus, changes the tempNormMap and tempMythMap variables accordingly
                {
                    case 0: tempNormMap = 1;
                    break;
                    case 1: tempMythMap = 1;
                    break;
                    case 2: tempNormMap = 1;
                            tempMythMap = 1;
                    break;
                    case 3: txt_input = "Editor only - Please select an event";
                    break;
                    default: txt_input = "None - Error: L93";
                    break;
                }
            }
            //sets locationMyth variable and text input accordingly
            if(tempNormMap == 1 and tempMythMap == 1)
            {
                global.locationMyth = 2;
                //global.eventMyth = 2; //unsure if needed.... I don't think so anymore. testing required.
                txt_input = "Both Maps";
            }
            if(tempNormMap == 0 and tempMythMap == 1)
            {
                global.locationMyth = 1;
               // global.eventMyth = 1;
                txt_input = "Mythical Map";
            }
            if(tempNormMap == 1 and tempMythMap == 0)
            {
                global.locationMyth = 0
                //global.eventMyth = 0;
                txt_input = "Normal Map";
            }
        }
        if(global.locationEventNumber == 0)//sets mythical status if there are no buttons visible.
        {
            switch(global.locationMyth)
            {
                case 0: txt_input = "Normal Map";
                break;
                case 1: txt_input = "Mythical Map";
                break;
                case 2: txt_input = "Editor only - Event missing";
                break;
                default: txt_input = "None - Error: L127";
            }
        }
    }
    if(id == instance_id[forthTextBoxRef])
    {
        txt_input = global.locationEventNumber;
    }
    if(id == instance_id[fifthTextBoxRef])
    {
        //checks to see the events type, it displays the event name
        if(global.eventType != 0)//if there is an event type (other than 0, which is blank)
        {
            s = string(global.eventType)//set string based on the type
            tempEvent = "Event"+s;//set event name to load based on the string above
            ini_open(global.eventINI);//open ini
            txt_input = ini_read_string(tempEvent, "Event Name", "");//loads the events name using the type variable
            ini_close();//closes the ini
        }
        else
        {
            txt_input = "No event selected";//if the event is blank, display text
        }

    }
    if(id == instance_id[sixthTextBoxRef])
    {
        //this code stops the user from adding more than 4 events in a week (for this location only)
        week = 0;
        if(global.eventWeek != 0)
        {
            ini_open(global.locationINI);
            for(i = 1; i &lt; global.EventID; i++)
            {   
                s = string(i)
                tempEventWeek = "Event"+s+"Week";
                tempWeek = ini_read_real(global.tempLocation,tempEventWeek,0);
                if(tempWeek == global.eventWeek)
                {
                    week += global.eventWeek;
                }
            }
            for(i = global.EventID+1; i &lt;= global.locationEventNumber; i++)
            {   
                s = string(i)
                tempEventWeek = "Event"+s+"Week";
                tempWeek = ini_read_real(global.tempLocation,tempEventWeek,0);
                if(tempWeek == global.eventWeek)
                {
                    week += global.eventWeek;
                }
            }
            ini_close();
            if(week == global.eventWeek)
            {
                global.eventWeek = global.oldWeek;
            }
            txt_input = string(global.eventWeek);      

            
        }
    }
    if(id == instance_id[seventhTextBoxRef])
    {
    //checks the event types mythical status and displays accordingly
        if(global.eventType != 0)
        {
            s = string(global.eventType)
            tempEvent = "Event"+s;
            ini_open(global.eventINI);
            global.eventMyth = ini_read_real(tempEvent, "Mythical", 0);
            txt_input = string(global.eventMyth);
            ini_close();
            switch(global.eventMyth)
            {
                case 0: txt_input = "Normal Map";
                break;
                case 1: txt_input = "Mythical Map";
                break;
                default: txt_input = "No event selected"; 
            }
        }
        else
        {
            txt_input = "No event selected";
        }
    }
}
if(room == RoomEventAdd or room == RoomEventEdit)
{
    if(id == instance_id[descTextBoxRef])
    {
        txt_input = string(global.reqEventInt);
    }
    if(id == instance_id[thirdTextBoxRef])
    {
        txt_input = string(global.reqEventChar);
    }
    if(id == instance_id[forthTextBoxRef])
    {
        txt_input = string(global.reqEventWell);
    }
    if(id == instance_id[fifthTextBoxRef])
    {
    //checks the event mythical status and displays accordingly
        switch(global.eventMythical)
        {
            case 0: txt_input = "Normal event";
            break;
            case 1: txt_input = "Mythical event";
            break;
            default: txt_input = "Error - Missing event mythical info";
        }
    }
    if(instance_id[sixthTextBoxRef] == id) 
    {
        //checks to see if there is a card selected, if so, it displays the cards name
        if(global.card1 == 0)
        {
            txt_input = "No Card Selected";
        }
        else
        {
            s = string(global.card1);
            cardName = "Card"+s;
            ini_open(global.cardINI);
            realCardName = ini_read_string(cardName,"Card Name","");
            ini_close();
            txt_input = realCardName;
        }
    }
    if(instance_id[seventhTextBoxRef] == id) 
    {
     //checks to see if there is a card selected, if so, it displays the cards name
        if(global.card2 == 0)
        {
            txt_input = "No Card Selected";
        }
        else
        {
            s = string(global.card2);
            cardName = "Card"+s;
            ini_open(global.cardINI);
            realCardName = ini_read_string(cardName,"Card Name","");
            ini_close();
            txt_input = realCardName;
        }
    }
    if(instance_id[eighthTextBoxRef] == id) 
    {
     //checks to see if there is a card selected, if so, it displays the cards name
        if(global.card3 == 0)
        {
            txt_input = "No Card Selected";
        }
        else
        {
            s = string(global.card3);
            cardName = "Card"+s;
            ini_open(global.cardINI);
            realCardName = ini_read_string(cardName,"Card Name","");
            ini_close();
            txt_input = realCardName;
        }
    }
}
if(room == RoomCardAdd or room == RoomCardEdit)
{
   if(id == instance_id[descTextBoxRef])
    {
        switch(global.cardMythical)
        {
            case 0: txt_input = "Normal Card";
            break;
            case 1: txt_input = "Mythical Card";
            break;
            default: txt_input = "Error: Card mythical status not loaded"; 
        }
    }
   if(id == instance_id[thirdTextBoxRef])
    {
        txt_input = string(global.int);
    }
    if(id == instance_id[forthTextBoxRef])
    {
        txt_input = string(global.char);
    }
    if(id == instance_id[fifthTextBoxRef])
    {
        txt_input = string(global.well);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If a text box is clicked on, this is what happens
global.focus = id;//the focus is set to the current instances ID (button clicked ID)
if(room == RoomEventList)
{
    global.eventRef = id.ref_display;//takes the ref displayed in this instance, and sets it to the global eventRef
    room = RoomEventEdit;//changes room
}
if(room == RoomEventSelect)
{
    //this opens the location ini, and updates the type section inside
    global.eventType = id.ref_display;//takes the ref displayed
    ini_open(global.locationINI);//opens locatio ini
    s = string(global.EventID);//creates a string using the eventID
    eventType = "Event"+s+"Type";//creates a eventname using type and the string above
    ini_write_real(global.tempLocation,eventType,global.eventType);//writes the info to the ini
    ini_close();//closes the ini
    room = RoomLocationAdd;
}
if(room == RoomCardList)
{
    global.cardRef = id.ref_display;
    room = RoomCardEdit;
}
if(room == RoomEventEdit or room == RoomEventAdd)
{
    //if you click on a card spot on the event screens, it will open the RoomCardSelect to allow the user to select a card.
    if(id == instance_id[global.textBoxInstanceRef+5] or id == instance_id[ global.textBoxInstanceRef+6] or id == instance_id[ global.textBoxInstanceRef+7])
    {
        for(i = 5; i &lt; 8; i++)
        {
            if(instance_id[global.textBoxInstanceRef+i] == id)
            {
                global.currentCard = i-4;
            }
        }
        global.lastRoom = room;//sets the current room to "lastroom", used below.
        room = RoomCardSelect;
    }
}
if(room == RoomCardSelect)
{
    //writes the cards type to the event inside the event ini file
    global.cardType = id.ref_display;//sets the ref to "cardtype"
    ini_open(global.eventINI);//open the event ini
    s = string(global.currentCard);
    cardToUpdate = "Card"+s;
    ini_write_real(global.eventName,cardToUpdate,global.cardType);
    ini_close();//closes the ini
    room = global.lastRoom;//reads the "lastroom" variable and sets that to room
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This sets up the individual rooms text to actually draw on screen
//this includes text alignment, sizing of boxes, screen positioning
if(room == RoomLocationAdd)
{
    draw_set_valign(fa_top);
    draw_set_halign(fa_right);
    draw_text(global.InputTextX, myY, txt_display);//Draws the input text
    draw_set_halign(fa_left);
    if(id != instance_id[descTextBoxRef])
    {
        draw_text(global.InputBoxX, myY, txt_input); //draws the input box text
    }
    else
    {   
        draw_text_ext(global.InputBoxX, myY ,txt_input, 20, 300);
    }
}
else if(room == RoomEventAdd or room == RoomEventEdit)
{
    draw_set_valign(fa_top);
    draw_set_halign(fa_right);
    draw_text(global.InputTextX, myY ,txt_display);//Draws the input text
    draw_set_halign(fa_left);
    draw_text(global.InputBoxX, myY ,txt_input); //draws the input box text
}
else if(room == RoomEventList or room == RoomEventSelect)
{
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    draw_text(global.InputBoxX - 25, myY, ref_display); //draws the input box text
    draw_text(global.InputBoxX + 0, myY, name_display);
    draw_text(global.InputBoxX + 125, myY, int_display); 
    draw_text(global.InputBoxX + 150, myY, char_display); 
    draw_text(global.InputBoxX + 175, myY, well_display); 
    draw_text(global.InputBoxX + 200, myY, mythical_display); 
}
else if(room == RoomCardList or room == RoomCardSelect)
{
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    draw_text(global.InputBoxX - 25, myY, ref_display); //draws the input box text
    draw_text(global.InputBoxX + 0, myY, name_display);
    draw_text(global.InputBoxX + 125, myY, int_display); 
    draw_text(global.InputBoxX + 150, myY, char_display); 
    draw_text(global.InputBoxX + 175, myY, well_display); 
    draw_text(global.InputBoxX + 200, myY, myth_display);     
    draw_text(global.InputBoxX + 225, myY, text_display); 
    
}
if(room == RoomCardAdd or room == RoomCardEdit)
{
    draw_set_valign(fa_top);
    draw_set_halign(fa_right);
    draw_text(global.InputTextX, myY ,txt_display);//Draws the input text
    draw_set_halign(fa_left);
    draw_text(global.InputBoxX, myY ,txt_input); //draws the input box text
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

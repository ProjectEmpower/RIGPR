<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>TextInputBoxSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This code creates the text boxes default display info

realNameTextBoxRef = global.textBoxInstanceRef;//takes the textBoxInstanceRef (set via instance_count) and creates a variable for use on this page
descTextBoxRef = realNameTextBoxRef+1; //creates the references to the textboxes instance, accessed via instance_id[ref]
thirdTextBoxRef = realNameTextBoxRef+2;
forthTextBoxRef = realNameTextBoxRef+3;
fifthTextBoxRef = realNameTextBoxRef+4;
sixthTextBoxRef = realNameTextBoxRef+5;
seventhTextBoxRef = realNameTextBoxRef+6;
eighthTextBoxRef = realNameTextBoxRef+7;
timer = 0;//sets timer to 0
delay = 4;//sets the delay on text entry
textShortLength = 30;//sets the max text for small text boxes
textLongLength = 200;//sets the max text for large text boxes
if(room == RoomNewGame)
{    
    image_xscale = 1.5;
    if(id == instance_id[realNameTextBoxRef])
    {
        txt_display = "Name: ";
        txt_input = "";
    }   
}
if(room == RoomLocationView)
{
    image_xscale = 1.5;

    for(i = 0; i &lt;= global.eventActionCardsNum; i++)
    {
        if(instance_id[realNameTextBoxRef + i] == id) 
        {          
                s = string(global.card1[i]);
                cardName = "Action"+s;
                ini_open(global.cardActionINI);
                realCardName = ini_read_string(cardName,"Card Name","");
                ini_close();
                txt_input = realCardName;
                txt_display = "Action Card: "
        }
    }
    if(instance_id[descTextBoxRef + global.eventActionCardsNum] == id) 
    {
        s = string(global.card2);
        cardName = "Cons"+s;
        ini_open(global.cardConsINI);
        realCardName = ini_read_string(cardName,"Card Name","");
        ini_close();
        txt_input = realCardName;
        txt_display = "Consequence Card: "
    }
    if(instance_id[thirdTextBoxRef + global.eventActionCardsNum] == id) 
    {
        s = string(global.card3);
        cardName = "Info"+s;
        ini_open(global.cardInfoINI);
        realCardName = ini_read_string(cardName,"Card Name","");
        ini_close();
        txt_input = realCardName;
        txt_display = "Information Card: "
    }
    if(instance_id[forthTextBoxRef + global.eventActionCardsNum] == id) 
    {
        s = string(global.card4);
        cardName = "Char"+s;
        ini_open(global.cardCharINI);
        realCardName = ini_read_string(cardName,"Card Name","");
        ini_close();
        txt_input = realCardName;
        txt_display = "Character Card: "
}
}

myY = global.tempTextBoxY;//sets current Position (increases depending on instance)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.focus == id)//checks focus against the instance ID of the text boxes, this allows the select box to be the only one effected by text entry
{
   //this code is used for switching the text boxes sprite between normal and selected.
    if(sprite_index == TextInputBoxSprite)//if normal sprite
    {
        sprite_index = SelectedTextBoxSprite;//change to selected normal sprite
    }
    if(sprite_index == TextInputBoxSprite_Large) //if large sprite
    {
        sprite_index = SelectedTextBoxSprite_Large;//change to selected large sprite
    }
    if(sprite_index == TextInputBoxSprite_Small)//etc.
    {
        sprite_index = SelectedTextBoxSprite_Small;
    }
    //this code is used for actually displaying the text (via script, keyStep) and delaying key entry
    //this is used because otherwise it enters about 10 characters a second.
    if keyboard_check_pressed(vk_anykey)//if any key is pressed
    {
        script_execute(keyStep);//execute the script "keystep" and enter a key
        timer = -6;//set the timer to -6, this is used to create a slight delay between first key entered and the next x (so first key has a logner delay than the rest, try entering a key on a text field if this doesn't make sence)
    }
    if keyboard_check(vk_anykey)//if the key is held down
    {
        if(timer == delay)//if the timer is equal to the current delay
        {
            script_execute(keyStep); //execute the script "keystep" and enter a key
            timer = 0; //set timer to 0
        }
        if(timer &gt; delay)//if the timer goes over the delay time
        {
            timer = delay; //set the timer to the delay time
        }
        else if(timer &lt; delay)//if the timer is under delay time
        {
            timer++;//increase the timer 
        }
    }
    if keyboard_check_released(vk_anykey)//if the key is released
    {
        timer = 0;//set the timer back to 0
    }
}
if(global.focus != id)
{    
if(sprite_index == SelectedTextBoxSprite)
    {
        sprite_index = TextInputBoxSprite;
    }
    if(sprite_index == SelectedTextBoxSprite_Large)
    {
        sprite_index = TextInputBoxSprite_Large;
    }
    if(sprite_index == SelectedTextBoxSprite_Small)
    {
        sprite_index = TextInputBoxSprite_Small;
    }
}
if(room == RoomNewGame)
{
    if(id == instance_id[realNameTextBoxRef])
    {
        global.name = txt_input;
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.focus = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == RoomNewGame)
{
    draw_set_valign(fa_middle);
    draw_set_halign(fa_right);
    draw_text(global.InputBoxX, myY ,txt_display);//Draws the input text
    draw_set_halign(fa_left);
    draw_text(global.InputBoxX, myY ,txt_input); //draws the input box text
}
if(room == RoomLocationView)
{
    draw_set_valign(fa_middle);
    draw_set_halign(fa_right);
    draw_text(global.InputTextX, myY ,txt_display);//Draws the input text
    draw_set_halign(fa_left);
    draw_text(global.InputBoxX, myY ,txt_input); //draws the input box text
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

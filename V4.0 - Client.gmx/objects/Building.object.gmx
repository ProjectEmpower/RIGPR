<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>BuildingSpriteNormal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//creation code for buildings
image_angle = 45;//angle of the building
ref = string(global.objectRef); //reference of the object in string
Name = "Location"+ref; //Location+*string*
ini_open(global.locationINI); //opens the location ini file1
locationEventNumber = ini_read_real(Name,"Number of Events",0);//reads the number of events
global.locationMyth = ini_read_real(Name,"Mythical",0); //reads the sprite
global.buildingSprite = ini_read_real(Name,"SpriteRef",0);
ini_close();//close the ini file
//the following code is used to check all events (if they exist) and see what the mythical status will be for the location itself (based on all events held in that location)
if(locationEventNumber &gt; 0)//checks the number of events
{
    //these are set to default to be used later when reading all events mythical status
    tempNormMap = 0;//set temp normal map to 0 (false)
    tempMythMap = 0;//set temp mythical map to 0 (false)
    for(i = 1; i &lt;= locationEventNumber; i++)//go through each events
    {
        tempEventID = string(i);//create a string of the event id based on the iteration (i) 
        tempEvent = "Event"+tempEventID+"Type";//creates the tempEvent variable for use when accessing the events information from the location ini
        ini_open(global.locationINI);//opens the location ini
        tempEventRef = ini_read_real(Name, tempEvent, 3);//reads the current events reference from the location ini
        ini_close();//closes the location ini
        s = string(tempEventRef)//uses the reference set above and creates a string of it
        tempEventName = "Event"+s;//uses the string to create the event name "Event"+*string*, set above in s
        ini_open(global.cardEventINI);//opens the event ini
        tempMyth = ini_read_real(tempEventName, "Mythical", 3);//reads the mythical status of the event, set above in tempEventName
        ini_close();//closes the event ini
        switch(tempMyth)//checks the events mythical statsus, changes the tempNormMap and tempMythMap variables accordingly
        {
            case 0: tempNormMap = 1;
            break;
            case 1: tempMythMap = 1;
            break;
            case 2: tempNormMap = 1;
                    tempMythMap = 1;
            default: 
            break;
        }
    }
    //after running the for loop, it checks the events mythical status data that was collected (if any were in normal, mythical or both)
    if(tempNormMap == 1 and tempMythMap == 1)
    {
        global.locationMyth = 2;
    }
    if(tempNormMap == 0 and tempMythMap == 1)
    {
        global.locationMyth = 1;
    }
    if(tempNormMap == 1 and tempMythMap == 0)
    {
        global.locationMyth = 0
    }
    ini_open(global.locationINI);//reopens the ini file
    ini_write_real(Name,"Mythical",global.locationMyth); //sets the new mythical status
    ini_close();
}
else
{
    //if there are no events
    global.locationMyth = 3;//set the locations mytical status to 2 (both)
    ini_open(global.locationINI);//open the ini file
    ini_write_real(Name,"Mythical",global.locationMyth);//rewrite the mythical status to the ini file
    ini_close();
} 
for(i = 0; i &lt; global.totalNormBuildingSprites; i++)
{
    if(global.buildingSprite == i)
    {
        if (global.locationMyth == 0)
        {
             sprite_index = global.normBuildingArray[i];
        }
        else if (global.locationMyth == 1)
        {
            sprite_index = global.mythBuildingArray[i];
        }
         else if (global.locationMyth == 2)
        {
            sprite_index = global.bothBuildingArray[i];
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This object is the buildings object, it will instance out to each building and the code above will occur when 
//any instance is RIGHT-clicked (we can filter their appearance down, so for example, it will only appear during a week, 
//day, period, etc. but ). 
if(global.moveLock == 0)
{
    global.Cont = 0;
    global.LoadText = "";
    for(t = 0; t &lt; global.TotalInstanceNum; t++) //runs for loop based on TotalInstanceNum (of buildings)
    {
        ini_open(global.locationINI);//opens the ini file
        currRef = string(t); //sets temp id to be a string of the current number of the loop
        locationName = "Location"+currRef; //sets locationname to the current instnace in the loop
        if(id.x == ini_read_real(locationName,"X",0) &amp;&amp; id.y == ini_read_real(locationName,"Y",0))//checks what location you are selecting, it checks the x/y vs the instance (id) x/y
        {
            tempEventNum = ini_read_real(locationName, "Number of Events", 0);
            global.realLocationName = ini_read_string(locationName, "Real Location Name", "");
            global.locDesc = ini_read_string(locationName, "Description", "");
           // for(e = 1; e &lt;= tempEventNum; e++)
            //{
               // tempEventID = string(e);
                //tempEventWeek = "Event"+tempEventID+"Week";
                //tempEventType = "Event"+tempEventID+"Type";
               // tempEventWeekMap = ini_read_real(locationName, tempEventWeek, 0);
               //  if(global.week == tempEventWeekMap) //if tempMyth is current mythical status (global.myth) or 2 (both) and the week matches the events week
               //  {
                //     global.eventRef = ini_read_real(locationName, tempEventType, 0);
                //     
    // 
                //     for(i = 1; i &lt;= global.totalEventCards; i++)
                //     {
                //         if(global.eventRef == i)
                //         {
               //              tempID = string(i);
               //              tempEvent = "Event"+tempID;
               //              ini_close();
               //              ini_open(global.cardEventINI)
               //              global.realEventName = ini_read_string(tempEvent, "Event Name", "");
               //              ini_close();
              //               ini_open(global.locationINI);
             //            }   
             //        }
             //   }
            //}
            global.tempNum = ini_read_real(locationName,"NumRef",0);//reads the location's ref to the global tempNum (used later)
            ini_close();//closes the ini file
            global.tempPos = 0;
            room = RoomLocationView//moves to the next room
        }
    }     
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
